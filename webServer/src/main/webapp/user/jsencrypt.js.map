{"version":3,"sources":["webpack:///jsencrypt.js","webpack:///./src/jsencrypt.js?54ae*","webpack:///./~/jsencrypt/bin/jsencrypt.js?a429*"],"names":["webpackJsonp","248","module","exports","__webpack_require__","32","Object","defineProperty","value","_jsencrypt2","obj","__esModule","default","_jsencrypt","crypt","jsencrypt","encode","publickey","str","setPublicKey","encrypt","decode","privatekey","setPrivateKey","decrypt","encrypted","36","global","factory","this","int2char","n","BI_RM","charAt","op_and","x","y","op_or","op_xor","op_andnot","lbit","r","cbit","hex2b64","h","i","c","ret","length","parseInt","substring","b64map","b64pad","b64tohex","s","k","slop","v","indexOf","__extends","d","b","__","constructor","extendStatics","prototype","create","stringCut","len","ellipsis","nbi","BigInteger","parseBigInt","am1","w","j","Math","floor","am2","xl","xh","l","m","am3","intAt","BI_RC","charCodeAt","nbv","fromInt","nbits","t","prng_newstate","Arcfour","rng_get_byte","rng_state","rng_pptr","rng_psize","random","rng_pool","init","next","pkcs1pad1","console","error","filler","f","pkcs1pad2","ba","rng","SecureRandom","nextBytes","pkcs1unpad2","toByteArray","String","fromCharCode","getDigestHeader","name","DIGEST_HEADERS","removeDigestHeader","name_1","hasOwnProperty","header","substr","decoder","decoder$1","dbits","setPrototypeOf","__proto__","Array","p","Hex","a","undefined","hex","ignore","toLowerCase","out","bits","char_count","Error","Base64","re","unarmor","exec","Int10","buf","mulAdd","sub","pop","toString","base","valueOf","simplify","reTimeS","reTimeL","Stream","enc","pos","hexDigits","get","hexByte","hexDump","start","end","raw","isASCII","parseStringISO","parseStringUTF","parseStringBMP","hi","lo","parseTime","shortYear","parseInteger","neg","pad","parseBitString","maxLength","unusedBit","lenBit","intro","skip","parseOctetString","parseOID","ASN1","stream","tag","ASN1Tag","typeName","tagClass","tagNumber","content","Infinity","posContent","abs","isUniversal","toPrettyString","indent","tagConstructed","max","posStart","posEnd","toHexString","decodeLength","getHexStringValue","hexString","offset","streamStart","getSub","isEOC","e","lowprimes","lplim","fromNumber","fromString","negate","toRadix","km","DB","ZERO","subTo","compareTo","bitLength","DM","mod","divRemTo","modPowInt","z","isEven","Classic","Montgomery","exp","clone","copyTo","intValue","DV","byteValue","shortValue","signum","equals","min","and","bitwiseTo","or","xor","andNot","not","shiftLeft","rShiftTo","lShiftTo","shiftRight","getLowestSetBit","bitCount","testBit","setBit","changeBit","clearBit","flipBit","add","addTo","subtract","multiply","multiplyTo","divide","remainder","divideAndRemainder","q","modPow","Barrett","g","k1","convert","g2","sqrTo","mulTo","is1","r2","revert","modInverse","ac","u","ONE","pow","NullExp","gcd","isProbablePrime","modInt","millerRabin","fromRadix","mi","sh","clamp","dlShiftTo","drShiftTo","bs","cbs","bm","ds","am","squareTo","pm","pt","ts","ms","nsh","ys","y0","yt","F1","F2","d1","FV","d2","qd","invDigit","chunkSize","LN2","log","cs","dMultiply","dAddOffset","op","multiplyLowerTo","multiplyUpperTo","n1","square","gcda","callback","gcda1","setTimeout","fromNumberAsync","bnp_1","bnpfn1_1","reduce","mp","mpl","mph","um","mt2","u0","q3","mu","navigator","appName","rr","vv","S","key","window","crypto","getRandomValues","Uint32Array","onMouseMoveListener_1","ev","count","removeEventListener","detachEvent","mouseCoordinates","addEventListener","attachEvent","RSAKey","dmp1","dmq1","coeff","doPublic","doPrivate","xp","xq","setPublic","N","E","text","setPrivate","D","setPrivateEx","P","Q","DP","DQ","C","generate","B","qs","ee","p1","q1","phi","ctext","generateAsync","rsa","loop1","loop4","loop3","loop2","sign","digestMethod","digestName","digest","verify","signature","replace","md2","md5","sha1","sha224","sha256","sha384","sha512","ripemd160","YAHOO","lang","extend","subc","superc","overrides","F","superclass","_IEEnumFix","ADD","test","userAgent","fname","ex","KJUR","asn1","ASN1Util","integerToByteHex","bigIntToMinTwosComplementsHex","bigIntegerValue","match","hPos","xorLen","hMask","getPEMStringFromHex","dataHex","pemHeader","hextopem","newObject","param","_KJUR","_KJUR_asn1","_DERBoolean","DERBoolean","_DERInteger","DERInteger","_DERBitString","DERBitString","_DEROctetString","DEROctetString","_DERNull","DERNull","_DERObjectIdentifier","DERObjectIdentifier","_DEREnumerated","DEREnumerated","_DERUTF8String","DERUTF8String","_DERNumericString","DERNumericString","_DERPrintableString","DERPrintableString","_DERTeletexString","DERTeletexString","_DERIA5String","DERIA5String","_DERUTCTime","DERUTCTime","_DERGeneralizedTime","DERGeneralizedTime","_DERSequence","DERSequence","_DERSet","DERSet","_DERTaggedObject","DERTaggedObject","_newObject","keys","paramList","asn1Obj","push","tagParam","call","explicit","newParam","jsonToASN1HEX","getEncodedHex","oidHexToInt","i01","i0","i1","binbuf","bin","slice","oidIntToHex","oidString","itox","split","splice","roid","bi","padLen","bPad","b8","ASN1Object","getLengthHexFromValue","hV","hN","hNlen","hTLV","isModified","getFreshValueHex","hL","hT","getValueHex","DERAbstractString","params","getString","setString","newS","stohex","setStringHex","newHexString","DERAbstractTime","localDateToUTC","utc","getTime","getTimezoneOffset","Date","formatDate","dateObject","type","withMillis","zeroPadding","year","getFullYear","month","getMonth","day","getDate","hour","getHours","getMinutes","sec","getSeconds","millis","getMilliseconds","sMillis","join","setByDateValue","UTC","setByDate","DERAbstractStructured","setByASN1ObjectArray","asn1ObjectArray","asn1Array","appendASN1Object","asn1Object","setByBigInteger","setByInteger","setValueHex","o","setHexValueIncludingUnusedBits","newHexStringIncludingUnusedBits","setUnusedBitsAndHexValue","unusedBits","hValue","hUnusedBits","setByBinaryString","binaryString","setByBooleanArray","booleanArray","newFalseArray","nLength","roidtox","setValueOidString","setValueName","oidName","oid","x509","OID","name2oid","date","sortFlag","sort","sortflag","isExplicit","setASN1Object","isExplicitFlag","tagNoHex","JSEncryptRSAKey","_super","_this","parseKey","hasPrivateKeyProperty","hasPublicKeyProperty","parsePropertiesFrom","pem","modulus","public_exponent","reHex","der","private_exponent","prime1","prime2","exponent1","exponent2","coefficient","bit_string","sequence","getPrivateBaseKey","options","array","int","bigint","getPrivateBaseKeyB64","getPublicBaseKey","first_sequence","second_sequence","getPublicBaseKeyB64","wordwrap","width","regex","RegExp","getPrivateKey","getPublicKey","JSEncrypt","default_key_size","default_public_exponent","setKey","warn","privkey","pubkey","getKey","cb","getPrivateKeyB64","getPublicKeyB64","version"],"mappings":"AAAAA,cAAc,IAERC,IACA,SAAUC,EAAQC,EAASC,GAEjCF,EAAOC,QAAUC,EAAoB,KAK/BC,GACA,SAAUH,EAAQC,EAASC,GAEjC,YAGAE,QAAOC,eAAeJ,EAAS,cAC9BK,OAAO,GCjBR,aDsBIC,EAEJ,SAAgCC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,QAASF,IAF9CG,GCrBrCC,EAAQ,GAAIC,UD0BhBZ,GAAQS,SCxBPI,OADa,SACNC,EAAWC,GAEjB,MADAJ,GAAMK,aAAa,6BAA+BF,EAAY,4BACvDH,EAAMM,QAAQF,IAEtBG,OALa,SAKNC,EAAYJ,GAElB,MADAJ,GAAMS,cAAc,kCAAoCD,EAAa,iCAC9DR,EAAMU,QAAQC,cD+BjBC,GACA,SAAUxB,EAAQC,EAASC,IEzChC,SAAUuB,EAAQC,GAC6CA,EAAQzB,IAGtE0B,EAAM,SAAW1B,GAAW,YAG9B,SAAS2B,GAASC,GACd,MAAOC,GAAMC,OAAOF,GAIxB,QAASG,GAAOC,EAAGC,GACf,MAAOD,GAAIC,EAGf,QAASC,GAAMF,EAAGC,GACd,MAAOD,GAAIC,EAGf,QAASE,GAAOH,EAAGC,GACf,MAAOD,GAAIC,EAGf,QAASG,GAAUJ,EAAGC,GAClB,MAAOD,IAAKC,EAGhB,QAASI,GAAKL,GACV,GAAS,GAALA,EACA,OAAQ,CAEZ,IAAIM,GAAI,CAoBR,OAnBoB,KAAX,MAAJN,KACDA,IAAM,GACNM,GAAK,IAES,IAAT,IAAJN,KACDA,IAAM,EACNM,GAAK,GAEQ,IAAR,GAAJN,KACDA,IAAM,EACNM,GAAK,GAEM,IAAN,EAAJN,KACDA,IAAM,EACNM,GAAK,GAEM,IAAN,EAAJN,MACCM,EAECA,EAGX,QAASC,GAAKP,GAEV,IADA,GAAIM,GAAI,EACI,GAALN,GACHA,GAAKA,EAAI,IACPM,CAEN,OAAOA,GAMX,QAASE,GAAQC,GACb,GAAIC,GACAC,EACAC,EAAM,EACV,KAAKF,EAAI,EAAGA,EAAI,GAAKD,EAAEI,OAAQH,GAAK,EAChCC,EAAIG,SAASL,EAAEM,UAAUL,EAAGA,EAAI,GAAI,IACpCE,GAAOI,EAAOlB,OAAOa,GAAK,GAAKK,EAAOlB,OAAW,GAAJa,EAUjD,KARID,EAAI,GAAKD,EAAEI,QACXF,EAAIG,SAASL,EAAEM,UAAUL,EAAGA,EAAI,GAAI,IACpCE,GAAOI,EAAOlB,OAAOa,GAAK,IAErBD,EAAI,GAAKD,EAAEI,SAChBF,EAAIG,SAASL,EAAEM,UAAUL,EAAGA,EAAI,GAAI,IACpCE,GAAOI,EAAOlB,OAAOa,GAAK,GAAKK,EAAOlB,QAAY,EAAJa,IAAU,KAEvC,EAAbC,EAAIC,QAAc,GACtBD,GAAOK,CAEX,OAAOL,GAGX,QAASM,GAASC,GACd,GACIT,GADAE,EAAM,GAENQ,EAAI,EACJC,EAAO,CACX,KAAKX,EAAI,EAAGA,EAAIS,EAAEN,QACVM,EAAErB,OAAOY,IAAMO,IADKP,EAAG,CAI3B,GAAIY,GAAIN,EAAOO,QAAQJ,EAAErB,OAAOY,GAC5BY,GAAI,IAGC,GAALF,GACAR,GAAOjB,EAAS2B,GAAK,GACrBD,EAAW,EAAJC,EACPF,EAAI,GAEM,GAALA,GACLR,GAAOjB,EAAU0B,GAAQ,EAAMC,GAAK,GACpCD,EAAW,GAAJC,EACPF,EAAI,GAEM,GAALA,GACLR,GAAOjB,EAAS0B,GAChBT,GAAOjB,EAAS2B,GAAK,GACrBD,EAAW,EAAJC,EACPF,EAAI,IAGJR,GAAOjB,EAAU0B,GAAQ,EAAMC,GAAK,GACpCV,GAAOjB,EAAa,GAAJ2B,GAChBF,EAAI,IAMZ,MAHS,IAALA,IACAR,GAAOjB,EAAS0B,GAAQ,IAErBT,EA0BX,QAASY,GAAUC,EAAGC,GAElB,QAASC,KAAOjC,KAAKkC,YAAcH,EADnCI,EAAcJ,EAAGC,GAEjBD,EAAEK,UAAkB,OAANJ,EAAavD,OAAO4D,OAAOL,IAAMC,EAAGG,UAAYJ,EAAEI,UAAW,GAAIH,IAsPnF,QAASK,GAAUjD,EAAKkD,GAIpB,MAHIlD,GAAI8B,OAASoB,IACblD,EAAMA,EAAIgC,UAAU,EAAGkB,GAAOC,GAE3BnD,EAunEX,QAASoD,KAAQ,MAAO,IAAIC,GAAW,MACvC,QAASC,GAAYtD,EAAKuB,GACtB,MAAO,IAAI8B,GAAWrD,EAAKuB,GAS/B,QAASgC,GAAI5B,EAAGV,EAAGuC,EAAGC,EAAG7B,EAAGf,GACxB,OAASA,GAAK,GAAG,CACb,GAAI0B,GAAItB,EAAIN,KAAKgB,KAAO6B,EAAEC,GAAK7B,CAC/BA,GAAI8B,KAAKC,MAAMpB,EAAI,UACnBiB,EAAEC,KAAW,SAAJlB,EAEb,MAAOX,GAKX,QAASgC,GAAIjC,EAAGV,EAAGuC,EAAGC,EAAG7B,EAAGf,GAGxB,IAFA,GAAIgD,GAAS,MAAJ5C,EACL6C,EAAK7C,GAAK,KACLJ,GAAK,GAAG,CACb,GAAIkD,GAAc,MAAVpD,KAAKgB,GACTD,EAAIf,KAAKgB,MAAQ,GACjBqC,EAAIF,EAAKC,EAAIrC,EAAImC,CACrBE,GAAIF,EAAKE,IAAU,MAAJC,IAAe,IAAMR,EAAEC,IAAU,WAAJ7B,GAC5CA,GAAKmC,IAAM,KAAOC,IAAM,IAAMF,EAAKpC,GAAKE,IAAM,IAC9C4B,EAAEC,KAAW,WAAJM,EAEb,MAAOnC,GAIX,QAASqC,GAAItC,EAAGV,EAAGuC,EAAGC,EAAG7B,EAAGf,GAGxB,IAFA,GAAIgD,GAAS,MAAJ5C,EACL6C,EAAK7C,GAAK,KACLJ,GAAK,GAAG,CACb,GAAIkD,GAAc,MAAVpD,KAAKgB,GACTD,EAAIf,KAAKgB,MAAQ,GACjBqC,EAAIF,EAAKC,EAAIrC,EAAImC,CACrBE,GAAIF,EAAKE,IAAU,MAAJC,IAAe,IAAMR,EAAEC,GAAK7B,EAC3CA,GAAKmC,GAAK,KAAOC,GAAK,IAAMF,EAAKpC,EACjC8B,EAAEC,KAAW,UAAJM,EAEb,MAAOnC,GAqCX,QAASsC,GAAM9B,EAAGT,GACd,GAAIC,GAAIuC,EAAM/B,EAAEgC,WAAWzC,GAC3B,OAAa,OAALC,GAAc,EAAIA,EAG9B,QAASyC,GAAI1C,GACT,GAAIJ,GAAI6B,GAER,OADA7B,GAAE+C,QAAQ3C,GACHJ,EAGX,QAASgD,GAAMtD,GACX,GACIuD,GADAjD,EAAI,CAsBR,OApBsB,KAAjBiD,EAAIvD,IAAM,MACXA,EAAIuD,EACJjD,GAAK,IAEW,IAAfiD,EAAIvD,GAAK,KACVA,EAAIuD,EACJjD,GAAK,GAEW,IAAfiD,EAAIvD,GAAK,KACVA,EAAIuD,EACJjD,GAAK,GAEW,IAAfiD,EAAIvD,GAAK,KACVA,EAAIuD,EACJjD,GAAK,GAEW,IAAfiD,EAAIvD,GAAK,KACVA,EAAIuD,EACJjD,GAAK,GAEFA,EA6CX,QAASkD,KACL,MAAO,IAAIC,IAoDf,QAASC,KACL,GAAiB,MAAbC,EAAmB,CAGnB,IAFAA,EAAYH,IAELI,GAAWC,IAAW,CACzB,GAAIC,GAASrB,KAAKC,MAAM,MAAQD,KAAKqB,SACrCC,IAASH,MAAuB,IAATE,EAG3B,IADAH,EAAUK,KAAKD,IACVH,GAAW,EAAGA,GAAWG,GAASlD,SAAU+C,GAC7CG,GAASH,IAAY,CAEzBA,IAAW,EAGf,MAAOD,GAAUM,OA6BrB,QAASC,GAAU/C,EAAGvB,GAClB,GAAIA,EAAIuB,EAAEN,OAAS,GAEf,MADAsD,SAAQC,MAAM,4BACP,IAIX,KAAK,GAFDnC,GAAMrC,EAAIuB,EAAEN,OAAS,EACrBwD,EAAS,GACJC,EAAI,EAAGA,EAAIrC,EAAKqC,GAAK,EAC1BD,GAAU,IAGd,OAAOhC,GADC,OAASgC,EAAS,KAAOlD,EACX,IAG1B,QAASoD,GAAUpD,EAAGvB,GAClB,GAAIA,EAAIuB,EAAEN,OAAS,GAEf,MADAsD,SAAQC,MAAM,4BACP,IAIX,KAFA,GAAII,MACA9D,EAAIS,EAAEN,OAAS,EACZH,GAAK,GAAKd,EAAI,GAAG,CACpB,GAAIe,GAAIQ,EAAEgC,WAAWzC,IACjBC,GAAI,IACJ6D,IAAK5E,GAAKe,EAEJA,EAAI,KAASA,EAAI,MACvB6D,IAAK5E,GAAU,GAAJe,EAAU,IACrB6D,IAAK5E,GAAMe,GAAK,EAAK,MAGrB6D,IAAK5E,GAAU,GAAJe,EAAU,IACrB6D,IAAK5E,GAAOe,GAAK,EAAK,GAAM,IAC5B6D,IAAK5E,GAAMe,GAAK,GAAM,KAG9B6D,IAAK5E,GAAK,CAGV,KAFA,GAAI6E,GAAM,GAAIC,IACV1E,KACGJ,EAAI,GAAG,CAEV,IADAI,EAAE,GAAK,EACQ,GAARA,EAAE,IACLyE,EAAIE,UAAU3E,EAElBwE,KAAK5E,GAAKI,EAAE,GAIhB,MAFAwE,KAAK5E,GAAK,EACV4E,IAAK5E,GAAK,EACH,GAAIwC,GAAWoC,GA8O1B,QAASI,GAAYnD,EAAG7B,GAGpB,IAFA,GAAI8B,GAAID,EAAEoD,cACNnE,EAAI,EACDA,EAAIgB,EAAEb,QAAkB,GAARa,EAAEhB,MACnBA,CAEN,IAAIgB,EAAEb,OAASH,GAAKd,EAAI,GAAa,GAAR8B,EAAEhB,GAC3B,MAAO,KAGX,OADEA,EACa,GAARgB,EAAEhB,IACL,KAAMA,GAAKgB,EAAEb,OACT,MAAO,KAIf,KADA,GAAID,GAAM,KACDF,EAAIgB,EAAEb,QAAQ,CACnB,GAAIF,GAAW,IAAPe,EAAEhB,EACNC,GAAI,IACJC,GAAOkE,OAAOC,aAAapE,GAErBA,EAAI,KAASA,EAAI,KACvBC,GAAOkE,OAAOC,cAAmB,GAAJpE,IAAW,EAAiB,GAAXe,EAAEhB,EAAI,MAClDA,IAGFE,GAAOkE,OAAOC,cAAmB,GAAJpE,IAAW,IAAmB,GAAXe,EAAEhB,EAAI,KAAY,EAAiB,GAAXgB,EAAEhB,EAAI,IAC9EA,GAAK,GAGb,MAAOE,GAaX,QAASoE,GAAgBC,GACrB,MAAOC,IAAeD,IAAS,GAEnC,QAASE,GAAmBpG,GACxB,IAAK,GAAIqG,KAAUF,IACf,GAAIA,GAAeG,eAAeD,GAAS,CACvC,GAAIE,GAASJ,GAAeE,GACxBnD,EAAMqD,EAAOzE,MACjB,IAAI9B,EAAIwG,OAAO,EAAGtD,IAAQqD,EACtB,MAAOvG,GAAIwG,OAAOtD,GAI9B,MAAOlD,GAlmGX,GAuKIyG,GAiEAC,EAssBAC,EA96BA7F,EAAQ,uCA2DRmB,EAAS,mEACTC,EAAS,IAgFTY,EAAgB,SAASJ,EAAGC,GAI5B,OAHAG,EAAgB1D,OAAOwH,iBAChBC,uBAA2BC,QAAS,SAAUpE,EAAGC,GAAKD,EAAEmE,UAAYlE,IACvE,SAAUD,EAAGC,GAAK,IAAK,GAAIoE,KAAKpE,GAAOA,EAAE2D,eAAeS,KAAIrE,EAAEqE,GAAKpE,EAAEoE,MACpDrE,EAAGC,IAwBxBqE,GACA7G,OAAQ,SAAU8G,GACd,GAAItF,EACJ,QAAgBuF,KAAZT,EAAuB,CACvB,GAAIU,GAAM,mBACNC,EAAS,wBAEb,KADAX,KACK9E,EAAI,EAAGA,EAAI,KAAMA,EAClB8E,EAAQU,EAAIpG,OAAOY,IAAMA,CAG7B,KADAwF,EAAMA,EAAIE,cACL1F,EAAI,GAAIA,EAAI,KAAMA,EACnB8E,EAAQU,EAAIpG,OAAOY,IAAMA,CAE7B,KAAKA,EAAI,EAAGA,EAAIyF,EAAOtF,SAAUH,EAC7B8E,EAAQW,EAAOrG,OAAOY,KAAO,EAGrC,GAAI2F,MACAC,EAAO,EACPC,EAAa,CACjB,KAAK7F,EAAI,EAAGA,EAAIsF,EAAEnF,SAAUH,EAAG,CAC3B,GAAIC,GAAIqF,EAAElG,OAAOY,EACjB,IAAS,KAALC,EACA,KAGJ,KAAU,IADVA,EAAI6E,EAAQ7E,IACZ,CAGA,OAAUsF,KAANtF,EACA,KAAM,IAAI6F,OAAM,+BAAiC9F,EAErD4F,IAAQ3F,IACF4F,GAAc,GAChBF,EAAIA,EAAIxF,QAAUyF,EAClBA,EAAO,EACPC,EAAa,GAGbD,IAAS,GAGjB,GAAIC,EACA,KAAM,IAAIC,OAAM,0CAEpB,OAAOH,KAmBXI,GACAvH,OAAQ,SAAU8G,GACd,GAAItF,EACJ,QAAkBuF,KAAdR,EAAyB,CACzB,GACIU,GAAS,yBAEb,KADAV,EAAYtH,OAAO4D,OAAO,MACrBrB,EAAI,EAAGA,EAAI,KAAMA,EAClB+E,EAJM,mEAIQ3F,OAAOY,IAAMA,CAE/B,KAAKA,EAAI,EAAGA,EAAIyF,EAAOtF,SAAUH,EAC7B+E,EAAUU,EAAOrG,OAAOY,KAAO,EAGvC,GAAI2F,MACAC,EAAO,EACPC,EAAa,CACjB,KAAK7F,EAAI,EAAGA,EAAIsF,EAAEnF,SAAUH,EAAG,CAC3B,GAAIC,GAAIqF,EAAElG,OAAOY,EACjB,IAAS,KAALC,EACA,KAGJ,KAAU,IADVA,EAAI8E,EAAU9E,IACd,CAGA,OAAUsF,KAANtF,EACA,KAAM,IAAI6F,OAAM,+BAAiC9F,EAErD4F,IAAQ3F,IACF4F,GAAc,GAChBF,EAAIA,EAAIxF,QAAWyF,GAAQ,GAC3BD,EAAIA,EAAIxF,QAAWyF,GAAQ,EAAK,IAChCD,EAAIA,EAAIxF,QAAiB,IAAPyF,EAClBA,EAAO,EACPC,EAAa,GAGbD,IAAS,GAGjB,OAAQC,GACJ,IAAK,GACD,KAAM,IAAIC,OAAM,sDACpB,KAAK,GACDH,EAAIA,EAAIxF,QAAWyF,GAAQ,EAC3B,MACJ,KAAK,GACDD,EAAIA,EAAIxF,QAAWyF,GAAQ,GAC3BD,EAAIA,EAAIxF,QAAWyF,GAAQ,EAAK,IAGxC,MAAOD,IAEXK,GAAI,4GACJC,QAAS,SAAUX,GACf,GAAIjD,GAAI0D,EAAOC,GAAGE,KAAKZ,EACvB,IAAIjD,EACA,GAAIA,EAAE,GACFiD,EAAIjD,EAAE,OAEL,KAAIA,EAAE,GAIP,KAAM,IAAIyD,OAAM,qBAHhBR,GAAIjD,EAAE,GAMd,MAAO0D,GAAOvH,OAAO8G,KAmBzBa,EAAuB,WACvB,QAASA,GAAMxI,GACXqB,KAAKoH,MAAQzI,GAAS,GAmE1B,MAjEAwI,GAAM/E,UAAUiF,OAAS,SAAUhE,EAAGpC,GAElC,GAEID,GACA6C,EAHA7B,EAAIhC,KAAKoH,IACThE,EAAIpB,EAAEb,MAGV,KAAKH,EAAI,EAAGA,EAAIoC,IAAKpC,EACjB6C,EAAI7B,EAAEhB,GAAKqC,EAAIpC,EACX4C,EAbN,KAcM5C,EAAI,GAGJA,EAAI,EAAK4C,EAjBf,KAkBMA,GAlBN,KAkBW5C,GAETe,EAAEhB,GAAK6C,CAEP5C,GAAI,IACJe,EAAEhB,GAAKC,IAGfkG,EAAM/E,UAAUkF,IAAM,SAAUrG,GAE5B,GAEID,GACA6C,EAHA7B,EAAIhC,KAAKoH,IACThE,EAAIpB,EAAEb,MAGV,KAAKH,EAAI,EAAGA,EAAIoC,IAAKpC,EACjB6C,EAAI7B,EAAEhB,GAAKC,EACP4C,EAAI,GACJA,GAnCN,KAoCM5C,EAAI,GAGJA,EAAI,EAERe,EAAEhB,GAAK6C,CAEX,MAA2B,IAApB7B,EAAEA,EAAEb,OAAS,IAChBa,EAAEuF,OAGVJ,EAAM/E,UAAUoF,SAAW,SAAUC,GACjC,GAAoB,KAAfA,GAAQ,IACT,KAAM,IAAIX,OAAM,4BAIpB,KAAK,GAFD9E,GAAIhC,KAAKoH,IACT3F,EAAIO,EAAEA,EAAEb,OAAS,GAAGqG,WACfxG,EAAIgB,EAAEb,OAAS,EAAGH,GAAK,IAAKA,EACjCS,IAtDF,KAsDcO,EAAEhB,IAAIwG,WAAWnG,UAAU,EAE3C,OAAOI,IAEX0F,EAAM/E,UAAUsF,QAAU,WAGtB,IAAK,GAFD1F,GAAIhC,KAAKoH,IACTxF,EAAI,EACCZ,EAAIgB,EAAEb,OAAS,EAAGH,GAAK,IAAKA,EACjCY,EA9DF,KA8DMA,EAAUI,EAAEhB,EAEpB,OAAOY,IAEXuF,EAAM/E,UAAUuF,SAAW,WACvB,GAAI3F,GAAIhC,KAAKoH,GACb,OAAoB,IAAZpF,EAAEb,OAAea,EAAE,GAAKhC,MAE7BmH,KAIP3E,EAAW,IACXoF,EAAU,+IACVC,EAAU,mJAOVC,EAAwB,WACxB,QAASA,GAAOC,EAAKC,GACjBhI,KAAKiI,UAAY,mBACbF,YAAeD,IACf9H,KAAK+H,IAAMA,EAAIA,IACf/H,KAAKgI,IAAMD,EAAIC,MAIfhI,KAAK+H,IAAMA,EACX/H,KAAKgI,IAAMA,GAsNnB,MAnNAF,GAAO1F,UAAU8F,IAAM,SAAUF,GAI7B,OAHYzB,KAARyB,IACAA,EAAMhI,KAAKgI,OAEXA,GAAOhI,KAAK+H,IAAI5G,OAChB,KAAM,IAAI2F,OAAM,0BAA4BkB,EAAM,0BAA4BhI,KAAK+H,IAAI5G,OAE3F,OAAQ,gBAAoBnB,MAAK+H,IAAO/H,KAAK+H,IAAItE,WAAWuE,GAAOhI,KAAK+H,IAAIC,IAEhFF,EAAO1F,UAAU+F,QAAU,SAAUnG,GACjC,MAAOhC,MAAKiI,UAAU7H,OAAQ4B,GAAK,EAAK,IAAOhC,KAAKiI,UAAU7H,OAAW,GAAJ4B,IAEzE8F,EAAO1F,UAAUgG,QAAU,SAAUC,EAAOC,EAAKC,GAE7C,IAAK,GADD9G,GAAI,GACCT,EAAIqH,EAAOrH,EAAIsH,IAAOtH,EAE3B,GADAS,GAAKzB,KAAKmI,QAAQnI,KAAKkI,IAAIlH,KACf,IAARuH,EACA,OAAY,GAAJvH,GACJ,IAAK,GACDS,GAAK,IACL,MACJ,KAAK,IACDA,GAAK,IACL,MACJ,SACIA,GAAK,IAIrB,MAAOA,IAEXqG,EAAO1F,UAAUoG,QAAU,SAAUH,EAAOC,GACxC,IAAK,GAAItH,GAAIqH,EAAOrH,EAAIsH,IAAOtH,EAAG,CAC9B,GAAIC,GAAIjB,KAAKkI,IAAIlH,EACjB,IAAIC,EAAI,IAAMA,EAAI,IACd,OAAO,EAGf,OAAO,GAEX6G,EAAO1F,UAAUqG,eAAiB,SAAUJ,EAAOC,GAE/C,IAAK,GADD7G,GAAI,GACCT,EAAIqH,EAAOrH,EAAIsH,IAAOtH,EAC3BS,GAAK2D,OAAOC,aAAarF,KAAKkI,IAAIlH,GAEtC,OAAOS,IAEXqG,EAAO1F,UAAUsG,eAAiB,SAAUL,EAAOC,GAE/C,IAAK,GADD7G,GAAI,GACCT,EAAIqH,EAAOrH,EAAIsH,GAAM,CAC1B,GAAIrH,GAAIjB,KAAKkI,IAAIlH,IAEbS,IADAR,EAAI,IACCmE,OAAOC,aAAapE,GAEnBA,EAAI,KAASA,EAAI,IAClBmE,OAAOC,cAAmB,GAAJpE,IAAa,EAAsB,GAAhBjB,KAAKkI,IAAIlH,MAGlDoE,OAAOC,cAAmB,GAAJpE,IAAa,IAAwB,GAAhBjB,KAAKkI,IAAIlH,OAAgB,EAAsB,GAAhBhB,KAAKkI,IAAIlH,MAGhG,MAAOS,IAEXqG,EAAO1F,UAAUuG,eAAiB,SAAUN,EAAOC,GAI/C,IAAK,GAFDM,GACAC,EAFAxJ,EAAM,GAGD2B,EAAIqH,EAAOrH,EAAIsH,GACpBM,EAAK5I,KAAKkI,IAAIlH,KACd6H,EAAK7I,KAAKkI,IAAIlH,KACd3B,GAAO+F,OAAOC,aAAcuD,GAAM,EAAKC,EAE3C,OAAOxJ,IAEXyI,EAAO1F,UAAU0G,UAAY,SAAUT,EAAOC,EAAKS,GAC/C,GAAItH,GAAIzB,KAAKyI,eAAeJ,EAAOC,GAC/BjF,GAAK0F,EAAYnB,EAAUC,GAASX,KAAKzF,EAC7C,OAAK4B,IAGD0F,IAGA1F,EAAE,IAAMA,EAAE,GACVA,EAAE,KAAQA,EAAE,GAAK,GAAM,IAAO,MAElC5B,EAAI4B,EAAE,GAAK,IAAMA,EAAE,GAAK,IAAMA,EAAE,GAAK,IAAMA,EAAE,GACzCA,EAAE,KACF5B,GAAK,IAAM4B,EAAE,GACTA,EAAE,KACF5B,GAAK,IAAM4B,EAAE,GACTA,EAAE,KACF5B,GAAK,IAAM4B,EAAE,MAIrBA,EAAE,KACF5B,GAAK,OACO,KAAR4B,EAAE,KACF5B,GAAK4B,EAAE,GACHA,EAAE,KACF5B,GAAK,IAAM4B,EAAE,MAIlB5B,GA3BI,sBAAwBA,GA6BvCqG,EAAO1F,UAAU4G,aAAe,SAAUX,EAAOC,GAO7C,IANA,GAGI/F,GAHAX,EAAI5B,KAAKkI,IAAIG,GACbY,EAAOrH,EAAI,IACXsH,EAAMD,EAAM,IAAM,EAElBxH,EAAI,GAEDG,GAAKsH,KAASb,EAAQC,GACzB1G,EAAI5B,KAAKkI,IAAIG,EAGjB,IAAY,KADZ9F,EAAM+F,EAAMD,GAER,MAAOY,IAAO,EAAI,CAGtB,IAAI1G,EAAM,EAAG,CAGT,IAFAd,EAAIG,EACJW,IAAQ,EACsB,IAAT,MAAXd,EAAIyH,KACVzH,GAAKA,GAAK,IACRc,CAENd,GAAI,IAAMc,EAAM,UAGhB0G,IACArH,GAAQ,IAGZ,KAAK,GADD1B,GAAI,GAAIiH,GAAMvF,GACTZ,EAAIqH,EAAQ,EAAGrH,EAAIsH,IAAOtH,EAC/Bd,EAAEmH,OAAO,IAAKrH,KAAKkI,IAAIlH,GAE3B,OAAOS,GAAIvB,EAAEsH,YAEjBM,EAAO1F,UAAU+G,eAAiB,SAAUd,EAAOC,EAAKc,GAKpD,IAAK,GAJDC,GAAYrJ,KAAKkI,IAAIG,GACrBiB,GAAWhB,EAAMD,EAAQ,GAAM,GAAKgB,EACpCE,EAAQ,IAAMD,EAAS,UACvB7H,EAAI,GACCT,EAAIqH,EAAQ,EAAGrH,EAAIsH,IAAOtH,EAAG,CAGlC,IAAK,GAFDgB,GAAIhC,KAAKkI,IAAIlH,GACbwI,EAAQxI,GAAKsH,EAAM,EAAKe,EAAY,EAC/BvG,EAAI,EAAGA,GAAK0G,IAAQ1G,EACzBrB,GAAMO,GAAKc,EAAK,EAAI,IAAM,GAE9B,IAAIrB,EAAEN,OAASiI,EACX,MAAOG,GAAQjH,EAAUb,EAAG2H,GAGpC,MAAOG,GAAQ9H,GAEnBqG,EAAO1F,UAAUqH,iBAAmB,SAAUpB,EAAOC,EAAKc,GACtD,GAAIpJ,KAAKwI,QAAQH,EAAOC,GACpB,MAAOhG,GAAUtC,KAAKyI,eAAeJ,EAAOC,GAAMc,EAEtD,IAAI7G,GAAM+F,EAAMD,EACZ5G,EAAI,IAAMc,EAAM,UACpB6G,IAAa,EACT7G,EAAM6G,IACNd,EAAMD,EAAQe,EAElB,KAAK,GAAIpI,GAAIqH,EAAOrH,EAAIsH,IAAOtH,EAC3BS,GAAKzB,KAAKmI,QAAQnI,KAAKkI,IAAIlH,GAK/B,OAHIuB,GAAM6G,IACN3H,GAAKe,GAEFf,GAEXqG,EAAO1F,UAAUsH,SAAW,SAAUrB,EAAOC,EAAKc,GAI9C,IAAK,GAHD3H,GAAI,GACJvB,EAAI,GAAIiH,GACRP,EAAO,EACF5F,EAAIqH,EAAOrH,EAAIsH,IAAOtH,EAAG,CAC9B,GAAIY,GAAI5B,KAAKkI,IAAIlH,EAGjB,IAFAd,EAAEmH,OAAO,IAAS,IAAJzF,GACdgF,GAAQ,IACE,IAAJhF,GAAW,CACb,GAAU,KAANH,EAEA,IADAvB,EAAIA,EAAEyH,qBACWR,GACbjH,EAAEoH,IAAI,IACN7F,EAAI,KAAOvB,EAAEsH,eAEZ,CACD,GAAInE,GAAInD,EAAI,GAAKA,EAAI,GAAK,EAAI,EAAI,CAClCuB,GAAI4B,EAAI,KAAOnD,EAAQ,GAAJmD,OAIvB5B,IAAK,IAAMvB,EAAEsH,UAEjB,IAAI/F,EAAEN,OAASiI,EACX,MAAO9G,GAAUb,EAAG2H,EAExBlJ,GAAI,GAAIiH,GACRP,EAAO,GAMf,MAHIA,GAAO,IACPnF,GAAK,eAEFA,GAEJqG,KAEP6B,EAAsB,WACtB,QAASA,GAAKC,EAAQhE,EAAQzE,EAAQ0I,EAAKvC,GACvC,KAAMuC,YAAeC,IACjB,KAAM,IAAIhD,OAAM,qBAEpB9G,MAAK4J,OAASA,EACd5J,KAAK4F,OAASA,EACd5F,KAAKmB,OAASA,EACdnB,KAAK6J,IAAMA,EACX7J,KAAKsH,IAAMA,EAqRf,MAnRAqC,GAAKvH,UAAU2H,SAAW,WACtB,OAAQ/J,KAAK6J,IAAIG,UACb,IAAK,GACD,OAAQhK,KAAK6J,IAAII,WACb,IAAK,GACD,MAAO,KACX,KAAK,GACD,MAAO,SACX,KAAK,GACD,MAAO,SACX,KAAK,GACD,MAAO,YACX,KAAK,GACD,MAAO,cACX,KAAK,GACD,MAAO,MACX,KAAK,GACD,MAAO,mBACX,KAAK,GACD,MAAO,kBACX,KAAK,GACD,MAAO,UACX,KAAK,GACD,MAAO,MACX,KAAK,IACD,MAAO,YACX,KAAK,IACD,MAAO,cACX,KAAK,IACD,MAAO,YACX,KAAK,IACD,MAAO,UACX,KAAK,IACD,MAAO,KACX,KAAK,IACD,MAAO,eACX,KAAK,IACD,MAAO,iBACX,KAAK,IACD,MAAO,eACX,KAAK,IACD,MAAO,gBACX,KAAK,IACD,MAAO,WACX,KAAK,IACD,MAAO,SACX,KAAK,IACD,MAAO,iBACX,KAAK,IACD,MAAO,eACX,KAAK,IACD,MAAO,eACX,KAAK,IACD,MAAO,eACX,KAAK,IACD,MAAO,iBACX,KAAK,IACD,MAAO,YAEf,MAAO,aAAejK,KAAK6J,IAAII,UAAUzC,UAC7C,KAAK,GACD,MAAO,eAAiBxH,KAAK6J,IAAII,UAAUzC,UAC/C,KAAK,GACD,MAAO,IAAMxH,KAAK6J,IAAII,UAAUzC,WAAa,GACjD,KAAK,GACD,MAAO,WAAaxH,KAAK6J,IAAII,UAAUzC,aAGnDmC,EAAKvH,UAAU8H,QAAU,SAAUd,GAC/B,OAAiB7C,KAAbvG,KAAK6J,IACL,MAAO,UAEOtD,KAAd6C,IACAA,EAAYe,IAEhB,IAAID,GAAUlK,KAAKoK,aACf7H,EAAMQ,KAAKsH,IAAIrK,KAAKmB,OACxB,KAAKnB,KAAK6J,IAAIS,cACV,MAAiB,QAAbtK,KAAKsH,IACE,IAAMtH,KAAKsH,IAAInG,OAAS,SAE5BnB,KAAK4J,OAAOH,iBAAiBS,EAASA,EAAU3H,EAAK6G,EAEhE,QAAQpJ,KAAK6J,IAAII,WACb,IAAK,GACD,MAAqC,KAA7BjK,KAAK4J,OAAO1B,IAAIgC,GAAkB,QAAU,MACxD,KAAK,GACD,MAAOlK,MAAK4J,OAAOZ,aAAakB,EAASA,EAAU3H,EACvD,KAAK,GACD,MAAOvC,MAAKsH,IAAM,IAAMtH,KAAKsH,IAAInG,OAAS,SACtCnB,KAAK4J,OAAOT,eAAee,EAASA,EAAU3H,EAAK6G,EAC3D,KAAK,GACD,MAAOpJ,MAAKsH,IAAM,IAAMtH,KAAKsH,IAAInG,OAAS,SACtCnB,KAAK4J,OAAOH,iBAAiBS,EAASA,EAAU3H,EAAK6G,EAE7D,KAAK,GACD,MAAOpJ,MAAK4J,OAAOF,SAASQ,EAASA,EAAU3H,EAAK6G,EAMxD,KAAK,IACL,IAAK,IACD,MAAiB,QAAbpJ,KAAKsH,IACE,IAAMtH,KAAKsH,IAAInG,OAAS,SAGxB,WAEf,KAAK,IACD,MAAOmB,GAAUtC,KAAK4J,OAAOlB,eAAewB,EAASA,EAAU3H,GAAM6G,EACzE,KAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IAEL,IAAK,IAGD,MAAO9G,GAAUtC,KAAK4J,OAAOnB,eAAeyB,EAASA,EAAU3H,GAAM6G,EACzE,KAAK,IACD,MAAO9G,GAAUtC,KAAK4J,OAAOjB,eAAeuB,EAASA,EAAU3H,GAAM6G,EACzE,KAAK,IACL,IAAK,IACD,MAAOpJ,MAAK4J,OAAOd,UAAUoB,EAASA,EAAU3H,EAA4B,IAAtBvC,KAAK6J,IAAII,WAEvE,MAAO,OAEXN,EAAKvH,UAAUoF,SAAW,WACtB,MAAOxH,MAAK+J,WAAa,IAAM/J,KAAK4J,OAAO5B,IAAM,WAAahI,KAAK4F,OAAS,WAAa5F,KAAKmB,OAAS,SAAyB,OAAbnB,KAAKsH,IAAgB,OAAStH,KAAKsH,IAAInG,QAAU,KAExKwI,EAAKvH,UAAUmI,eAAiB,SAAUC,OACvBjE,KAAXiE,IACAA,EAAS,GAEb,IAAI/I,GAAI+I,EAASxK,KAAK+J,WAAa,KAAO/J,KAAK4J,OAAO5B,GAYtD,IAXIhI,KAAKmB,QAAU,IACfM,GAAK,KAETA,GAAKzB,KAAKmB,OACNnB,KAAK6J,IAAIY,eACThJ,GAAK,kBAECzB,KAAK6J,IAAIS,eAAyC,GAAtBtK,KAAK6J,IAAII,WAA6C,GAAtBjK,KAAK6J,IAAII,WAAsC,OAAbjK,KAAKsH,MACzG7F,GAAK,mBAETA,GAAK,KACY,OAAbzB,KAAKsH,IAAc,CACnBkD,GAAU,IACV,KAAK,GAAIxJ,GAAI,EAAG0J,EAAM1K,KAAKsH,IAAInG,OAAQH,EAAI0J,IAAO1J,EAC9CS,GAAKzB,KAAKsH,IAAItG,GAAGuJ,eAAeC,GAGxC,MAAO/I,IAEXkI,EAAKvH,UAAUuI,SAAW,WACtB,MAAO3K,MAAK4J,OAAO5B,KAEvB2B,EAAKvH,UAAUgI,WAAa,WACxB,MAAOpK,MAAK4J,OAAO5B,IAAMhI,KAAK4F,QAElC+D,EAAKvH,UAAUwI,OAAS,WACpB,MAAO5K,MAAK4J,OAAO5B,IAAMhI,KAAK4F,OAAS7C,KAAKsH,IAAIrK,KAAKmB,SAEzDwI,EAAKvH,UAAUyI,YAAc,WACzB,MAAO7K,MAAK4J,OAAOxB,QAAQpI,KAAK2K,WAAY3K,KAAK4K,UAAU,IAE/DjB,EAAKmB,aAAe,SAAUlB,GAC1B,GAAIxC,GAAMwC,EAAO1B,MACb3F,EAAY,IAAN6E,CACV,IAAI7E,GAAO6E,EACP,MAAO7E,EAGX,IAAIA,EAAM,EACN,KAAM,IAAIuE,OAAM,kDAAoD8C,EAAO5B,IAAM,GAErF,IAAY,IAARzF,EACA,MAAO,KAEX6E,GAAM,CACN,KAAK,GAAIpG,GAAI,EAAGA,EAAIuB,IAAOvB,EACvBoG,EAAa,IAANA,EAAawC,EAAO1B,KAE/B,OAAOd,IAOXuC,EAAKvH,UAAU2I,kBAAoB,WAC/B,GAAIC,GAAYhL,KAAK6K,cACjBI,EAAuB,EAAdjL,KAAK4F,OACdzE,EAAuB,EAAdnB,KAAKmB,MAClB,OAAO6J,GAAUnF,OAAOoF,EAAQ9J,IAEpCwI,EAAKnK,OAAS,SAAUH,GACpB,GAAIuK,EAKAA,GAJEvK,YAAeyI,GAIRzI,EAHA,GAAIyI,GAAOzI,EAAK,EAK7B,IAAI6L,GAAc,GAAIpD,GAAO8B,GACzBC,EAAM,GAAIC,GAAQF,GAClBrH,EAAMoH,EAAKmB,aAAalB,GACxBvB,EAAQuB,EAAO5B,IACfpC,EAASyC,EAAQ6C,EAAYlD,IAC7BV,EAAM,KACN6D,EAAS,WACT,GAAIjK,KACJ,IAAY,OAARqB,EAAc,CAGd,IADA,GAAI+F,GAAMD,EAAQ9F,EACXqH,EAAO5B,IAAMM,GAChBpH,EAAIA,EAAIC,QAAUwI,EAAKnK,OAAOoK,EAElC,IAAIA,EAAO5B,KAAOM,EACd,KAAM,IAAIxB,OAAM,gEAAkEuB,OAKtF,KACI,OAAS,CACL,GAAI5G,GAAIkI,EAAKnK,OAAOoK,EACpB,IAAInI,EAAEoI,IAAIuB,QACN,KAEJlK,GAAIA,EAAIC,QAAUM,EAEtBc,EAAM8F,EAAQuB,EAAO5B,IAEzB,MAAOqD,GACH,KAAM,IAAIvE,OAAM,sDAAwDuE,GAGhF,MAAOnK,GAEX,IAAI2I,EAAIY,eAEJnD,EAAM6D,QAEL,IAAItB,EAAIS,gBAAoC,GAAjBT,EAAII,WAAwC,GAAjBJ,EAAII,WAE3D,IACI,GAAqB,GAAjBJ,EAAII,WACgB,GAAhBL,EAAO1B,MACP,KAAM,IAAIpB,OAAM,mDAGxBQ,GAAM6D,GACN,KAAK,GAAInK,GAAI,EAAGA,EAAIsG,EAAInG,SAAUH,EAC9B,GAAIsG,EAAItG,GAAG6I,IAAIuB,QACX,KAAM,IAAItE,OAAM,6CAI5B,MAAOuE,GAEH/D,EAAM,KAGd,GAAY,OAARA,EAAc,CACd,GAAY,OAAR/E,EACA,KAAM,IAAIuE,OAAM,qEAAuEuB,EAE3FuB,GAAO5B,IAAMK,EAAQtF,KAAKsH,IAAI9H,GAElC,MAAO,IAAIoH,GAAKuB,EAAatF,EAAQrD,EAAKsH,EAAKvC,IAE5CqC,KAEPG,EAAyB,WACzB,QAASA,GAAQF,GACb,GAAIxC,GAAMwC,EAAO1B,KAIjB,IAHAlI,KAAKgK,SAAW5C,GAAO,EACvBpH,KAAKyK,eAAmC,IAAV,GAANrD,GACxBpH,KAAKiK,UAAkB,GAAN7C,EACK,IAAlBpH,KAAKiK,UAAmB,CACxB,GAAI/J,GAAI,GAAIiH,EACZ,IACIC,EAAMwC,EAAO1B,MACbhI,EAAEmH,OAAO,IAAW,IAAND,SACH,IAANA,EACTpH,MAAKiK,UAAY/J,EAAEyH,YAS3B,MANAmC,GAAQ1H,UAAUkI,YAAc,WAC5B,MAAyB,KAAlBtK,KAAKgK,UAEhBF,EAAQ1H,UAAUgJ,MAAQ,WACtB,MAAyB,KAAlBpL,KAAKgK,UAAwC,IAAnBhK,KAAKiK,WAEnCH,KAUPwB,GAAanzBC,GAAS,GAAK,IAAMD,EAAUA,EAAUnK,OAAS,GAGjDuB,EAA4B,WAC5B,QAASA,GAAW4D,EAAGtE,EAAGf,GACb,MAALqF,IACI,gBAAmBA,GACnBtG,KAAKwL,WAAWlF,EAAGtE,EAAGf,GAEZ,MAALe,GAAa,gBAAmBsE,GACrCtG,KAAKyL,WAAWnF,EAAG,KAGnBtG,KAAKyL,WAAWnF,EAAGtE,IAk4C/B,MA33CAU,GAAWN,UAAUoF,SAAW,SAAUxF,GACtC,GAAIhC,KAAKyB,EAAI,EACT,MAAO,IAAMzB,KAAK0L,SAASlE,SAASxF,EAExC,IAAIN,EACJ,IAAS,IAALM,EACAN,EAAI,MAEH,IAAS,GAALM,EACLN,EAAI,MAEH,IAAS,GAALM,EACLN,EAAI,MAEH,IAAS,IAALM,EACLN,EAAI,MAEH,IAAS,GAALM,EAIL,MAAOhC,MAAK2L,QAAQ3J,EAHpBN,GAAI,EAKR,GACIK,GADA6J,GAAM,GAAKlK,GAAK,EAEhB2B,GAAI,EACJzC,EAAI,GACJI,EAAIhB,KAAK6D,EACTuC,EAAIpG,KAAK6L,GAAM7K,EAAIhB,KAAK6L,GAAMnK,CAClC,IAAIV,KAAM,EAKN,IAJIoF,EAAIpG,KAAK6L,KAAO9J,EAAI/B,KAAKgB,IAAMoF,GAAK,IACpC/C,GAAI,EACJzC,EAAIX,EAAS8B,IAEVf,GAAK,GACJoF,EAAI1E,GACJK,GAAK/B,KAAKgB,IAAO,GAAKoF,GAAK,IAAQ1E,EAAI0E,EACvCrE,GAAK/B,OAAOgB,KAAOoF,GAAKpG,KAAK6L,GAAKnK,KAGlCK,EAAK/B,KAAKgB,KAAOoF,GAAK1E,GAAMkK,EACxBxF,GAAK,IACLA,GAAKpG,KAAK6L,KACR7K,IAGNe,EAAI,IACJsB,GAAI,GAEJA,IACAzC,GAAKX,EAAS8B,GAI1B,OAAOsB,GAAIzC,EAAI,KAInB8B,EAAWN,UAAUsJ,OAAS,WAC1B,GAAI9K,GAAI6B,GAER,OADAC,GAAWoJ,KAAKC,MAAM/L,KAAMY,GACrBA,GAIX8B,EAAWN,UAAUiI,IAAM,WACvB,MAAQrK,MAAKyB,EAAI,EAAKzB,KAAK0L,SAAW1L,MAI1C0C,EAAWN,UAAU4J,UAAY,SAAU1F,GACvC,GAAI1F,GAAIZ,KAAKyB,EAAI6E,EAAE7E,CACnB,IAAS,GAALb,EACA,MAAOA,EAEX,IAAII,GAAIhB,KAAK6D,CAEb,IAAS,IADTjD,EAAII,EAAIsF,EAAEzC,GAEN,MAAQ7D,MAAKyB,EAAI,GAAMb,EAAIA,CAE/B,QAASI,GAAK,GACV,GAA4B,IAAvBJ,EAAIZ,KAAKgB,GAAKsF,EAAEtF,IACjB,MAAOJ,EAGf,OAAO,IAIX8B,EAAWN,UAAU6J,UAAY,WAC7B,MAAIjM,MAAK6D,GAAK,EACH,EAEJ7D,KAAK6L,IAAM7L,KAAK6D,EAAI,GAAKD,EAAM5D,KAAKA,KAAK6D,EAAI,GAAM7D,KAAKyB,EAAIzB,KAAKkM,KAI5ExJ,EAAWN,UAAU+J,IAAM,SAAU7F,GACjC,GAAI1F,GAAI6B,GAKR,OAJAzC,MAAKqK,MAAM+B,SAAS9F,EAAG,KAAM1F,GACzBZ,KAAKyB,EAAI,GAAKb,EAAEoL,UAAUtJ,EAAWoJ,MAAQ,GAC7CxF,EAAEyF,MAAMnL,EAAGA,GAERA,GAIX8B,EAAWN,UAAUiK,UAAY,SAAUhB,EAAGhI,GAC1C,GAAIiJ,EAOJ,OALIA,GADAjB,EAAI,KAAOhI,EAAEkJ,SACT,GAAIC,GAAQnJ,GAGZ,GAAIoJ,GAAWpJ,GAEhBrD,KAAK0M,IAAIrB,EAAGiB,IAIvB5J,EAAWN,UAAUuK,MAAQ,WACzB,GAAI/L,GAAI6B,GAER,OADAzC,MAAK4M,OAAOhM,GACLA,GAIX8B,EAAWN,UAAUyK,SAAW,WAC5B,GAAI7M,KAAKyB,EAAI,EAAG,CACZ,GAAc,GAAVzB,KAAK6D,EACL,MAAO7D,MAAK,GAAKA,KAAK8M,EAErB,IAAc,GAAV9M,KAAK6D,EACV,OAAQ,MAGX,IAAc,GAAV7D,KAAK6D,EACV,MAAO7D,MAAK,EAEX,IAAc,GAAVA,KAAK6D,EACV,MAAO,GAGX,OAAS7D,KAAK,IAAO,GAAM,GAAKA,KAAK6L,IAAO,IAAO7L,KAAK6L,GAAM7L,KAAK,IAIvE0C,EAAWN,UAAU2K,UAAY,WAC7B,MAAkB,IAAV/M,KAAK6D,EAAU7D,KAAKyB,EAAKzB,KAAK,IAAM,IAAO,IAIvD0C,EAAWN,UAAU4K,WAAa,WAC9B,MAAkB,IAAVhN,KAAK6D,EAAU7D,KAAKyB,EAAKzB,KAAK,IAAM,IAAO,IAIvD0C,EAAWN,UAAU6K,OAAS,WAC1B,MAAIjN,MAAKyB,EAAI,GACD,EAEHzB,KAAK6D,GAAK,GAAgB,GAAV7D,KAAK6D,GAAU7D,KAAK,IAAM,EACxC,EAGA,GAKf0C,EAAWN,UAAU+C,YAAc,WAC/B,GAAInE,GAAIhB,KAAK6D,EACTjD,IACJA,GAAE,GAAKZ,KAAKyB,CACZ,IACIM,GADAqE,EAAIpG,KAAK6L,GAAM7K,EAAIhB,KAAK6L,GAAM,EAE9BnK,EAAI,CACR,IAAIV,KAAM,EAIN,IAHIoF,EAAIpG,KAAK6L,KAAO9J,EAAI/B,KAAKgB,IAAMoF,KAAOpG,KAAKyB,EAAIzB,KAAKkM,KAAO9F,IAC3DxF,EAAEc,KAAOK,EAAK/B,KAAKyB,GAAMzB,KAAK6L,GAAKzF,GAEhCpF,GAAK,GACJoF,EAAI,GACJrE,GAAK/B,KAAKgB,IAAO,GAAKoF,GAAK,IAAQ,EAAIA,EACvCrE,GAAK/B,OAAOgB,KAAOoF,GAAKpG,KAAK6L,GAAK,KAGlC9J,EAAK/B,KAAKgB,KAAOoF,GAAK,GAAM,IACxBA,GAAK,IACLA,GAAKpG,KAAK6L,KACR7K,IAGQ,IAAT,IAAJe,KACDA,IAAM,KAED,GAALL,IAAoB,IAAT1B,KAAKyB,KAAkB,IAAJM,MAC5BL,GAEFA,EAAI,GAAKK,GAAK/B,KAAKyB,KACnBb,EAAEc,KAAOK,EAIrB,OAAOnB,IAGX8B,EAAWN,UAAU8K,OAAS,SAAU5G,GACpC,MAA6B,IAArBtG,KAAKgM,UAAU1F,IAG3B5D,EAAWN,UAAU+K,IAAM,SAAU7G,GACjC,MAAQtG,MAAKgM,UAAU1F,GAAK,EAAKtG,KAAOsG,GAG5C5D,EAAWN,UAAUsI,IAAM,SAAUpE,GACjC,MAAQtG,MAAKgM,UAAU1F,GAAK,EAAKtG,KAAOsG,GAG5C5D,EAAWN,UAAUgL,IAAM,SAAU9G,GACjC,GAAI1F,GAAI6B,GAER,OADAzC,MAAKqN,UAAU/G,EAAGjG,EAAQO,GACnBA,GAGX8B,EAAWN,UAAUkL,GAAK,SAAUhH,GAChC,GAAI1F,GAAI6B,GAER,OADAzC,MAAKqN,UAAU/G,EAAG9F,EAAOI,GAClBA,GAGX8B,EAAWN,UAAUmL,IAAM,SAAUjH,GACjC,GAAI1F,GAAI6B,GAER,OADAzC,MAAKqN,UAAU/G,EAAG7F,EAAQG,GACnBA,GAGX8B,EAAWN,UAAUoL,OAAS,SAAUlH,GACpC,GAAI1F,GAAI6B,GAER,OADAzC,MAAKqN,UAAU/G,EAAG5F,EAAWE,GACtBA,GAIX8B,EAAWN,UAAUqL,IAAM,WAEvB,IAAK,GADD7M,GAAI6B,IACCzB,EAAI,EAAGA,EAAIhB,KAAK6D,IAAK7C,EAC1BJ,EAAEI,GAAKhB,KAAKkM,IAAMlM,KAAKgB,EAI3B,OAFAJ,GAAEiD,EAAI7D,KAAK6D,EACXjD,EAAEa,GAAKzB,KAAKyB,EACLb,GAIX8B,EAAWN,UAAUsL,UAAY,SAAUxN,GACvC,GAAIU,GAAI6B,GAOR,OANIvC,GAAI,EACJF,KAAK2N,UAAUzN,EAAGU,GAGlBZ,KAAK4N,SAAS1N,EAAGU,GAEdA,GAIX8B,EAAWN,UAAUyL,WAAa,SAAU3N,GACxC,GAAIU,GAAI6B,GAOR,OANIvC,GAAI,EACJF,KAAK4N,UAAU1N,EAAGU,GAGlBZ,KAAK2N,SAASzN,EAAGU,GAEdA,GAIX8B,EAAWN,UAAU0L,gBAAkB,WACnC,IAAK,GAAI9M,GAAI,EAAGA,EAAIhB,KAAK6D,IAAK7C,EAC1B,GAAe,GAAXhB,KAAKgB,GACL,MAAOA,GAAIhB,KAAK6L,GAAKlL,EAAKX,KAAKgB,GAGvC,OAAIhB,MAAKyB,EAAI,EACFzB,KAAK6D,EAAI7D,KAAK6L,IAEjB,GAIZnJ,EAAWN,UAAU2L,SAAW,WAG5B,IAAK,GAFDnN,GAAI,EACJN,EAAIN,KAAKyB,EAAIzB,KAAKkM,GACblL,EAAI,EAAGA,EAAIhB,KAAK6D,IAAK7C,EAC1BJ,GAAKC,EAAKb,KAAKgB,GAAKV,EAExB,OAAOM,IAIX8B,EAAWN,UAAU4L,QAAU,SAAU9N,GACrC,GAAI4C,GAAIC,KAAKC,MAAM9C,EAAIF,KAAK6L,GAC5B,OAAI/I,IAAK9C,KAAK6D,EACQ,GAAV7D,KAAKyB,EAE2B,IAAnCzB,KAAK8C,GAAM,GAAM5C,EAAIF,KAAK6L,KAIvCnJ,EAAWN,UAAU6L,OAAS,SAAU/N,GACpC,MAAOF,MAAKkO,UAAUhO,EAAGM,IAI7BkC,EAAWN,UAAU+L,SAAW,SAAUjO,GACtC,MAAOF,MAAKkO,UAAUhO,EAAGQ,IAI7BgC,EAAWN,UAAUgM,QAAU,SAAUlO,GACrC,MAAOF,MAAKkO,UAAUhO,EAAGO,IAI7BiC,EAAWN,UAAUiM,IAAM,SAAU/H,GACjC,GAAI1F,GAAI6B,GAER,OADAzC,MAAKsO,MAAMhI,EAAG1F,GACPA,GAIX8B,EAAWN,UAAUmM,SAAW,SAAUjI,GACtC,GAAI1F,GAAI6B,GAER,OADAzC,MAAK+L,MAAMzF,EAAG1F,GACPA,GAIX8B,EAAWN,UAAUoM,SAAW,SAAUlI,GACtC,GAAI1F,GAAI6B,GAER,OADAzC,MAAKyO,WAAWnI,EAAG1F,GACZA,GAIX8B,EAAWN,UAAUsM,OAAS,SAAUpI,GACpC,GAAI1F,GAAI6B,GAER,OADAzC,MAAKoM,SAAS9F,EAAG1F,EAAG,MACbA,GAIX8B,EAAWN,UAAUuM,UAAY,SAAUrI,GACvC,GAAI1F,GAAI6B,GAER,OADAzC,MAAKoM,SAAS9F,EAAG,KAAM1F,GAChBA,GAIX8B,EAAWN,UAAUwM,mBAAqB,SAAUtI,GAChD,GAAIuI,GAAIpM,IACJ7B,EAAI6B,GAER,OADAzC,MAAKoM,SAAS9F,EAAGuI,EAAGjO,IACZiO,EAAGjO,IAIf8B,EAAWN,UAAU0M,OAAS,SAAUzD,EAAGhI,GACvC,GACI3B,GAEA4K,EAHAtL,EAAIqK,EAAEY,YAENrL,EAAI8C,EAAI,EAEZ,IAAI1C,GAAK,EACL,MAAOJ,EAGPc,GADKV,EAAI,GACL,EAECA,EAAI,GACL,EAECA,EAAI,IACL,EAECA,EAAI,IACL,EAGA,EAGJsL,EADAtL,EAAI,EACA,GAAIwL,GAAQnJ,GAEXA,EAAEkJ,SACH,GAAIwC,GAAQ1L,GAGZ,GAAIoJ,GAAWpJ,EAGvB,IAAI2L,MACA9O,EAAI,EACJ+O,EAAKvN,EAAI,EACTkK,GAAM,GAAKlK,GAAK,CAEpB,IADAsN,EAAE,GAAK1C,EAAE4C,QAAQlP,MACb0B,EAAI,EAAG,CACP,GAAIyN,GAAK1M,GAET,KADA6J,EAAE8C,MAAMJ,EAAE,GAAIG,GACPjP,GAAK0L,GACRoD,EAAE9O,GAAKuC,IACP6J,EAAE+C,MAAMF,EAAIH,EAAE9O,EAAI,GAAI8O,EAAE9O,IACxBA,GAAK,EAGb,GACI2C,GAGAgB,EAJAf,EAAIuI,EAAExH,EAAI,EAEVyL,GAAM,EACNC,EAAK9M,GAGT,KADAzB,EAAI4C,EAAMyH,EAAEvI,IAAM,EACXA,GAAK,GAAG,CAWX,IAVI9B,GAAKiO,EACLpM,EAAKwI,EAAEvI,IAAO9B,EAAIiO,EAAOrD,GAGzB/I,GAAKwI,EAAEvI,IAAO,GAAM9B,EAAI,GAAM,IAAQiO,EAAKjO,EACvC8B,EAAI,IACJD,GAAKwI,EAAEvI,EAAI,IAAO9C,KAAK6L,GAAK7K,EAAIiO,IAGxC/O,EAAIwB,EACc,IAAN,EAAJmB,IACJA,IAAM,IACJ3C,CAMN,KAJKc,GAAKd,GAAK,IACXc,GAAKhB,KAAK6L,KACR/I,GAEFwM,EACAN,EAAEnM,GAAG+J,OAAOhM,GACZ0O,GAAM,MAEL,CACD,KAAOpP,EAAI,GACPoM,EAAE8C,MAAMxO,EAAG2O,GACXjD,EAAE8C,MAAMG,EAAI3O,GACZV,GAAK,CAELA,GAAI,EACJoM,EAAE8C,MAAMxO,EAAG2O,IAGX1L,EAAIjD,EACJA,EAAI2O,EACJA,EAAK1L,GAETyI,EAAE+C,MAAME,EAAIP,EAAEnM,GAAIjC,GAEtB,KAAOkC,GAAK,GAA0B,IAApBuI,EAAEvI,GAAM,GAAK9B,IAC3BsL,EAAE8C,MAAMxO,EAAG2O,GACX1L,EAAIjD,EACJA,EAAI2O,EACJA,EAAK1L,IACC7C,EAAI,IACNA,EAAIhB,KAAK6L,GAAK,IACZ/I,GAId,MAAOwJ,GAAEkD,OAAO5O,IAIpB8B,EAAWN,UAAUqN,WAAa,SAAUpM,GACxC,GAAIqM,GAAKrM,EAAEkJ,QACX,IAAKvM,KAAKuM,UAAYmD,GAAqB,GAAdrM,EAAE4J,SAC3B,MAAOvK,GAAWoJ,IAQtB,KANA,GAAI6D,GAAItM,EAAEsJ,QACN/K,EAAI5B,KAAK2M,QACTrG,EAAI5C,EAAI,GACR1B,EAAI0B,EAAI,GACRzC,EAAIyC,EAAI,GACR3B,EAAI2B,EAAI,GACS,GAAdiM,EAAE1C,UAAe,CACpB,KAAO0C,EAAEpD,UACLoD,EAAEhC,SAAS,EAAGgC,GACVD,GACKpJ,EAAEiG,UAAavK,EAAEuK,WAClBjG,EAAEgI,MAAMtO,KAAMsG,GACdtE,EAAE+J,MAAM1I,EAAGrB,IAEfsE,EAAEqH,SAAS,EAAGrH,IAERtE,EAAEuK,UACRvK,EAAE+J,MAAM1I,EAAGrB,GAEfA,EAAE2L,SAAS,EAAG3L,EAElB,MAAOJ,EAAE2K,UACL3K,EAAE+L,SAAS,EAAG/L,GACV8N,GACKzO,EAAEsL,UAAaxK,EAAEwK,WAClBtL,EAAEqN,MAAMtO,KAAMiB,GACdc,EAAEgK,MAAM1I,EAAGtB,IAEfd,EAAE0M,SAAS,EAAG1M,IAERc,EAAEwK,UACRxK,EAAEgK,MAAM1I,EAAGtB,GAEfA,EAAE4L,SAAS,EAAG5L,EAEd4N,GAAE3D,UAAUpK,IAAM,GAClB+N,EAAE5D,MAAMnK,EAAG+N,GACPD,GACApJ,EAAEyF,MAAM9K,EAAGqF,GAEftE,EAAE+J,MAAMhK,EAAGC,KAGXJ,EAAEmK,MAAM4D,EAAG/N,GACP8N,GACAzO,EAAE8K,MAAMzF,EAAGrF,GAEfc,EAAEgK,MAAM/J,EAAGD,IAGnB,MAAmC,IAA/BH,EAAEoK,UAAUtJ,EAAWkN,KAChBlN,EAAWoJ,KAElB/J,EAAEiK,UAAU3I,IAAM,EACXtB,EAAEwM,SAASlL,GAElBtB,EAAEkL,SAAW,GACblL,EAAEuM,MAAMjL,EAAGtB,GAKXA,EAAEkL,SAAW,EACNlL,EAAEsM,IAAIhL,GAGNtB,GANAA,GAWfW,EAAWN,UAAUyN,IAAM,SAAUxE,GACjC,MAAOrL,MAAK0M,IAAIrB,EAAG,GAAIyE,KAI3BpN,EAAWN,UAAU2N,IAAM,SAAUzJ,GACjC,GAAIhG,GAAKN,KAAKyB,EAAI,EAAKzB,KAAK0L,SAAW1L,KAAK2M,QACxCpM,EAAK+F,EAAE7E,EAAI,EAAK6E,EAAEoF,SAAWpF,EAAEqG,OACnC,IAAIrM,EAAE0L,UAAUzL,GAAK,EAAG,CACpB,GAAIsD,GAAIvD,CACRA,GAAIC,EACJA,EAAIsD,EAER,GAAI7C,GAAIV,EAAEwN,kBACNkB,EAAIzO,EAAEuN,iBACV,IAAIkB,EAAI,EACJ,MAAO1O,EASX,KAPIU,EAAIgO,IACJA,EAAIhO,GAEJgO,EAAI,IACJ1O,EAAEqN,SAASqB,EAAG1O,GACdC,EAAEoN,SAASqB,EAAGzO,IAEXD,EAAE2M,SAAW,IACXjM,EAAIV,EAAEwN,mBAAqB,GAC5BxN,EAAEqN,SAAS3M,EAAGV,IAEbU,EAAIT,EAAEuN,mBAAqB,GAC5BvN,EAAEoN,SAAS3M,EAAGT,GAEdD,EAAE0L,UAAUzL,IAAM,GAClBD,EAAEyL,MAAMxL,EAAGD,GACXA,EAAEqN,SAAS,EAAGrN,KAGdC,EAAEwL,MAAMzL,EAAGC,GACXA,EAAEoN,SAAS,EAAGpN,GAMtB,OAHIyO,GAAI,GACJzO,EAAEqN,SAASoB,EAAGzO,GAEXA,GAIXmC,EAAWN,UAAU4N,gBAAkB,SAAUnM,GAC7C,GAAI7C,GACAV,EAAIN,KAAKqK,KACb,IAAW,GAAP/J,EAAEuD,GAAUvD,EAAE,IAAMgL,EAAUA,EAAUnK,OAAS,GAAI,CACrD,IAAKH,EAAI,EAAGA,EAAIsK,EAAUnK,SAAUH,EAChC,GAAIV,EAAE,IAAMgL,EAAUtK,GAClB,OAAO,CAGf,QAAO,EAEX,GAAIV,EAAEiM,SACF,OAAO,CAGX,KADAvL,EAAI,EACGA,EAAIsK,EAAUnK,QAAQ,CAGzB,IAFA,GAAIkC,GAAIiI,EAAUtK,GACd8B,EAAI9B,EAAI,EACL8B,EAAIwI,EAAUnK,QAAUkC,EAAIkI,GAC/BlI,GAAKiI,EAAUxI,IAGnB,KADAO,EAAI/C,EAAE2P,OAAO5M,GACNrC,EAAI8B,GACP,GAAIO,EAAIiI,EAAUtK,MAAQ,EACtB,OAAO,EAInB,MAAOV,GAAE4P,YAAYrM,IAMzBnB,EAAWN,UAAUwK,OAAS,SAAUhM,GACpC,IAAK,GAAII,GAAIhB,KAAK6D,EAAI,EAAG7C,GAAK,IAAKA,EAC/BJ,EAAEI,GAAKhB,KAAKgB,EAEhBJ,GAAEiD,EAAI7D,KAAK6D,EACXjD,EAAEa,EAAIzB,KAAKyB,GAIfiB,EAAWN,UAAUuB,QAAU,SAAUrD,GACrCN,KAAK6D,EAAI,EACT7D,KAAKyB,EAAKnB,EAAI,GAAM,EAAI,EACpBA,EAAI,EACJN,KAAK,GAAKM,EAELA,GAAK,EACVN,KAAK,GAAKM,EAAIN,KAAK8M,GAGnB9M,KAAK6D,EAAI,GAKjBnB,EAAWN,UAAUqJ,WAAa,SAAUhK,EAAGO,GAC3C,GAAIN,EACJ,IAAS,IAALM,EACAN,EAAI,MAEH,IAAS,GAALM,EACLN,EAAI,MAEH,IAAS,KAALM,EACLN,EAAI,MAGH,IAAS,GAALM,EACLN,EAAI,MAEH,IAAS,IAALM,EACLN,EAAI,MAEH,IAAS,GAALM,EAKL,WADAhC,MAAKmQ,UAAU1O,EAAGO,EAHlBN,GAAI,EAMR1B,KAAK6D,EAAI,EACT7D,KAAKyB,EAAI,CAIT,KAHA,GAAIT,GAAIS,EAAEN,OACNiP,GAAK,EACLC,EAAK,IACArP,GAAK,GAAG,CACb,GAAIV,GAAU,GAALoB,EAAoB,KAARD,EAAET,GAAauC,EAAM9B,EAAGT,EACzCV,GAAI,EACe,KAAfmB,EAAErB,OAAOY,KACToP,GAAK,IAIbA,GAAK,EACK,GAANC,EACArQ,KAAKA,KAAK6D,KAAOvD,EAEZ+P,EAAK3O,EAAI1B,KAAK6L,IACnB7L,KAAKA,KAAK6D,EAAI,KAAOvD,GAAM,GAAMN,KAAK6L,GAAKwE,GAAO,IAAOA,EACzDrQ,KAAKA,KAAK6D,KAAQvD,GAAMN,KAAK6L,GAAKwE,GAGlCrQ,KAAKA,KAAK6D,EAAI,IAAMvD,GAAK+P,GAE7BA,GAAM3O,IACI1B,KAAK6L,KACXwE,GAAMrQ,KAAK6L,KAGV,GAALnK,GAA8B,IAAT,KAARD,EAAE,MACfzB,KAAKyB,GAAK,EACN4O,EAAK,IACLrQ,KAAKA,KAAK6D,EAAI,KAAQ,GAAM7D,KAAK6L,GAAKwE,GAAO,GAAMA,IAG3DrQ,KAAKsQ,QACDF,GACA1N,EAAWoJ,KAAKC,MAAM/L,KAAMA,OAKpC0C,EAAWN,UAAUkO,MAAQ,WAEzB,IADA,GAAIrP,GAAIjB,KAAKyB,EAAIzB,KAAKkM,GACflM,KAAK6D,EAAI,GAAK7D,KAAKA,KAAK6D,EAAI,IAAM5C,KACnCjB,KAAK6D,GAKfnB,EAAWN,UAAUmO,UAAY,SAAUrQ,EAAGU,GAC1C,GAAII,EACJ,KAAKA,EAAIhB,KAAK6D,EAAI,EAAG7C,GAAK,IAAKA,EAC3BJ,EAAEI,EAAId,GAAKF,KAAKgB,EAEpB,KAAKA,EAAId,EAAI,EAAGc,GAAK,IAAKA,EACtBJ,EAAEI,GAAK,CAEXJ,GAAEiD,EAAI7D,KAAK6D,EAAI3D,EACfU,EAAEa,EAAIzB,KAAKyB,GAIfiB,EAAWN,UAAUoO,UAAY,SAAUtQ,EAAGU,GAC1C,IAAK,GAAII,GAAId,EAAGc,EAAIhB,KAAK6D,IAAK7C,EAC1BJ,EAAEI,EAAId,GAAKF,KAAKgB,EAEpBJ,GAAEiD,EAAId,KAAK2H,IAAI1K,KAAK6D,EAAI3D,EAAG,GAC3BU,EAAEa,EAAIzB,KAAKyB,GAIfiB,EAAWN,UAAUwL,SAAW,SAAU1N,EAAGU,GAMzC,IAAK,GALD6P,GAAKvQ,EAAIF,KAAK6L,GACd6E,EAAM1Q,KAAK6L,GAAK4E,EAChBE,GAAM,GAAKD,GAAO,EAClBE,EAAK7N,KAAKC,MAAM9C,EAAIF,KAAK6L,IACzB5K,EAAKjB,KAAKyB,GAAKgP,EAAMzQ,KAAKkM,GACrBlL,EAAIhB,KAAK6D,EAAI,EAAG7C,GAAK,IAAKA,EAC/BJ,EAAEI,EAAI4P,EAAK,GAAM5Q,KAAKgB,IAAM0P,EAAOzP,EACnCA,GAAKjB,KAAKgB,GAAK2P,IAAOF,CAE1B,KAAK,GAAIzP,GAAI4P,EAAK,EAAG5P,GAAK,IAAKA,EAC3BJ,EAAEI,GAAK,CAEXJ,GAAEgQ,GAAM3P,EACRL,EAAEiD,EAAI7D,KAAK6D,EAAI+M,EAAK,EACpBhQ,EAAEa,EAAIzB,KAAKyB,EACXb,EAAE0P,SAIN5N,EAAWN,UAAUuL,SAAW,SAAUzN,EAAGU,GACzCA,EAAEa,EAAIzB,KAAKyB,CACX,IAAImP,GAAK7N,KAAKC,MAAM9C,EAAIF,KAAK6L,GAC7B,IAAI+E,GAAM5Q,KAAK6D,EAEX,YADAjD,EAAEiD,EAAI,EAGV,IAAI4M,GAAKvQ,EAAIF,KAAK6L,GACd6E,EAAM1Q,KAAK6L,GAAK4E,EAChBE,GAAM,GAAKF,GAAM,CACrB7P,GAAE,GAAKZ,KAAK4Q,IAAOH,CACnB,KAAK,GAAIzP,GAAI4P,EAAK,EAAG5P,EAAIhB,KAAK6D,IAAK7C,EAC/BJ,EAAEI,EAAI4P,EAAK,KAAO5Q,KAAKgB,GAAK2P,IAAOD,EACnC9P,EAAEI,EAAI4P,GAAM5Q,KAAKgB,IAAMyP,CAEvBA,GAAK,IACL7P,EAAEZ,KAAK6D,EAAI+M,EAAK,KAAO5Q,KAAKyB,EAAIkP,IAAOD,GAE3C9P,EAAEiD,EAAI7D,KAAK6D,EAAI+M,EACfhQ,EAAE0P,SAIN5N,EAAWN,UAAU2J,MAAQ,SAAUzF,EAAG1F,GAItC,IAHA,GAAII,GAAI,EACJC,EAAI,EACJoC,EAAIN,KAAKoK,IAAI7G,EAAEzC,EAAG7D,KAAK6D,GACpB7C,EAAIqC,GACPpC,GAAKjB,KAAKgB,GAAKsF,EAAEtF,GACjBJ,EAAEI,KAAOC,EAAIjB,KAAKkM,GAClBjL,IAAMjB,KAAK6L,EAEf,IAAIvF,EAAEzC,EAAI7D,KAAK6D,EAAG,CAEd,IADA5C,GAAKqF,EAAE7E,EACAT,EAAIhB,KAAK6D,GACZ5C,GAAKjB,KAAKgB,GACVJ,EAAEI,KAAOC,EAAIjB,KAAKkM,GAClBjL,IAAMjB,KAAK6L,EAEf5K,IAAKjB,KAAKyB,MAET,CAED,IADAR,GAAKjB,KAAKyB,EACHT,EAAIsF,EAAEzC,GACT5C,GAAKqF,EAAEtF,GACPJ,EAAEI,KAAOC,EAAIjB,KAAKkM,GAClBjL,IAAMjB,KAAK6L,EAEf5K,IAAKqF,EAAE7E,EAEXb,EAAEa,EAAKR,EAAI,GAAM,EAAI,EACjBA,GAAK,EACLL,EAAEI,KAAOhB,KAAK8M,GAAK7L,EAEdA,EAAI,IACTL,EAAEI,KAAOC,GAEbL,EAAEiD,EAAI7C,EACNJ,EAAE0P,SAKN5N,EAAWN,UAAUqM,WAAa,SAAUnI,EAAG1F,GAC3C,GAAIN,GAAIN,KAAKqK,MACT9J,EAAI+F,EAAE+D,MACNrJ,EAAIV,EAAEuD,CAEV,KADAjD,EAAEiD,EAAI7C,EAAIT,EAAEsD,IACH7C,GAAK,GACVJ,EAAEI,GAAK,CAEX,KAAKA,EAAI,EAAGA,EAAIT,EAAEsD,IAAK7C,EACnBJ,EAAEI,EAAIV,EAAEuD,GAAKvD,EAAEuQ,GAAG,EAAGtQ,EAAES,GAAIJ,EAAGI,EAAG,EAAGV,EAAEuD,EAE1CjD,GAAEa,EAAI,EACNb,EAAE0P,QACEtQ,KAAKyB,GAAK6E,EAAE7E,GACZiB,EAAWoJ,KAAKC,MAAMnL,EAAGA,IAKjC8B,EAAWN,UAAU0O,SAAW,SAAUlQ,GAGtC,IAFA,GAAIN,GAAIN,KAAKqK,MACTrJ,EAAIJ,EAAEiD,EAAI,EAAIvD,EAAEuD,IACX7C,GAAK,GACVJ,EAAEI,GAAK,CAEX,KAAKA,EAAI,EAAGA,EAAIV,EAAEuD,EAAI,IAAK7C,EAAG,CAC1B,GAAIC,GAAIX,EAAEuQ,GAAG7P,EAAGV,EAAEU,GAAIJ,EAAG,EAAII,EAAG,EAAG,IAC9BJ,EAAEI,EAAIV,EAAEuD,IAAMvD,EAAEuQ,GAAG7P,EAAI,EAAG,EAAIV,EAAEU,GAAIJ,EAAG,EAAII,EAAI,EAAGC,EAAGX,EAAEuD,EAAI7C,EAAI,KAAOV,EAAEwM,KACzElM,EAAEI,EAAIV,EAAEuD,IAAMvD,EAAEwM,GAChBlM,EAAEI,EAAIV,EAAEuD,EAAI,GAAK,GAGrBjD,EAAEiD,EAAI,IACNjD,EAAEA,EAAEiD,EAAI,IAAMvD,EAAEuQ,GAAG7P,EAAGV,EAAEU,GAAIJ,EAAG,EAAII,EAAG,EAAG,IAE7CJ,EAAEa,EAAI,EACNb,EAAE0P,SAKN5N,EAAWN,UAAUgK,SAAW,SAAU/I,EAAGwL,EAAGjO,GAC5C,GAAImQ,GAAK1N,EAAEgH,KACX,MAAI0G,EAAGlN,GAAK,GAAZ,CAGA,GAAImN,GAAKhR,KAAKqK,KACd,IAAI2G,EAAGnN,EAAIkN,EAAGlN,EAOV,MANS,OAALgL,GACAA,EAAElL,QAAQ,QAEL,MAAL/C,GACAZ,KAAK4M,OAAOhM,GAIX,OAALA,IACAA,EAAI6B,IAER,IAAIlC,GAAIkC,IACJwO,EAAKjR,KAAKyB,EACVyP,EAAK7N,EAAE5B,EACP0P,EAAMnR,KAAK6L,GAAKjI,EAAMmN,EAAGA,EAAGlN,EAAI,GAChCsN,GAAM,GACNJ,EAAGnD,SAASuD,EAAK5Q,GACjByQ,EAAGpD,SAASuD,EAAKvQ,KAGjBmQ,EAAGnE,OAAOrM,GACVyQ,EAAGpE,OAAOhM,GAEd,IAAIwQ,GAAK7Q,EAAEsD,EACPwN,EAAK9Q,EAAE6Q,EAAK,EAChB,IAAU,GAANC,EAAJ,CAGA,GAAIC,GAAKD,GAAM,GAAKrR,KAAKuR,KAAQH,EAAK,EAAK7Q,EAAE6Q,EAAK,IAAMpR,KAAKwR,GAAK,GAC9DC,EAAKzR,KAAK0R,GAAKJ,EACfK,GAAM,GAAK3R,KAAKuR,IAAMD,EACtBjG,EAAI,GAAKrL,KAAKwR,GACdxQ,EAAIJ,EAAEiD,EACNf,EAAI9B,EAAIoQ,EACRvN,EAAU,MAALgL,EAAapM,IAAQoM,CAQ9B,KAPAtO,EAAEgQ,UAAUzN,EAAGe,GACXjD,EAAEoL,UAAUnI,IAAM,IAClBjD,EAAEA,EAAEiD,KAAO,EACXjD,EAAEmL,MAAMlI,EAAGjD,IAEf8B,EAAWkN,IAAIW,UAAUa,EAAIvN,GAC7BA,EAAEkI,MAAMxL,EAAGA,GACJA,EAAEsD,EAAIuN,GACT7Q,EAAEA,EAAEsD,KAAO,CAEf,QAASf,GAAK,GAAG,CAEb,GAAI8O,GAAMhR,IAAII,IAAMqQ,EAAMrR,KAAKkM,GAAKnJ,KAAKC,MAAMpC,EAAEI,GAAKyQ,GAAM7Q,EAAEI,EAAI,GAAKqK,GAAKsG,EAC5E,KAAK/Q,EAAEI,IAAMT,EAAEsQ,GAAG,EAAGe,EAAIhR,EAAGkC,EAAG,EAAGsO,IAAOQ,EAGrC,IAFArR,EAAEgQ,UAAUzN,EAAGe,GACfjD,EAAEmL,MAAMlI,EAAGjD,GACJA,EAAEI,KAAO4Q,GACZhR,EAAEmL,MAAMlI,EAAGjD,GAId,MAALiO,IACAjO,EAAE4P,UAAUY,EAAIvC,GACZoC,GAAMC,GACNxO,EAAWoJ,KAAKC,MAAM8C,EAAGA,IAGjCjO,EAAEiD,EAAIuN,EACNxQ,EAAE0P,QACEa,EAAM,GACNvQ,EAAE+M,SAASwD,EAAKvQ,GAEhBqQ,EAAK,GACLvO,EAAWoJ,KAAKC,MAAMnL,EAAGA,MAcjC8B,EAAWN,UAAUyP,SAAW,WAC5B,GAAI7R,KAAK6D,EAAI,EACT,MAAO,EAEX,IAAIvD,GAAIN,KAAK,EACb,IAAe,IAAN,EAAJM,GACD,MAAO,EAEX,IAAIC,GAAQ,EAAJD,CAQR,OAPAC,GAAKA,GAAK,GAAS,GAAJD,GAAWC,GAAM,GAChCA,EAAKA,GAAK,GAAS,IAAJD,GAAYC,GAAM,IACjCA,EAAKA,GAAK,IAAW,MAAJD,GAAcC,EAAK,QAAY,MAGhDA,EAAKA,GAAK,EAAID,EAAIC,EAAIP,KAAK8M,IAAO9M,KAAK8M,GAE/BvM,EAAI,EAAKP,KAAK8M,GAAKvM,GAAKA,GAIpCmC,EAAWN,UAAUmK,OAAS,WAC1B,MAAkD,KAAzCvM,KAAK6D,EAAI,EAAgB,EAAV7D,KAAK,GAAUA,KAAKyB,IAIhDiB,EAAWN,UAAUsK,IAAM,SAAUrB,EAAGiB,GACpC,GAAIjB,EAAI,YAAcA,EAAI,EACtB,MAAO3I,GAAWkN,GAEtB,IAAIhP,GAAI6B,IACJ8M,EAAK9M,IACLuM,EAAI1C,EAAE4C,QAAQlP,MACdgB,EAAI4C,EAAMyH,GAAK,CAEnB,KADA2D,EAAEpC,OAAOhM,KACAI,GAAK,GAEV,GADAsL,EAAE8C,MAAMxO,EAAG2O,IACNlE,EAAK,GAAKrK,GAAM,EACjBsL,EAAE+C,MAAME,EAAIP,EAAGpO,OAEd,CACD,GAAIiD,GAAIjD,CACRA,GAAI2O,EACJA,EAAK1L,EAGb,MAAOyI,GAAEkD,OAAO5O,IAIpB8B,EAAWN,UAAU0P,UAAY,SAAUlR,GACvC,MAAOmC,MAAKC,MAAMD,KAAKgP,IAAM/R,KAAK6L,GAAK9I,KAAKiP,IAAIpR,KAIpD8B,EAAWN,UAAUuJ,QAAU,SAAU3J,GAIrC,GAHS,MAALA,IACAA,EAAI,IAEa,GAAjBhC,KAAKiN,UAAiBjL,EAAI,GAAKA,EAAI,GACnC,MAAO,GAEX,IAAIiQ,GAAKjS,KAAK8R,UAAU9P,GACpBsE,EAAIvD,KAAK8M,IAAI7N,EAAGiQ,GAChBlQ,EAAI2B,EAAI4C,GACR/F,EAAIkC,IACJ6J,EAAI7J,IACJ7B,EAAI,EAER,KADAZ,KAAKoM,SAASrK,EAAGxB,EAAG+L,GACb/L,EAAE0M,SAAW,GAChBrM,GAAK0F,EAAIgG,EAAEO,YAAYrF,SAASxF,GAAG6D,OAAO,GAAKjF,EAC/CL,EAAE6L,SAASrK,EAAGxB,EAAG+L,EAErB,OAAOA,GAAEO,WAAWrF,SAASxF,GAAKpB,GAItC8B,EAAWN,UAAU+N,UAAY,SAAU1O,EAAGO,GAC1ChC,KAAK2D,QAAQ,GACJ,MAAL3B,IACAA,EAAI,GAOR,KAAK,GALDiQ,GAAKjS,KAAK8R,UAAU9P,GACpBD,EAAIgB,KAAK8M,IAAI7N,EAAGiQ,GAChB7B,GAAK,EACLtN,EAAI,EACJD,EAAI,EACC7B,EAAI,EAAGA,EAAIS,EAAEN,SAAUH,EAAG,CAC/B,GAAIV,GAAIiD,EAAM9B,EAAGT,EACbV,GAAI,EACe,KAAfmB,EAAErB,OAAOY,IAA8B,GAAjBhB,KAAKiN,WAC3BmD,GAAK,IAIbvN,EAAIb,EAAIa,EAAIvC,IACNwC,GAAKmP,IACPjS,KAAKkS,UAAUnQ,GACf/B,KAAKmS,WAAWtP,EAAG,GACnBC,EAAI,EACJD,EAAI,IAGRC,EAAI,IACJ9C,KAAKkS,UAAUnP,KAAK8M,IAAI7N,EAAGc,IAC3B9C,KAAKmS,WAAWtP,EAAG,IAEnBuN,GACA1N,EAAWoJ,KAAKC,MAAM/L,KAAMA,OAKpC0C,EAAWN,UAAUoJ,WAAa,SAAUlF,EAAGtE,EAAGf,GAC9C,GAAI,gBAAmBe,GAEnB,GAAIsE,EAAI,EACJtG,KAAK2D,QAAQ,OAWb,KARA3D,KAAKwL,WAAWlF,EAAGrF,GACdjB,KAAKgO,QAAQ1H,EAAI,IAElBtG,KAAKqN,UAAU3K,EAAWkN,IAAIlC,UAAUpH,EAAI,GAAI9F,EAAOR,MAEvDA,KAAKuM,UACLvM,KAAKmS,WAAW,EAAG,IAEfnS,KAAKgQ,gBAAgBhO,IACzBhC,KAAKmS,WAAW,EAAG,GACfnS,KAAKiM,YAAc3F,GACnBtG,KAAK+L,MAAMrJ,EAAWkN,IAAIlC,UAAUpH,EAAI,GAAItG,UAKvD,CAED,GAAIM,MACAuD,EAAQ,EAAJyC,CACRhG,GAAEa,OAAoB,GAAVmF,GAAK,GACjBtE,EAAEiD,UAAU3E,GACRuD,EAAI,EACJvD,EAAE,KAAQ,GAAKuD,GAAK,EAGpBvD,EAAE,GAAK,EAEXN,KAAKyL,WAAWnL,EAAG,OAK3BoC,EAAWN,UAAUiL,UAAY,SAAU/G,EAAG8L,EAAIxR,GAC9C,GAAII,GACA4D,EACAvB,EAAIN,KAAKoK,IAAI7G,EAAEzC,EAAG7D,KAAK6D,EAC3B,KAAK7C,EAAI,EAAGA,EAAIqC,IAAKrC,EACjBJ,EAAEI,GAAKoR,EAAGpS,KAAKgB,GAAIsF,EAAEtF,GAEzB,IAAIsF,EAAEzC,EAAI7D,KAAK6D,EAAG,CAEd,IADAe,EAAI0B,EAAE7E,EAAIzB,KAAKkM,GACVlL,EAAIqC,EAAGrC,EAAIhB,KAAK6D,IAAK7C,EACtBJ,EAAEI,GAAKoR,EAAGpS,KAAKgB,GAAI4D,EAEvBhE,GAAEiD,EAAI7D,KAAK6D,MAEV,CAED,IADAe,EAAI5E,KAAKyB,EAAIzB,KAAKkM,GACblL,EAAIqC,EAAGrC,EAAIsF,EAAEzC,IAAK7C,EACnBJ,EAAEI,GAAKoR,EAAGxN,EAAG0B,EAAEtF,GAEnBJ,GAAEiD,EAAIyC,EAAEzC,EAEZjD,EAAEa,EAAI2Q,EAAGpS,KAAKyB,EAAG6E,EAAE7E,GACnBb,EAAE0P,SAIN5N,EAAWN,UAAU8L,UAAY,SAAUhO,EAAGkS,GAC1C,GAAIxR,GAAI8B,EAAWkN,IAAIlC,UAAUxN,EAEjC,OADAF,MAAKqN,UAAUzM,EAAGwR,EAAIxR,GACfA,GAIX8B,EAAWN,UAAUkM,MAAQ,SAAUhI,EAAG1F,GAItC,IAHA,GAAII,GAAI,EACJC,EAAI,EACJoC,EAAIN,KAAKoK,IAAI7G,EAAEzC,EAAG7D,KAAK6D,GACpB7C,EAAIqC,GACPpC,GAAKjB,KAAKgB,GAAKsF,EAAEtF,GACjBJ,EAAEI,KAAOC,EAAIjB,KAAKkM,GAClBjL,IAAMjB,KAAK6L,EAEf,IAAIvF,EAAEzC,EAAI7D,KAAK6D,EAAG,CAEd,IADA5C,GAAKqF,EAAE7E,EACAT,EAAIhB,KAAK6D,GACZ5C,GAAKjB,KAAKgB,GACVJ,EAAEI,KAAOC,EAAIjB,KAAKkM,GAClBjL,IAAMjB,KAAK6L,EAEf5K,IAAKjB,KAAKyB,MAET,CAED,IADAR,GAAKjB,KAAKyB,EACHT,EAAIsF,EAAEzC,GACT5C,GAAKqF,EAAEtF,GACPJ,EAAEI,KAAOC,EAAIjB,KAAKkM,GAClBjL,IAAMjB,KAAK6L,EAEf5K,IAAKqF,EAAE7E,EAEXb,EAAEa,EAAKR,EAAI,GAAM,EAAI,EACjBA,EAAI,EACJL,EAAEI,KAAOC,EAEJA,GAAK,IACVL,EAAEI,KAAOhB,KAAK8M,GAAK7L,GAEvBL,EAAEiD,EAAI7C,EACNJ,EAAE0P,SAIN5N,EAAWN,UAAU8P,UAAY,SAAUhS,GACvCF,KAAKA,KAAK6D,GAAK7D,KAAK6Q,GAAG,EAAG3Q,EAAI,EAAGF,KAAM,EAAG,EAAGA,KAAK6D,KAChD7D,KAAK6D,EACP7D,KAAKsQ,SAIT5N,EAAWN,UAAU+P,WAAa,SAAUjS,EAAG2C,GAC3C,GAAS,GAAL3C,EAAJ,CAGA,KAAOF,KAAK6D,GAAKhB,GACb7C,KAAKA,KAAK6D,KAAO,CAGrB,KADA7D,KAAK6C,IAAM3C,EACJF,KAAK6C,IAAM7C,KAAK8M,IACnB9M,KAAK6C,IAAM7C,KAAK8M,KACVjK,GAAK7C,KAAK6D,IACZ7D,KAAKA,KAAK6D,KAAO,KAEnB7D,KAAK6C,KAMfH,EAAWN,UAAUiQ,gBAAkB,SAAU/L,EAAGpG,EAAGU,GACnD,GAAII,GAAI+B,KAAKoK,IAAInN,KAAK6D,EAAIyC,EAAEzC,EAAG3D,EAG/B,KAFAU,EAAEa,EAAI,EACNb,EAAEiD,EAAI7C,EACCA,EAAI,GACPJ,IAAII,GAAK,CAEb,KAAK,GAAI8B,GAAIlC,EAAEiD,EAAI7D,KAAK6D,EAAG7C,EAAI8B,IAAK9B,EAChCJ,EAAEI,EAAIhB,KAAK6D,GAAK7D,KAAK6Q,GAAG,EAAGvK,EAAEtF,GAAIJ,EAAGI,EAAG,EAAGhB,KAAK6D,EAEnD,KAAK,GAAIf,GAAIC,KAAKoK,IAAI7G,EAAEzC,EAAG3D,GAAIc,EAAI8B,IAAK9B,EACpChB,KAAK6Q,GAAG,EAAGvK,EAAEtF,GAAIJ,EAAGI,EAAG,EAAGd,EAAIc,EAElCJ,GAAE0P,SAKN5N,EAAWN,UAAUkQ,gBAAkB,SAAUhM,EAAGpG,EAAGU,KACjDV,CACF,IAAIc,GAAIJ,EAAEiD,EAAI7D,KAAK6D,EAAIyC,EAAEzC,EAAI3D,CAE7B,KADAU,EAAEa,EAAI,IACGT,GAAK,GACVJ,EAAEI,GAAK,CAEX,KAAKA,EAAI+B,KAAK2H,IAAIxK,EAAIF,KAAK6D,EAAG,GAAI7C,EAAIsF,EAAEzC,IAAK7C,EACzCJ,EAAEZ,KAAK6D,EAAI7C,EAAId,GAAKF,KAAK6Q,GAAG3Q,EAAIc,EAAGsF,EAAEtF,GAAIJ,EAAG,EAAG,EAAGZ,KAAK6D,EAAI7C,EAAId,EAEnEU,GAAE0P,QACF1P,EAAE4P,UAAU,EAAG5P,IAInB8B,EAAWN,UAAU6N,OAAS,SAAU/P,GACpC,GAAIA,GAAK,EACL,MAAO,EAEX,IAAI6B,GAAI/B,KAAK8M,GAAK5M,EACdU,EAAKZ,KAAKyB,EAAI,EAAKvB,EAAI,EAAI,CAC/B,IAAIF,KAAK6D,EAAI,EACT,GAAS,GAAL9B,EACAnB,EAAIZ,KAAK,GAAKE,MAGd,KAAK,GAAIc,GAAIhB,KAAK6D,EAAI,EAAG7C,GAAK,IAAKA,EAC/BJ,GAAKmB,EAAInB,EAAIZ,KAAKgB,IAAMd,CAIpC,OAAOU,IAIX8B,EAAWN,UAAU8N,YAAc,SAAUrM,GACzC,GAAI0O,GAAKvS,KAAKuO,SAAS7L,EAAWkN,KAC9BlO,EAAI6Q,EAAGzE,iBACX,IAAIpM,GAAK,EACL,OAAO,CAEX,IAAId,GAAI2R,EAAG1E,WAAWnM,IACtBmC,EAAKA,EAAI,GAAM,GACPyH,EAAUnK,SACd0C,EAAIyH,EAAUnK,OAGlB,KAAK,GADDmF,GAAI7D,IACCzB,EAAI,EAAGA,EAAI6C,IAAK7C,EAAG,CAExBsF,EAAE3C,QAAQ2H,EAAUvI,KAAKC,MAAMD,KAAKqB,SAAWkH,EAAUnK,SACzD,IAAIZ,GAAI+F,EAAEwI,OAAOlO,EAAGZ,KACpB,IAAmC,GAA/BO,EAAEyL,UAAUtJ,EAAWkN,MAAgC,GAAnBrP,EAAEyL,UAAUuG,GAAU,CAE1D,IADA,GAAIzP,GAAI,EACDA,IAAMpB,GAAwB,GAAnBnB,EAAEyL,UAAUuG,IAE1B,GADAhS,EAAIA,EAAE8L,UAAU,EAAGrM,MACgB,GAA/BO,EAAEyL,UAAUtJ,EAAWkN,KACvB,OAAO,CAGf,IAAuB,GAAnBrP,EAAEyL,UAAUuG,GACZ,OAAO,GAInB,OAAO,GAIX7P,EAAWN,UAAUoQ,OAAS,WAC1B,GAAI5R,GAAI6B,GAER,OADAzC,MAAK8Q,SAASlQ,GACPA,GAIX8B,EAAWN,UAAUqQ,KAAO,SAAUnM,EAAGoM,GACrC,GAAIpS,GAAKN,KAAKyB,EAAI,EAAKzB,KAAK0L,SAAW1L,KAAK2M,QACxCpM,EAAK+F,EAAE7E,EAAI,EAAK6E,EAAEoF,SAAWpF,EAAEqG,OACnC,IAAIrM,EAAE0L,UAAUzL,GAAK,EAAG,CACpB,GAAIsD,GAAIvD,CACRA,GAAIC,EACJA,EAAIsD,EAER,GAAI7C,GAAIV,EAAEwN,kBACNkB,EAAIzO,EAAEuN,iBACV,IAAIkB,EAAI,EAEJ,WADA0D,GAASpS,EAGTU,GAAIgO,IACJA,EAAIhO,GAEJgO,EAAI,IACJ1O,EAAEqN,SAASqB,EAAG1O,GACdC,EAAEoN,SAASqB,EAAGzO,GAGlB,IAAIoS,GAAQ,YACH3R,EAAIV,EAAEwN,mBAAqB,GAC5BxN,EAAEqN,SAAS3M,EAAGV,IAEbU,EAAIT,EAAEuN,mBAAqB,GAC5BvN,EAAEoN,SAAS3M,EAAGT,GAEdD,EAAE0L,UAAUzL,IAAM,GAClBD,EAAEyL,MAAMxL,EAAGD,GACXA,EAAEqN,SAAS,EAAGrN,KAGdC,EAAEwL,MAAMzL,EAAGC,GACXA,EAAEoN,SAAS,EAAGpN,IAEZD,EAAE2M,SAAW,EAOf2F,WAAWD,EAAO,IANd3D,EAAI,GACJzO,EAAEqN,SAASoB,EAAGzO,GAElBqS,WAAW,WAAcF,EAASnS,IAAO,IAMjDqS,YAAWD,EAAO,KAGtBjQ,EAAWN,UAAUyQ,gBAAkB,SAAUvM,EAAGtE,EAAGf,EAAGyR,GACtD,GAAI,gBAAmB1Q,GACnB,GAAIsE,EAAI,EACJtG,KAAK2D,QAAQ,OAEZ,CACD3D,KAAKwL,WAAWlF,EAAGrF,GACdjB,KAAKgO,QAAQ1H,EAAI,IAClBtG,KAAKqN,UAAU3K,EAAWkN,IAAIlC,UAAUpH,EAAI,GAAI9F,EAAOR,MAEvDA,KAAKuM,UACLvM,KAAKmS,WAAW,EAAG,EAEvB,IAAIW,GAAQ9S,KACR+S,EAAW,WACXD,EAAMX,WAAW,EAAG,GAChBW,EAAM7G,YAAc3F,GACpBwM,EAAM/G,MAAMrJ,EAAWkN,IAAIlC,UAAUpH,EAAI,GAAIwM,GAE7CA,EAAM9C,gBAAgBhO,GACtB4Q,WAAW,WAAcF,KAAe,GAGxCE,WAAWG,EAAU,GAG7BH,YAAWG,EAAU,OAGxB,CACD,GAAIzS,MACAuD,EAAQ,EAAJyC,CACRhG,GAAEa,OAAoB,GAAVmF,GAAK,GACjBtE,EAAEiD,UAAU3E,GACRuD,EAAI,EACJvD,EAAE,KAAQ,GAAKuD,GAAK,EAGpBvD,EAAE,GAAK,EAEXN,KAAKyL,WAAWnL,EAAG,OAGpBoC,KAIPoN,EAAyB,WACzB,QAASA,MAkBT,MAfAA,GAAQ1N,UAAU8M,QAAU,SAAU5O,GAClC,MAAOA,IAGXwP,EAAQ1N,UAAUoN,OAAS,SAAUlP,GACjC,MAAOA,IAGXwP,EAAQ1N,UAAUiN,MAAQ,SAAU/O,EAAGC,EAAGK,GACtCN,EAAEmO,WAAWlO,EAAGK,IAGpBkP,EAAQ1N,UAAUgN,MAAQ,SAAU9O,EAAGM,GACnCN,EAAEwQ,SAASlQ,IAERkP,KAGPtD,EAAyB,WACzB,QAASA,GAAQnJ,GACbrD,KAAKqD,EAAIA,EA6Bb,MA1BAmJ,GAAQpK,UAAU8M,QAAU,SAAU5O,GAClC,MAAIA,GAAEmB,EAAI,GAAKnB,EAAE0L,UAAUhM,KAAKqD,IAAM,EAC3B/C,EAAE6L,IAAInM,KAAKqD,GAGX/C,GAIfkM,EAAQpK,UAAUoN,OAAS,SAAUlP,GACjC,MAAOA,IAGXkM,EAAQpK,UAAU4Q,OAAS,SAAU1S,GACjCA,EAAE8L,SAASpM,KAAKqD,EAAG,KAAM/C,IAG7BkM,EAAQpK,UAAUiN,MAAQ,SAAU/O,EAAGC,EAAGK,GACtCN,EAAEmO,WAAWlO,EAAGK,GAChBZ,KAAKgT,OAAOpS,IAGhB4L,EAAQpK,UAAUgN,MAAQ,SAAU9O,EAAGM,GACnCN,EAAEwQ,SAASlQ,GACXZ,KAAKgT,OAAOpS,IAET4L,KAKPC,EAA4B,WAC5B,QAASA,GAAWpJ,GAChBrD,KAAKqD,EAAIA,EACTrD,KAAKiT,GAAK5P,EAAEwO,WACZ7R,KAAKkT,IAAgB,MAAVlT,KAAKiT,GAChBjT,KAAKmT,IAAMnT,KAAKiT,IAAM,GACtBjT,KAAKoT,IAAM,GAAM/P,EAAEwI,GAAK,IAAO,EAC/B7L,KAAKqT,IAAM,EAAIhQ,EAAEQ,EA2DrB,MAvDA4I,GAAWrK,UAAU8M,QAAU,SAAU5O,GACrC,GAAIM,GAAI6B,GAMR,OALAnC,GAAE+J,MAAMkG,UAAUvQ,KAAKqD,EAAEQ,EAAGjD,GAC5BA,EAAEwL,SAASpM,KAAKqD,EAAG,KAAMzC,GACrBN,EAAEmB,EAAI,GAAKb,EAAEoL,UAAUtJ,EAAWoJ,MAAQ,GAC1C9L,KAAKqD,EAAE0I,MAAMnL,EAAGA,GAEbA,GAIX6L,EAAWrK,UAAUoN,OAAS,SAAUlP,GACpC,GAAIM,GAAI6B,GAGR,OAFAnC,GAAEsM,OAAOhM,GACTZ,KAAKgT,OAAOpS,GACLA,GAIX6L,EAAWrK,UAAU4Q,OAAS,SAAU1S,GACpC,KAAOA,EAAEuD,GAAK7D,KAAKqT,KAEf/S,EAAEA,EAAEuD,KAAO,CAEf,KAAK,GAAI7C,GAAI,EAAGA,EAAIhB,KAAKqD,EAAEQ,IAAK7C,EAAG,CAE/B,GAAI8B,GAAW,MAAPxC,EAAEU,GACNsS,EAAMxQ,EAAI9C,KAAKkT,MAASpQ,EAAI9C,KAAKmT,KAAO7S,EAAEU,IAAM,IAAMhB,KAAKkT,IAAOlT,KAAKoT,KAAO,IAAO9S,EAAE4L,EAK3F,KAHApJ,EAAI9B,EAAIhB,KAAKqD,EAAEQ,EACfvD,EAAEwC,IAAM9C,KAAKqD,EAAEwN,GAAG,EAAGyC,EAAIhT,EAAGU,EAAG,EAAGhB,KAAKqD,EAAEQ,GAElCvD,EAAEwC,IAAMxC,EAAEwM,IACbxM,EAAEwC,IAAMxC,EAAEwM,GACVxM,IAAIwC,KAGZxC,EAAEgQ,QACFhQ,EAAEkQ,UAAUxQ,KAAKqD,EAAEQ,EAAGvD,GAClBA,EAAE0L,UAAUhM,KAAKqD,IAAM,GACvB/C,EAAEyL,MAAM/L,KAAKqD,EAAG/C,IAKxBmM,EAAWrK,UAAUiN,MAAQ,SAAU/O,EAAGC,EAAGK,GACzCN,EAAEmO,WAAWlO,EAAGK,GAChBZ,KAAKgT,OAAOpS,IAIhB6L,EAAWrK,UAAUgN,MAAQ,SAAU9O,EAAGM,GACtCN,EAAEwQ,SAASlQ,GACXZ,KAAKgT,OAAOpS,IAET6L,KAKPsC,EAAyB,WACzB,QAASA,GAAQ1L,GACbrD,KAAKqD,EAAIA,EAETrD,KAAKuP,GAAK9M,IACVzC,KAAKuT,GAAK9Q,IACVC,EAAWkN,IAAIW,UAAU,EAAIlN,EAAEQ,EAAG7D,KAAKuP,IACvCvP,KAAKwT,GAAKxT,KAAKuP,GAAGb,OAAOrL,GAmD7B,MAhDA0L,GAAQ3M,UAAU8M,QAAU,SAAU5O,GAClC,GAAIA,EAAEmB,EAAI,GAAKnB,EAAEuD,EAAI,EAAI7D,KAAKqD,EAAEQ,EAC5B,MAAOvD,GAAE6L,IAAInM,KAAKqD,EAEjB,IAAI/C,EAAE0L,UAAUhM,KAAKqD,GAAK,EAC3B,MAAO/C,EAGP,IAAIM,GAAI6B,GAGR,OAFAnC,GAAEsM,OAAOhM,GACTZ,KAAKgT,OAAOpS,GACLA,GAIfmO,EAAQ3M,UAAUoN,OAAS,SAAUlP,GACjC,MAAOA,IAIXyO,EAAQ3M,UAAU4Q,OAAS,SAAU1S,GAQjC,IAPAA,EAAEkQ,UAAUxQ,KAAKqD,EAAEQ,EAAI,EAAG7D,KAAKuP,IAC3BjP,EAAEuD,EAAI7D,KAAKqD,EAAEQ,EAAI,IACjBvD,EAAEuD,EAAI7D,KAAKqD,EAAEQ,EAAI,EACjBvD,EAAEgQ,SAENtQ,KAAKwT,GAAGlB,gBAAgBtS,KAAKuP,GAAIvP,KAAKqD,EAAEQ,EAAI,EAAG7D,KAAKuT,IACpDvT,KAAKqD,EAAEgP,gBAAgBrS,KAAKuT,GAAIvT,KAAKqD,EAAEQ,EAAI,EAAG7D,KAAKuP,IAC5CjP,EAAE0L,UAAUhM,KAAKuP,IAAM,GAC1BjP,EAAE6R,WAAW,EAAGnS,KAAKqD,EAAEQ,EAAI,EAG/B,KADAvD,EAAEyL,MAAM/L,KAAKuP,GAAIjP,GACVA,EAAE0L,UAAUhM,KAAKqD,IAAM,GAC1B/C,EAAEyL,MAAM/L,KAAKqD,EAAG/C,IAKxByO,EAAQ3M,UAAUiN,MAAQ,SAAU/O,EAAGC,EAAGK,GACtCN,EAAEmO,WAAWlO,EAAGK,GAChBZ,KAAKgT,OAAOpS,IAIhBmO,EAAQ3M,UAAUgN,MAAQ,SAAU9O,EAAGM,GACnCN,EAAEwQ,SAASlQ,GACXZ,KAAKgT,OAAOpS,IAETmO,IAuDuB,gCAArB0E,UAAUC,SACnBhR,EAAWN,UAAUyO,GAAK5N,EAC1B+C,EAAQ,IAE2B,YAArByN,UAAUC,SACxBhR,EAAWN,UAAUyO,GAAKjO,EAC1BoD,EAAQ,KAGRtD,EAAWN,UAAUyO,GAAKvN,EAC1B0C,EAAQ,IAEZtD,EAAWN,UAAUyJ,GAAK7F,EAC1BtD,EAAWN,UAAU8J,IAAO,GAAKlG,GAAS,EAC1CtD,EAAWN,UAAU0K,GAAM,GAAK9G,CAEhCtD,GAAWN,UAAUsP,GAAK3O,KAAK8M,IAAI,EADvB,IAEZnN,EAAWN,UAAUmP,GAFT,GAEsBvL,EAClCtD,EAAWN,UAAUoP,GAAK,EAAIxL,EAHlB,EAKZ,IACI2N,GACAC,EAFApQ,IAIJ,KADAmQ,EAAK,IAAIlQ,WAAW,GACfmQ,EAAK,EAAGA,GAAM,IAAKA,EACpBpQ,EAAMmQ,KAAQC,CAGlB,KADAD,EAAK,IAAIlQ,WAAW,GACfmQ,EAAK,GAAIA,EAAK,KAAMA,EACrBpQ,EAAMmQ,KAAQC,CAGlB,KADAD,EAAK,IAAIlQ,WAAW,GACfmQ,EAAK,GAAIA,EAAK,KAAMA,EACrBpQ,EAAMmQ,KAAQC,CAuClBlR,GAAWoJ,KAAOpI,EAAI,GACtBhB,EAAWkN,IAAMlM,EAAI,EAGrB,IA8CIO,GAEAC,GAhDAH,GAAyB,WACzB,QAASA,KACL/D,KAAKgB,EAAI,EACThB,KAAK8C,EAAI,EACT9C,KAAK6T,KA+BT,MA3BA9P,GAAQ3B,UAAUkC,KAAO,SAAUwP,GAC/B,GAAI9S,GACA8B,EACAe,CACJ,KAAK7C,EAAI,EAAGA,EAAI,MAAOA,EACnBhB,KAAK6T,EAAE7S,GAAKA,CAGhB,KADA8B,EAAI,EACC9B,EAAI,EAAGA,EAAI,MAAOA,EACnB8B,EAAKA,EAAI9C,KAAK6T,EAAE7S,GAAK8S,EAAI9S,EAAI8S,EAAI3S,QAAW,IAC5C0C,EAAI7D,KAAK6T,EAAE7S,GACXhB,KAAK6T,EAAE7S,GAAKhB,KAAK6T,EAAE/Q,GACnB9C,KAAK6T,EAAE/Q,GAAKe,CAEhB7D,MAAKgB,EAAI,EACThB,KAAK8C,EAAI,GAGbiB,EAAQ3B,UAAUmC,KAAO,WACrB,GAAIV,EAMJ,OALA7D,MAAKgB,EAAKhB,KAAKgB,EAAI,EAAK,IACxBhB,KAAK8C,EAAK9C,KAAK8C,EAAI9C,KAAK6T,EAAE7T,KAAKgB,GAAM,IACrC6C,EAAI7D,KAAK6T,EAAE7T,KAAKgB,GAChBhB,KAAK6T,EAAE7T,KAAKgB,GAAKhB,KAAK6T,EAAE7T,KAAK8C,GAC7B9C,KAAK6T,EAAE7T,KAAK8C,GAAKe,EACV7D,KAAK6T,EAAGhQ,EAAI7D,KAAK6T,EAAE7T,KAAKgB,GAAM,MAElC+C,KAQPI,GAAY,IAIZE,GAAW,IAGf,IAAgB,MAAZA,GAAkB,CAClBA,MACAH,GAAW,CACX,IAAIL,QAAI,EACR,IAAIkQ,OAAOC,QAAUD,OAAOC,OAAOC,gBAAiB,CAEhD,GAAI3H,IAAI,GAAI4H,aAAY,IAExB,KADAH,OAAOC,OAAOC,gBAAgB3H,IACzBzI,GAAI,EAAGA,GAAIyI,GAAEnL,SAAU0C,GACxBQ,GAASH,MAAqB,IAAPoI,GAAEzI,IAKjC,GAAIsQ,IAAwB,SAAUC,GAElC,GADApU,KAAKqU,MAAQrU,KAAKqU,OAAS,EACvBrU,KAAKqU,OAAS,KAAOnQ,IAAYC,GAOjC,YANI4P,OAAOO,oBACPP,OAAOO,oBAAoB,YAAaH,IAAuB,GAE1DJ,OAAOQ,aACZR,OAAOQ,YAAY,cAAeJ,IAI1C,KACI,GAAIK,GAAmBJ,EAAG9T,EAAI8T,EAAG7T,CACjC8D,IAASH,MAAiC,IAAnBsQ,EACvBxU,KAAKqU,OAAS,EAElB,MAAOhJ,KAIP0I,QAAOU,iBACPV,OAAOU,iBAAiB,YAAaN,IAAuB,GAEvDJ,OAAOW,aACZX,OAAOW,YAAY,cAAeP,IAoB1C,GAAInP,IAA8B,WAC9B,QAASA,MAOT,MALAA,GAAa5C,UAAU6C,UAAY,SAAUH,GACzC,IAAK,GAAI9D,GAAI,EAAGA,EAAI8D,EAAG3D,SAAUH,EAC7B8D,EAAG9D,GAAKgD,KAGTgB,KAsEP2P,GAAwB,WACxB,QAASA,KACL3U,KAAKE,EAAI,KACTF,KAAKqL,EAAI,EACTrL,KAAK+B,EAAI,KACT/B,KAAKoG,EAAI,KACTpG,KAAK6O,EAAI,KACT7O,KAAK4U,KAAO,KACZ5U,KAAK6U,KAAO,KACZ7U,KAAK8U,MAAQ,KA+NjB,MAzNAH,GAAOvS,UAAU2S,SAAW,SAAUzU,GAClC,MAAOA,GAAE+L,UAAUrM,KAAKqL,EAAGrL,KAAKE,IAIpCyU,EAAOvS,UAAU4S,UAAY,SAAU1U,GACnC,GAAc,MAAVN,KAAKoG,GAAuB,MAAVpG,KAAK6O,EACvB,MAAOvO,GAAEwO,OAAO9O,KAAK+B,EAAG/B,KAAKE,EAKjC,KAFA,GAAI+U,GAAK3U,EAAE6L,IAAInM,KAAKoG,GAAG0I,OAAO9O,KAAK4U,KAAM5U,KAAKoG,GAC1C8O,EAAK5U,EAAE6L,IAAInM,KAAK6O,GAAGC,OAAO9O,KAAK6U,KAAM7U,KAAK6O,GACvCoG,EAAGjJ,UAAUkJ,GAAM,GACtBD,EAAKA,EAAG5G,IAAIrO,KAAKoG,EAErB,OAAO6O,GAAG1G,SAAS2G,GAAI1G,SAASxO,KAAK8U,OAAO3I,IAAInM,KAAKoG,GAAGoI,SAASxO,KAAK6O,GAAGR,IAAI6G,IAMjFP,EAAOvS,UAAU+S,UAAY,SAAUC,EAAGC,GAC7B,MAALD,GAAkB,MAALC,GAAaD,EAAEjU,OAAS,GAAKkU,EAAElU,OAAS,GACrDnB,KAAKE,EAAIyC,EAAYyS,EAAG,IACxBpV,KAAKqL,EAAIjK,SAASiU,EAAG,KAGrB5Q,QAAQC,MAAM,2BAKtBiQ,EAAOvS,UAAU7C,QAAU,SAAU+V,GACjC,GAAIjS,GAAIwB,EAAUyQ,EAAOtV,KAAKE,EAAE+L,YAAc,GAAM,EACpD,IAAS,MAAL5I,EACA,MAAO,KAEX,IAAIpC,GAAIjB,KAAK+U,SAAS1R,EACtB,IAAS,MAALpC,EACA,MAAO,KAEX,IAAIF,GAAIE,EAAEuG,SAAS,GACnB,OAAsB,KAAN,EAAXzG,EAAEI,QACIJ,EAGA,IAAMA,GAKrB4T,EAAOvS,UAAUmT,WAAa,SAAUH,EAAGC,EAAGG,GACjC,MAALJ,GAAkB,MAALC,GAAaD,EAAEjU,OAAS,GAAKkU,EAAElU,OAAS,GACrDnB,KAAKE,EAAIyC,EAAYyS,EAAG,IACxBpV,KAAKqL,EAAIjK,SAASiU,EAAG,IACrBrV,KAAK+B,EAAIY,EAAY6S,EAAG,KAGxB/Q,QAAQC,MAAM,4BAKtBiQ,EAAOvS,UAAUqT,aAAe,SAAUL,EAAGC,EAAGG,EAAGE,EAAGC,EAAGC,EAAIC,EAAIC,GACpD,MAALV,GAAkB,MAALC,GAAaD,EAAEjU,OAAS,GAAKkU,EAAElU,OAAS,GACrDnB,KAAKE,EAAIyC,EAAYyS,EAAG,IACxBpV,KAAKqL,EAAIjK,SAASiU,EAAG,IACrBrV,KAAK+B,EAAIY,EAAY6S,EAAG,IACxBxV,KAAKoG,EAAIzD,EAAY+S,EAAG,IACxB1V,KAAK6O,EAAIlM,EAAYgT,EAAG,IACxB3V,KAAK4U,KAAOjS,EAAYiT,EAAI,IAC5B5V,KAAK6U,KAAOlS,EAAYkT,EAAI,IAC5B7V,KAAK8U,MAAQnS,EAAYmT,EAAG,KAG5BrR,QAAQC,MAAM,4BAKtBiQ,EAAOvS,UAAU2T,SAAW,SAAUC,EAAGX,GACrC,GAAItQ,GAAM,GAAIC,IACViR,EAAKD,GAAK,CACdhW,MAAKqL,EAAIjK,SAASiU,EAAG,GAErB,KADA,GAAIa,GAAK,GAAIxT,GAAW2S,EAAG,MAClB,CACL,KACIrV,KAAKoG,EAAI,GAAI1D,GAAWsT,EAAIC,EAAI,EAAGlR,GACsC,GAArE/E,KAAKoG,EAAEmI,SAAS7L,EAAWkN,KAAKG,IAAImG,GAAIlK,UAAUtJ,EAAWkN,OAAa5P,KAAKoG,EAAE4J,gBAAgB,MAIzG,KACIhQ,KAAK6O,EAAI,GAAInM,GAAWuT,EAAI,EAAGlR,GAC0C,GAArE/E,KAAK6O,EAAEN,SAAS7L,EAAWkN,KAAKG,IAAImG,GAAIlK,UAAUtJ,EAAWkN,OAAa5P,KAAK6O,EAAEmB,gBAAgB,MAIzG,GAAIhQ,KAAKoG,EAAE4F,UAAUhM,KAAK6O,IAAM,EAAG,CAC/B,GAAIhL,GAAI7D,KAAKoG,CACbpG,MAAKoG,EAAIpG,KAAK6O,EACd7O,KAAK6O,EAAIhL,EAEb,GAAIsS,GAAKnW,KAAKoG,EAAEmI,SAAS7L,EAAWkN,KAChCwG,EAAKpW,KAAK6O,EAAEN,SAAS7L,EAAWkN,KAChCyG,EAAMF,EAAG3H,SAAS4H,EACtB,IAA6C,GAAzCC,EAAItG,IAAImG,GAAIlK,UAAUtJ,EAAWkN,KAAW,CAC5C5P,KAAKE,EAAIF,KAAKoG,EAAEoI,SAASxO,KAAK6O,GAC9B7O,KAAK+B,EAAImU,EAAGzG,WAAW4G,GACvBrW,KAAK4U,KAAO5U,KAAK+B,EAAEoK,IAAIgK,GACvBnW,KAAK6U,KAAO7U,KAAK+B,EAAEoK,IAAIiK,GACvBpW,KAAK8U,MAAQ9U,KAAK6O,EAAEY,WAAWzP,KAAKoG,EACpC,UAOZuO,EAAOvS,UAAUzC,QAAU,SAAU2W,GACjC,GAAIrV,GAAI0B,EAAY2T,EAAO,IACvBjT,EAAIrD,KAAKgV,UAAU/T,EACvB,OAAS,OAALoC,EACO,KAEJ6B,EAAY7B,EAAIrD,KAAKE,EAAE+L,YAAc,GAAM,IAGtD0I,EAAOvS,UAAUmU,cAAgB,SAAUP,EAAGX,EAAG3C,GAC7C,GAAI3N,GAAM,GAAIC,IACViR,EAAKD,GAAK,CACdhW,MAAKqL,EAAIjK,SAASiU,EAAG,GACrB,IAAIa,GAAK,GAAIxT,GAAW2S,EAAG,IACvBmB,EAAMxW,KAGNyW,EAAQ,WACR,GAAIC,GAAQ,WACR,GAAIF,EAAIpQ,EAAE4F,UAAUwK,EAAI3H,IAAM,EAAG,CAC7B,GAAIhL,GAAI2S,EAAIpQ,CACZoQ,GAAIpQ,EAAIoQ,EAAI3H,EACZ2H,EAAI3H,EAAIhL,EAEZ,GAAIsS,GAAKK,EAAIpQ,EAAEmI,SAAS7L,EAAWkN,KAC/BwG,EAAKI,EAAI3H,EAAEN,SAAS7L,EAAWkN,KAC/ByG,EAAMF,EAAG3H,SAAS4H,EACuB,IAAzCC,EAAItG,IAAImG,GAAIlK,UAAUtJ,EAAWkN,MACjC4G,EAAItW,EAAIsW,EAAIpQ,EAAEoI,SAASgI,EAAI3H,GAC3B2H,EAAIzU,EAAImU,EAAGzG,WAAW4G,GACtBG,EAAI5B,KAAO4B,EAAIzU,EAAEoK,IAAIgK,GACrBK,EAAI3B,KAAO2B,EAAIzU,EAAEoK,IAAIiK,GACrBI,EAAI1B,MAAQ0B,EAAI3H,EAAEY,WAAW+G,EAAIpQ,GACjCwM,WAAW,WAAcF,KAAe,IAGxCE,WAAW6D,EAAO,IAGtBE,EAAQ,WACRH,EAAI3H,EAAIpM,IACR+T,EAAI3H,EAAEgE,gBAAgBoD,EAAI,EAAGlR,EAAK,WAC9ByR,EAAI3H,EAAEN,SAAS7L,EAAWkN,KAAK6C,KAAKyD,EAAI,SAAUtV,GACX,GAA/BA,EAAEoL,UAAUtJ,EAAWkN,MAAa4G,EAAI3H,EAAEmB,gBAAgB,IAC1D4C,WAAW8D,EAAO,GAGlB9D,WAAW+D,EAAO,QAK9BC,EAAQ,WACRJ,EAAIpQ,EAAI3D,IACR+T,EAAIpQ,EAAEyM,gBAAgBmD,EAAIC,EAAI,EAAGlR,EAAK,WAClCyR,EAAIpQ,EAAEmI,SAAS7L,EAAWkN,KAAK6C,KAAKyD,EAAI,SAAUtV,GACX,GAA/BA,EAAEoL,UAAUtJ,EAAWkN,MAAa4G,EAAIpQ,EAAE4J,gBAAgB,IAC1D4C,WAAW+D,EAAO,GAGlB/D,WAAWgE,EAAO,OAKlChE,YAAWgE,EAAO,GAEtBhE,YAAW6D,EAAO,IAEtB9B,EAAOvS,UAAUyU,KAAO,SAAUvB,EAAMwB,EAAcC,GAClD,GAAInR,GAASN,EAAgByR,GACzBC,EAASpR,EAASkR,EAAaxB,GAAM9N,WACrCnE,EAAImB,EAAUwS,EAAQhX,KAAKE,EAAE+L,YAAc,EAC/C,IAAS,MAAL5I,EACA,MAAO,KAEX,IAAIpC,GAAIjB,KAAKgV,UAAU3R,EACvB,IAAS,MAALpC,EACA,MAAO,KAEX,IAAIF,GAAIE,EAAEuG,SAAS,GACnB,OAAsB,KAAN,EAAXzG,EAAEI,QACIJ,EAGA,IAAMA,GAGrB4T,EAAOvS,UAAU6U,OAAS,SAAU3B,EAAM4B,EAAWJ,GACjD,GAAI7V,GAAI0B,EAAYuU,EAAW,IAC3B7T,EAAIrD,KAAK+U,SAAS9T,EACtB,OAAS,OAALoC,EACO,KAGEoC,EADEpC,EAAEmE,SAAS,IAAI2P,QAAQ,SAAU,MAE/BL,EAAaxB,GAAM9N,YAEjCmN,KAoCPnP,IACA4R,IAAK,uCACLC,IAAK,uCACLC,KAAM,iCACNC,OAAQ,yCACRC,OAAQ,yCACRC,OAAQ,yCACRC,OAAQ,yCACRC,UAAW,kCA+BXC,KACJA,IAAMC,MAeFC,OAAQ,SAASC,EAAMC,EAAQC,GAC3B,IAAMD,IAAYD,EACd,KAAM,IAAIjR,OAAM,6EAIpB,IAAIoR,GAAI,YAUR,IATAA,EAAE9V,UAAY4V,EAAO5V,UACrB2V,EAAK3V,UAAY,GAAI8V,GACrBH,EAAK3V,UAAUF,YAAc6V,EAC7BA,EAAKI,WAAaH,EAAO5V,UAErB4V,EAAO5V,UAAUF,aAAezD,OAAO2D,UAAUF,cACjD8V,EAAO5V,UAAUF,YAAc8V,GAG/BC,EAAW,CACX,GAAIjX,EACJ,KAAKA,IAAKiX,GACNF,EAAK3V,UAAUpB,GAAKiX,EAAUjX,EAalC,IAAIoX,GAAa,aACbC,GAAO,WAAY,UACvB,KACQ,OAAOC,KAAK7E,UAAU8E,aACtBH,EAAa,SAASxX,EAAGa,GACrB,IAAKT,EAAI,EAAGA,EAAIqX,EAAIlX,OAAQH,GAAQ,EAAG,CACnC,GAAIwX,GAAQH,EAAIrX,GAAI4D,EAAInD,EAAE+W,EACT,mBAAN5T,IAAoBA,GAAKnG,OAAO2D,UAAUoW,KACjD5X,EAAE4X,GAAS5T,MAK7B,MAAO6T,IAAkBL,EAAWL,EAAK3V,UAAW6V;;;;;;;;AAgClE,GAAIS,WAmDoB,KAAbA,GAAKC,MAAwBD,GAAKC,OAAMD,GAAKC,SAQxDD,GAAKC,KAAKC,SAAW,GAAI,YACrB5Y,KAAK6Y,iBAAmB,SAAS7X,GAC7B,GAAID,GAAIC,EAAEwG,SAAS,GAEnB,OADKzG,GAAEI,OAAS,GAAM,IAAGJ,EAAI,IAAMA,GAC5BA,GAEXf,KAAK8Y,8BAAgC,SAASC,GAC1C,GAAIhY,GAAIgY,EAAgBvR,SAAS,GACjC,IAAsB,KAAlBzG,EAAE8E,OAAO,EAAG,GACR9E,EAAEI,OAAS,GAAK,EAChBJ,EAAI,IAAMA,EAEJA,EAAEiY,MAAM,YACVjY,EAAI,KAAOA,OAGhB,CACH,GAAIkY,GAAOlY,EAAE8E,OAAO,GAChBqT,EAASD,EAAK9X,MACd+X,GAAS,GAAK,EACdA,GAAU,EAEJnY,EAAEiY,MAAM,YACVE,GAAU,EAIlB,KAAK,GADDC,GAAQ,GACHnY,EAAI,EAAGA,EAAIkY,EAAQlY,IACxBmY,GAAS,GAIbpY,GAFa,GAAI2B,GAAWyW,EAAO,IAChB5L,IAAIwL,GAAiB1K,IAAI3L,EAAWkN,KAC7CpI,SAAS,IAAI2P,QAAQ,KAAM,IAEzC,MAAOpW,IAoBXf,KAAKoZ,oBAAsB,SAASC,EAASC,GACzC,MAAOC,UAASF,EAASC,IAqD7BtZ,KAAKwZ,UAAY,SAASC,GACtB,GAAIC,GAAQhB,GACRiB,EAAaD,EAAMf,KACnBiB,EAAcD,EAAWE,WACzBC,EAAcH,EAAWI,WACzBC,EAAgBL,EAAWM,aAC3BC,EAAkBP,EAAWQ,eAC7BC,EAAWT,EAAWU,QACtBC,EAAuBX,EAAWY,oBAClCC,EAAiBb,EAAWc,cAC5BC,EAAiBf,EAAWgB,cAC5BC,EAAoBjB,EAAWkB,iBAC/BC,EAAsBnB,EAAWoB,mBACjCC,EAAoBrB,EAAWsB,iBAC/BC,EAAgBvB,EAAWwB,aAC3BC,EAAczB,EAAW0B,WACzBC,EAAsB3B,EAAW4B,mBACjCC,EAAe7B,EAAW8B,YAC1BC,EAAU/B,EAAWgC,OACrBC,EAAmBjC,EAAWkC,gBAC9BC,EAAanC,EAAWf,SAASY,UAEjCuC,EAAOtd,OAAOsd,KAAKtC,EACvB,IAAmB,GAAfsC,EAAK5a,OACL,KAAM,iCACV,IAAI2S,GAAMiI,EAAK,EAEf,KAA0I,GAAtI,yGAAyGla,QAAQ,IAAMiS,EAAM,KAC7H,KAAM,kBAAoBA,CAE9B,IAAW,QAAPA,EAAkB,MAAO,IAAI8F,GAAYH,EAAM3F,GACnD,IAAW,OAAPA,EAAkB,MAAO,IAAIgG,GAAYL,EAAM3F,GACnD,IAAW,UAAPA,EAAkB,MAAO,IAAIkG,GAAcP,EAAM3F,GACrD,IAAW,UAAPA,EAAkB,MAAO,IAAIoG,GAAgBT,EAAM3F,GACvD,IAAW,QAAPA,EAAkB,MAAO,IAAIsG,GAASX,EAAM3F,GAChD,IAAW,OAAPA,EAAkB,MAAO,IAAIwG,GAAqBb,EAAM3F,GAC5D,IAAW,QAAPA,EAAkB,MAAO,IAAI0G,GAAef,EAAM3F,GACtD,IAAW,WAAPA,EAAkB,MAAO,IAAI4G,GAAejB,EAAM3F,GACtD,IAAW,UAAPA,EAAkB,MAAO,IAAI8G,GAAkBnB,EAAM3F,GACzD,IAAW,UAAPA,EAAkB,MAAO,IAAIgH,GAAoBrB,EAAM3F,GAC3D,IAAW,UAAPA,EAAkB,MAAO,IAAIkH,GAAkBvB,EAAM3F,GACzD,IAAW,UAAPA,EAAkB,MAAO,IAAIoH,GAAczB,EAAM3F,GACrD,IAAW,WAAPA,EAAkB,MAAO,IAAIsH,GAAY3B,EAAM3F,GACnD,IAAW,WAAPA,EAAkB,MAAO,IAAIwH,GAAoB7B,EAAM3F,GAE3D,IAAW,OAAPA,EAAc,CAGd,IAAK,GAFDkI,GAAYvC,EAAM3F,GAClBxN,KACKtF,EAAI,EAAGA,EAAIgb,EAAU7a,OAAQH,IAAK,CACvC,GAAIib,GAAUH,EAAWE,EAAUhb,GACnCsF,GAAE4V,KAAKD,GAEX,MAAO,IAAIT,IAAc,MAASlV,IAGtC,GAAW,OAAPwN,EAAc,CAGd,IAAK,GAFDkI,GAAYvC,EAAM3F,GAClBxN,KACKtF,EAAI,EAAGA,EAAIgb,EAAU7a,OAAQH,IAAK,CACvC,GAAIib,GAAUH,EAAWE,EAAUhb,GACnCsF,GAAE4V,KAAKD,GAEX,MAAO,IAAIP,IAAS,MAASpV,IAGjC,GAAW,OAAPwN,EAAc,CACd,GAAIqI,GAAW1C,EAAM3F,EACrB,IAAiD,mBAA7CrV,OAAO2D,UAAUoF,SAAS4U,KAAKD,IACZ,GAAnBA,EAAShb,OAAa,CACtB,GAAItC,GAAMid,EAAWK,EAAS,GAC9B,OAAO,IAAIP,IAAkB/R,IAAKsS,EAAS,GACvCE,SAAUF,EAAS,GACnBtd,IAAKA,IAET,GAAIyd,KAKJ,QAJ0B/V,KAAtB4V,EAASE,WACTC,EAASD,SAAWF,EAASE,cACZ9V,KAAjB4V,EAAStS,MACTyS,EAASzS,IAAMsS,EAAStS,SACPtD,KAAjB4V,EAAStd,IACT,KAAM,mCAEV,OADAyd,GAASzd,IAAMid,EAAWK,EAAStd,KAC5B,GAAI+c,GAAiBU,KAmBxCtc,KAAKuc,cAAgB,SAAS9C,GAE1B,MADczZ,MAAKwZ,UAAUC,GACd+C,kBAkBvB9D,GAAKC,KAAKC,SAAS6D,YAAc,SAASjW,GAQtC,IAAK,GAPD/E,GAAI,GACJib,EAAMtb,SAASoF,EAAIX,OAAO,EAAG,GAAI,IACjC8W,EAAK5Z,KAAKC,MAAM0Z,EAAM,IACtBE,EAAKF,EAAM,GACXjb,EAAIkb,EAAK,IAAMC,EAEfC,EAAS,GACJ7b,EAAI,EAAGA,EAAIwF,EAAIrF,OAAQH,GAAK,EAAG,CACpC,GAAIrC,GAAQyC,SAASoF,EAAIX,OAAO7E,EAAG,GAAI,IACnC8b,GAAO,WAAane,EAAM6I,SAAS,IAAIuV,OAAQ,EAEnD,IADAF,GAAkBC,EAAIjX,OAAO,EAAG,GACR,KAApBiX,EAAIjX,OAAO,EAAG,GAAW,CAEzBpE,EAAIA,EAAI,IADC,GAAIiB,GAAWma,EAAQ,GACfrV,SAAS,IAC1BqV,EAAS,IAGjB,MAAOpb,IAiBXiX,GAAKC,KAAKC,SAASoE,YAAc,SAASC,GACtC,GAAIC,GAAO,SAASlc,GAChB,GAAID,GAAIC,EAAEwG,SAAS,GAEnB,OADgB,IAAZzG,EAAEI,SAAaJ,EAAI,IAAMA,GACtBA,EAoBX,KAAMkc,EAAUjE,MAAM,aAClB,KAAM,yBAA2BiE,CAErC,IAAIlc,GAAI,GACJuF,EAAI2W,EAAUE,MAAM,KACpBR,EAAsB,GAAjBvb,SAASkF,EAAE,IAAWlF,SAASkF,EAAE,GAC1CvF,IAAKmc,EAAKP,GACVrW,EAAE8W,OAAO,EAAG,EACZ,KAAK,GAAIpc,GAAI,EAAGA,EAAIsF,EAAEnF,OAAQH,IAC1BD,GA1BU,SAASsc,GACnB,GAAItc,GAAI,GACJuc,EAAK,GAAI5a,GAAW2a,EAAM,IAC1Brb,EAAIsb,EAAG9V,SAAS,GAChB+V,EAAS,EAAIvb,EAAEb,OAAS,CACd,IAAVoc,IAAaA,EAAS,EAE1B,KAAK,GADDC,GAAO,GACFxc,EAAI,EAAGA,EAAIuc,EAAQvc,IAAKwc,GAAQ,GACzCxb,GAAIwb,EAAOxb,CACX,KAAK,GAAIhB,GAAI,EAAGA,EAAIgB,EAAEb,OAAS,EAAGH,GAAK,EAAG,CACtC,GAAIyc,GAAKzb,EAAE6D,OAAO7E,EAAG,EACjBA,IAAKgB,EAAEb,OAAS,IAAGsc,EAAK,IAAMA,GAClC1c,GAAKmc,EAAK9b,SAASqc,EAAI,IAE3B,MAAO1c,IAYMuF,EAAEtF,GAEnB,OAAOD,IAqBX2X,GAAKC,KAAK+E,WAAa,WAUnB1d,KAAK2d,sBAAwB,WACzB,OAAsB,KAAX3d,KAAK4d,IAAgC,MAAX5d,KAAK4d,GACtC,KAAM,+BAEV,IAAI5d,KAAK4d,GAAGzc,OAAS,GAAK,EACtB,KAAM,oCAdL,GAc8CA,OAAS,MAAQnB,KAAK4d,EAEzE,IAAI1d,GAAIF,KAAK4d,GAAGzc,OAAS,EACrB0c,EAAK3d,EAAEsH,SAAS,GAIpB,IAHIqW,EAAG1c,OAAS,GAAK,IACjB0c,EAAK,IAAMA,GAEX3d,EAAI,IACJ,MAAO2d,EAEP,IAAIC,GAAQD,EAAG1c,OAAS,CACxB,IAAI2c,EAAQ,GACR,KAAM,iDAAmD5d,EAAEsH,SAAS,GAGxE,QADW,IAAMsW,GACLtW,SAAS,IAAMqW,GAWnC7d,KAAKwc,cAAgB,WAQjB,OAPiB,MAAbxc,KAAK+d,MAAgB/d,KAAKge,cAC1Bhe,KAAK4d,GAAK5d,KAAKie,mBACfje,KAAKke,GAAKle,KAAK2d,wBACf3d,KAAK+d,KAAO/d,KAAKme,GAAKne,KAAKke,GAAKle,KAAK4d,GACrC5d,KAAKge,YAAa,GAGfhe,KAAK+d,MAUhB/d,KAAKoe,YAAc,WAEf,MADApe,MAAKwc,gBACExc,KAAK4d,IAGhB5d,KAAKie,iBAAmB,WACpB,MAAO,KAsBfvF,GAAKC,KAAK0F,kBAAoB,SAASC,GACnC5F,GAAKC,KAAK0F,kBAAkBlG,WAAWjW,YAAYka,KAAKpc,MASxDA,KAAKue,UAAY,WACb,MAAOve,MAAKyB,GAUhBzB,KAAKwe,UAAY,SAASC,GACtBze,KAAK+d,KAAO,KACZ/d,KAAKge,YAAa,EAClBhe,KAAKyB,EAAIgd,EACTze,KAAK4d,GAAKc,OAAO1e,KAAKyB,IAU1BzB,KAAK2e,aAAe,SAASC,GACzB5e,KAAK+d,KAAO,KACZ/d,KAAKge,YAAa,EAClBhe,KAAKyB,EAAI,KACTzB,KAAK4d,GAAKgB,GAGd5e,KAAKie,iBAAmB,WACpB,MAAOje,MAAK4d,QAGK,KAAVU,IACc,gBAAVA,GACPte,KAAKwe,UAAUF,OACgB,KAAjBA,EAAY,IAC1Bte,KAAKwe,UAAUF,EAAY,SACI,KAAjBA,EAAY,KAC1Bte,KAAK2e,aAAaL,EAAY,OAI1C1G,GAAMC,KAAKC,OAAOY,GAAKC,KAAK0F,kBAAmB3F,GAAKC,KAAK+E,YAazDhF,GAAKC,KAAKkG,gBAAkB,SAASP,GACjC5F,GAAKC,KAAKkG,gBAAgB1G,WAAWjW,YAAYka,KAAKpc,MAGtDA,KAAK8e,eAAiB,SAAS/c,GAG3B,MAFAgd,KAAMhd,EAAEid,UAAqC,IAAxBjd,EAAEkd,oBACT,GAAIC,MAAKH,MAc3B/e,KAAKmf,WAAa,SAASC,EAAYC,EAAMC,GACzC,GAAIpW,GAAMlJ,KAAKuf,YACXxd,EAAI/B,KAAK8e,eAAeM,GACxBI,EAAOpa,OAAOrD,EAAE0d,cACR,QAARJ,IAAeG,EAAOA,EAAK3Z,OAAO,EAAG,GACzC,IAAI6Z,GAAQxW,EAAI9D,OAAOrD,EAAE4d,WAAa,GAAI,GACtCC,EAAM1W,EAAI9D,OAAOrD,EAAE8d,WAAY,GAC/BC,EAAO5W,EAAI9D,OAAOrD,EAAEge,YAAa,GACjC5S,EAAMjE,EAAI9D,OAAOrD,EAAEie,cAAe,GAClCC,EAAM/W,EAAI9D,OAAOrD,EAAEme,cAAe,GAClCze,EAAI+d,EAAOE,EAAQE,EAAME,EAAO3S,EAAM8S,CAC1C,KAAmB,IAAfX,EAAqB,CACrB,GAAIa,GAASpe,EAAEqe,iBACf,IAAc,GAAVD,EAAa,CACb,GAAIE,GAAUnX,EAAI9D,OAAO+a,GAAS,EAClCE,GAAUA,EAAQlJ,QAAQ,QAAS,IACnC1V,EAAIA,EAAI,IAAM4e,GAGtB,MAAO5e,GAAI,KAGfzB,KAAKuf,YAAc,SAAS9d,EAAGc,GAC3B,MAAId,GAAEN,QAAUoB,EAAYd,EACrB,GAAI0E,OAAM5D,EAAMd,EAAEN,OAAS,GAAGmf,KAAK,KAAO7e,GAWrDzB,KAAKue,UAAY,WACb,MAAOve,MAAKyB,GAUhBzB,KAAKwe,UAAY,SAASC,GACtBze,KAAK+d,KAAO,KACZ/d,KAAKge,YAAa,EAClBhe,KAAKyB,EAAIgd,EACTze,KAAK4d,GAAKc,OAAOD,IAerBze,KAAKugB,eAAiB,SAASf,EAAME,EAAOE,EAAKE,EAAM3S,EAAK8S,GACxD,GAAIb,GAAa,GAAIF,MAAKA,KAAKsB,IAAIhB,EAAME,EAAQ,EAAGE,EAAKE,EAAM3S,EAAK8S,EAAK,GACzEjgB,MAAKygB,UAAUrB,IAGnBpf,KAAKie,iBAAmB,WACpB,MAAOje,MAAK4d,KAGpBhG,GAAMC,KAAKC,OAAOY,GAAKC,KAAKkG,gBAAiBnG,GAAKC,KAAK+E,YAavDhF,GAAKC,KAAK+H,sBAAwB,SAASpC,GACvC5F,GAAKC,KAAK0F,kBAAkBlG,WAAWjW,YAAYka,KAAKpc,MASxDA,KAAK2gB,qBAAuB,SAASC,GACjC5gB,KAAK+d,KAAO,KACZ/d,KAAKge,YAAa,EAClBhe,KAAK6gB,UAAYD,GAUrB5gB,KAAK8gB,iBAAmB,SAASC,GAC7B/gB,KAAK+d,KAAO,KACZ/d,KAAKge,YAAa,EAClBhe,KAAK6gB,UAAU3E,KAAK6E,IAGxB/gB,KAAK6gB,UAAY,GAAI1a,WACA,KAAVmY,OACuB,KAAnBA,EAAc,QACrBte,KAAK6gB,UAAYvC,EAAc,QAI3C1G,GAAMC,KAAKC,OAAOY,GAAKC,KAAK+H,sBAAuBhI,GAAKC,KAAK+E,YAgB7DhF,GAAKC,KAAKkB,WAAa,WACnBnB,GAAKC,KAAKkB,WAAW1B,WAAWjW,YAAYka,KAAKpc,MACjDA,KAAKme,GAAK,KACVne,KAAK+d,KAAO,UAEhBnG,GAAMC,KAAKC,OAAOY,GAAKC,KAAKkB,WAAYnB,GAAKC,KAAK+E,YAmBlDhF,GAAKC,KAAKoB,WAAa,SAASuE,GAC5B5F,GAAKC,KAAKoB,WAAW5B,WAAWjW,YAAYka,KAAKpc,MACjDA,KAAKme,GAAK,KASVne,KAAKghB,gBAAkB,SAASjI,GAC5B/Y,KAAK+d,KAAO,KACZ/d,KAAKge,YAAa,EAClBhe,KAAK4d,GAAKlF,GAAKC,KAAKC,SAASE,8BAA8BC,IAU/D/Y,KAAKihB,aAAe,SAASpU,GACzB,GAAIyQ,GAAK,GAAI5a,GAAW0C,OAAOyH,GAAW,GAC1C7M,MAAKghB,gBAAgB1D,IAkBzBtd,KAAKkhB,YAAc,SAAStC,GACxB5e,KAAK4d,GAAKgB,GAGd5e,KAAKie,iBAAmB,WACpB,MAAOje,MAAK4d,QAGK,KAAVU,QACwB,KAApBA,EAAe,OACtBte,KAAKghB,gBAAgB1C,EAAe,YACL,KAAjBA,EAAY,IAC1Bte,KAAKihB,aAAa3C,EAAY,KACN,gBAAVA,GACdte,KAAKihB,aAAa3C,OACa,KAAjBA,EAAY,KAC1Bte,KAAKkhB,YAAY5C,EAAY,OAIzC1G,GAAMC,KAAKC,OAAOY,GAAKC,KAAKoB,WAAYrB,GAAKC,KAAK+E,YAyClDhF,GAAKC,KAAKsB,aAAe,SAASqE,GAC9B,OAAe/X,KAAX+X,OAA8C,KAAfA,EAAOzf,IAAqB,CAC3D,GAAIsiB,GAAIzI,GAAKC,KAAKC,SAASY,UAAU8E,EAAOzf,IAC5Cyf,GAAO9X,IAAM,KAAO2a,EAAE3E,gBAE1B9D,GAAKC,KAAKsB,aAAa9B,WAAWjW,YAAYka,KAAKpc,MACnDA,KAAKme,GAAK,KASVne,KAAKohB,+BAAiC,SAASC,GAC3CrhB,KAAK+d,KAAO,KACZ/d,KAAKge,YAAa,EAClBhe,KAAK4d,GAAKyD,GAWdrhB,KAAKshB,yBAA2B,SAASC,EAAYC,GACjD,GAAID,EAAa,GAAK,EAAIA,EACtB,KAAM,yCAA2CA,CAErD,IAAIE,GAAc,IAAMF,CACxBvhB,MAAK+d,KAAO,KACZ/d,KAAKge,YAAa,EAClBhe,KAAK4d,GAAK6D,EAAcD,GAiB5BxhB,KAAK0hB,kBAAoB,SAASC,GAC9BA,EAAeA,EAAaxK,QAAQ,MAAO,GAC3C,IAAIoK,GAAa,EAAII,EAAaxgB,OAAS,CACzB,IAAdogB,IAAiBA,EAAa,EAClC,KAAK,GAAIvgB,GAAI,EAAGA,GAAKugB,EAAYvgB,IAC7B2gB,GAAgB,GAGpB,KAAK,GADD5gB,GAAI,GACCC,EAAI,EAAGA,EAAI2gB,EAAaxgB,OAAS,EAAGH,GAAK,EAAG,CACjD,GAAIgB,GAAI2f,EAAa9b,OAAO7E,EAAG,GAC3BV,EAAIc,SAASY,EAAG,GAAGwF,SAAS,GAChB,IAAZlH,EAAEa,SAAab,EAAI,IAAMA,GAC7BS,GAAKT,EAETN,KAAK+d,KAAO,KACZ/d,KAAKge,YAAa,EAClBhe,KAAK4d,GAAK,IAAM2D,EAAaxgB,GAejCf,KAAK4hB,kBAAoB,SAASC,GAE9B,IAAK,GADDpgB,GAAI,GACCT,EAAI,EAAGA,EAAI6gB,EAAa1gB,OAAQH,IACd,GAAnB6gB,EAAa7gB,GACbS,GAAK,IAELA,GAAK,GAGbzB,MAAK0hB,kBAAkBjgB,IAgB3BzB,KAAK8hB,cAAgB,SAASC,GAE1B,IAAK,GADDzb,GAAI,GAAIH,OAAM4b,GACT/gB,EAAI,EAAGA,EAAI+gB,EAAS/gB,IACzBsF,EAAEtF,IAAK,CAEX,OAAOsF,IAGXtG,KAAKie,iBAAmB,WACpB,MAAOje,MAAK4d,QAGK,KAAVU,IACc,gBAAVA,IAAsBA,EAAO5X,cAAcsS,MAAM,eACxDhZ,KAAKohB,+BAA+B9C,OACL,KAAjBA,EAAY,IAC1Bte,KAAKohB,+BAA+B9C,EAAY,SACjB,KAAjBA,EAAY,IAC1Bte,KAAK0hB,kBAAkBpD,EAAY,SACF,KAAnBA,EAAc,OAC5Bte,KAAK4hB,kBAAkBtD,EAAc,SAIjD1G,GAAMC,KAAKC,OAAOY,GAAKC,KAAKsB,aAAcvB,GAAKC,KAAK+E,YAuCpDhF,GAAKC,KAAKwB,eAAiB,SAASmE,GAChC,OAAe/X,KAAX+X,OAA8C,KAAfA,EAAOzf,IAAqB,CAC3D,GAAIsiB,GAAIzI,GAAKC,KAAKC,SAASY,UAAU8E,EAAOzf,IAC5Cyf,GAAO9X,IAAM2a,EAAE3E,gBAEnB9D,GAAKC,KAAKwB,eAAehC,WAAWjW,YAAYka,KAAKpc,KAAMse,GAC3Dte,KAAKme,GAAK,MAEdvG,GAAMC,KAAKC,OAAOY,GAAKC,KAAKwB,eAAgBzB,GAAKC,KAAK0F,mBAWtD3F,GAAKC,KAAK0B,QAAU,WAChB3B,GAAKC,KAAK0B,QAAQlC,WAAWjW,YAAYka,KAAKpc,MAC9CA,KAAKme,GAAK,KACVne,KAAK+d,KAAO,QAEhBnG,GAAMC,KAAKC,OAAOY,GAAKC,KAAK0B,QAAS3B,GAAKC,KAAK+E,YAmB/ChF,GAAKC,KAAK4B,oBAAsB,SAAS+D,GACrC,GAAIpB,GAAO,SAASlc,GAChB,GAAID,GAAIC,EAAEwG,SAAS,GAEnB,OADgB,IAAZzG,EAAEI,SAAaJ,EAAI,IAAMA,GACtBA,GAEPihB,EAAU,SAAS3E,GACnB,GAAItc,GAAI,GACJuc,EAAK,GAAI5a,GAAW2a,EAAM,IAC1Brb,EAAIsb,EAAG9V,SAAS,GAChB+V,EAAS,EAAIvb,EAAEb,OAAS,CACd,IAAVoc,IAAaA,EAAS,EAE1B,KAAK,GADDC,GAAO,GACFxc,EAAI,EAAGA,EAAIuc,EAAQvc,IAAKwc,GAAQ,GACzCxb,GAAIwb,EAAOxb,CACX,KAAK,GAAIhB,GAAI,EAAGA,EAAIgB,EAAEb,OAAS,EAAGH,GAAK,EAAG,CACtC,GAAIyc,GAAKzb,EAAE6D,OAAO7E,EAAG,EACjBA,IAAKgB,EAAEb,OAAS,IAAGsc,EAAK,IAAMA,GAClC1c,GAAKmc,EAAK9b,SAASqc,EAAI,IAE3B,MAAO1c,GAGX2X,IAAKC,KAAK4B,oBAAoBpC,WAAWjW,YAAYka,KAAKpc,MAC1DA,KAAKme,GAAK,KASVne,KAAKkhB,YAAc,SAAStC,GACxB5e,KAAK+d,KAAO,KACZ/d,KAAKge,YAAa,EAClBhe,KAAKyB,EAAI,KACTzB,KAAK4d,GAAKgB,GAad5e,KAAKiiB,kBAAoB,SAAShF,GAC9B,IAAMA,EAAUjE,MAAM,aAClB,KAAM,yBAA2BiE,CAErC,IAAIlc,GAAI,GACJuF,EAAI2W,EAAUE,MAAM,KACpBR,EAAsB,GAAjBvb,SAASkF,EAAE,IAAWlF,SAASkF,EAAE,GAC1CvF,IAAKmc,EAAKP,GACVrW,EAAE8W,OAAO,EAAG,EACZ,KAAK,GAAIpc,GAAI,EAAGA,EAAIsF,EAAEnF,OAAQH,IAC1BD,GAAKihB,EAAQ1b,EAAEtF,GAEnBhB,MAAK+d,KAAO,KACZ/d,KAAKge,YAAa,EAClBhe,KAAKyB,EAAI,KACTzB,KAAK4d,GAAK7c,GAiBdf,KAAKkiB,aAAe,SAASC,GACzB,GAAIC,GAAM1J,GAAKC,KAAK0J,KAAKC,IAAIC,SAASJ,EACtC,IAAY,KAARC,EAGA,KAAM,0CAA4CD,CAFlDniB,MAAKiiB,kBAAkBG,IAM/BpiB,KAAKie,iBAAmB,WACpB,MAAOje,MAAK4d,QAGDrX,KAAX+X,IACsB,gBAAXA,GACHA,EAAOtF,MAAM,mBACbhZ,KAAKiiB,kBAAkB3D,GAEvBte,KAAKkiB,aAAa5D,OAEA/X,KAAf+X,EAAO8D,IACdpiB,KAAKiiB,kBAAkB3D,EAAO8D,SACR7b,KAAf+X,EAAO9X,IACdxG,KAAKkhB,YAAY5C,EAAO9X,SACDD,KAAhB+X,EAAO/Y,MACdvF,KAAKkiB,aAAa5D,EAAO/Y,QAIrCqS,GAAMC,KAAKC,OAAOY,GAAKC,KAAK4B,oBAAqB7B,GAAKC,KAAK+E,YAsB3DhF,GAAKC,KAAK8B,cAAgB,SAAS6D,GAC/B5F,GAAKC,KAAK8B,cAActC,WAAWjW,YAAYka,KAAKpc,MACpDA,KAAKme,GAAK,KASVne,KAAKghB,gBAAkB,SAASjI,GAC5B/Y,KAAK+d,KAAO,KACZ/d,KAAKge,YAAa,EAClBhe,KAAK4d,GAAKlF,GAAKC,KAAKC,SAASE,8BAA8BC,IAU/D/Y,KAAKihB,aAAe,SAASpU,GACzB,GAAIyQ,GAAK,GAAI5a,GAAW0C,OAAOyH,GAAW,GAC1C7M,MAAKghB,gBAAgB1D,IAczBtd,KAAKkhB,YAAc,SAAStC,GACxB5e,KAAK4d,GAAKgB,GAGd5e,KAAKie,iBAAmB,WACpB,MAAOje,MAAK4d,QAGK,KAAVU,QACqB,KAAjBA,EAAY,IACnBte,KAAKihB,aAAa3C,EAAY,KACN,gBAAVA,GACdte,KAAKihB,aAAa3C,OACa,KAAjBA,EAAY,KAC1Bte,KAAKkhB,YAAY5C,EAAY,OAIzC1G,GAAMC,KAAKC,OAAOY,GAAKC,KAAK8B,cAAe/B,GAAKC,KAAK+E,YAYrDhF,GAAKC,KAAKgC,cAAgB,SAAS2D,GAC/B5F,GAAKC,KAAKgC,cAAcxC,WAAWjW,YAAYka,KAAKpc,KAAMse,GAC1Dte,KAAKme,GAAK,MAEdvG,GAAMC,KAAKC,OAAOY,GAAKC,KAAKgC,cAAejC,GAAKC,KAAK0F,mBAYrD3F,GAAKC,KAAKkC,iBAAmB,SAASyD,GAClC5F,GAAKC,KAAKkC,iBAAiB1C,WAAWjW,YAAYka,KAAKpc,KAAMse,GAC7Dte,KAAKme,GAAK,MAEdvG,GAAMC,KAAKC,OAAOY,GAAKC,KAAKkC,iBAAkBnC,GAAKC,KAAK0F,mBAYxD3F,GAAKC,KAAKoC,mBAAqB,SAASuD,GACpC5F,GAAKC,KAAKoC,mBAAmB5C,WAAWjW,YAAYka,KAAKpc,KAAMse,GAC/Dte,KAAKme,GAAK,MAEdvG,GAAMC,KAAKC,OAAOY,GAAKC,KAAKoC,mBAAoBrC,GAAKC,KAAK0F,mBAY1D3F,GAAKC,KAAKsC,iBAAmB,SAASqD,GAClC5F,GAAKC,KAAKsC,iBAAiB9C,WAAWjW,YAAYka,KAAKpc,KAAMse,GAC7Dte,KAAKme,GAAK,MAEdvG,GAAMC,KAAKC,OAAOY,GAAKC,KAAKsC,iBAAkBvC,GAAKC,KAAK0F,mBAYxD3F,GAAKC,KAAKwC,aAAe,SAASmD,GAC9B5F,GAAKC,KAAKwC,aAAahD,WAAWjW,YAAYka,KAAKpc,KAAMse,GACzDte,KAAKme,GAAK,MAEdvG,GAAMC,KAAKC,OAAOY,GAAKC,KAAKwC,aAAczC,GAAKC,KAAK0F,mBA4BpD3F,GAAKC,KAAK0C,WAAa,SAASiD,GAC5B5F,GAAKC,KAAK0C,WAAWlD,WAAWjW,YAAYka,KAAKpc,KAAMse,GACvDte,KAAKme,GAAK,KAYVne,KAAKygB,UAAY,SAASrB,GACtBpf,KAAK+d,KAAO,KACZ/d,KAAKge,YAAa,EAClBhe,KAAKwiB,KAAOpD,EACZpf,KAAKyB,EAAIzB,KAAKmf,WAAWnf,KAAKwiB,KAAM,OACpCxiB,KAAK4d,GAAKc,OAAO1e,KAAKyB,IAG1BzB,KAAKie,iBAAmB,WAMpB,WALwB,KAAbje,KAAKwiB,UAAwC,KAAVxiB,KAAKyB,IAC/CzB,KAAKwiB,KAAO,GAAItD,MAChBlf,KAAKyB,EAAIzB,KAAKmf,WAAWnf,KAAKwiB,KAAM,OACpCxiB,KAAK4d,GAAKc,OAAO1e,KAAKyB,IAEnBzB,KAAK4d,QAGDrX,KAAX+X,QACmB/X,KAAf+X,EAAOjf,IACPW,KAAKwe,UAAUF,EAAOjf,KACE,gBAAVif,IAAsBA,EAAOtF,MAAM,gBACjDhZ,KAAKwe,UAAUF,OACO/X,KAAf+X,EAAO9X,IACdxG,KAAK2e,aAAaL,EAAO9X,SACFD,KAAhB+X,EAAOkE,MACdxiB,KAAKygB,UAAUnC,EAAOkE,QAIlC5K,GAAMC,KAAKC,OAAOY,GAAKC,KAAK0C,WAAY3C,GAAKC,KAAKkG,iBAuBlDnG,GAAKC,KAAK4C,mBAAqB,SAAS+C,GACpC5F,GAAKC,KAAK4C,mBAAmBpD,WAAWjW,YAAYka,KAAKpc,KAAMse,GAC/Dte,KAAKme,GAAK,KACVne,KAAKsf,YAAa,EAelBtf,KAAKygB,UAAY,SAASrB,GACtBpf,KAAK+d,KAAO,KACZ/d,KAAKge,YAAa,EAClBhe,KAAKwiB,KAAOpD,EACZpf,KAAKyB,EAAIzB,KAAKmf,WAAWnf,KAAKwiB,KAAM,MAAOxiB,KAAKsf,YAChDtf,KAAK4d,GAAKc,OAAO1e,KAAKyB,IAG1BzB,KAAKie,iBAAmB,WAMpB,WALkB1X,KAAdvG,KAAKwiB,UAAiCjc,KAAXvG,KAAKyB,IAChCzB,KAAKwiB,KAAO,GAAItD,MAChBlf,KAAKyB,EAAIzB,KAAKmf,WAAWnf,KAAKwiB,KAAM,MAAOxiB,KAAKsf,YAChDtf,KAAK4d,GAAKc,OAAO1e,KAAKyB,IAEnBzB,KAAK4d,QAGDrX,KAAX+X,QACmB/X,KAAf+X,EAAOjf,IACPW,KAAKwe,UAAUF,EAAOjf,KACE,gBAAVif,IAAsBA,EAAOtF,MAAM,gBACjDhZ,KAAKwe,UAAUF,OACO/X,KAAf+X,EAAO9X,IACdxG,KAAK2e,aAAaL,EAAO9X,SACFD,KAAhB+X,EAAOkE,MACdxiB,KAAKygB,UAAUnC,EAAOkE,OAEJ,IAAlBlE,EAAO6B,SACPngB,KAAKsf,YAAa,KAI9B1H,GAAMC,KAAKC,OAAOY,GAAKC,KAAK4C,mBAAoB7C,GAAKC,KAAKkG,iBAiB1DnG,GAAKC,KAAK8C,YAAc,SAAS6C,GAC7B5F,GAAKC,KAAK8C,YAAYtD,WAAWjW,YAAYka,KAAKpc,KAAMse,GACxDte,KAAKme,GAAK,KACVne,KAAKie,iBAAmB,WAEpB,IAAK,GADDld,GAAI,GACCC,EAAI,EAAGA,EAAIhB,KAAK6gB,UAAU1f,OAAQH,IAAK,CAE5CD,GADcf,KAAK6gB,UAAU7f,GAChBwb,gBAGjB,MADAxc,MAAK4d,GAAK7c,EACHf,KAAK4d,KAGpBhG,GAAMC,KAAKC,OAAOY,GAAKC,KAAK8C,YAAa/C,GAAKC,KAAK+H,uBAmBnDhI,GAAKC,KAAKgD,OAAS,SAAS2C,GACxB5F,GAAKC,KAAKgD,OAAOxD,WAAWjW,YAAYka,KAAKpc,KAAMse,GACnDte,KAAKme,GAAK,KACVne,KAAKyiB,UAAW,EAChBziB,KAAKie,iBAAmB,WAEpB,IAAK,GADD3X,GAAI,GAAIH,OACHnF,EAAI,EAAGA,EAAIhB,KAAK6gB,UAAU1f,OAAQH,IAAK,CAC5C,GAAIib,GAAUjc,KAAK6gB,UAAU7f,EAC7BsF,GAAE4V,KAAKD,EAAQO,iBAInB,MAFqB,IAAjBxc,KAAKyiB,UAAkBnc,EAAEoc,OAC7B1iB,KAAK4d,GAAKtX,EAAEga,KAAK,IACVtgB,KAAK4d,QAGK,KAAVU,OACuB,KAAnBA,EAAOqE,UACK,GAAnBrE,EAAOqE,WACP3iB,KAAKyiB,UAAW,IAG5B7K,GAAMC,KAAKC,OAAOY,GAAKC,KAAKgD,OAAQjD,GAAKC,KAAK+H,uBA2B9ChI,GAAKC,KAAKkD,gBAAkB,SAASyC,GACjC5F,GAAKC,KAAKkD,gBAAgB1D,WAAWjW,YAAYka,KAAKpc,MACtDA,KAAKme,GAAK,KACVne,KAAK4d,GAAK,GACV5d,KAAK4iB,YAAa,EAClB5iB,KAAK+gB,WAAa,KAWlB/gB,KAAK6iB,cAAgB,SAASC,EAAgBC,EAAUhC,GACpD/gB,KAAKme,GAAK4E,EACV/iB,KAAK4iB,WAAaE,EAClB9iB,KAAK+gB,WAAaA,EACd/gB,KAAK4iB,YACL5iB,KAAK4d,GAAK5d,KAAK+gB,WAAWvE,gBAC1Bxc,KAAK+d,KAAO,KACZ/d,KAAKge,YAAa,IAElBhe,KAAK4d,GAAK,KACV5d,KAAK+d,KAAOgD,EAAWvE,gBACvBxc,KAAK+d,KAAO/d,KAAK+d,KAAK5G,QAAQ,MAAO4L,GACrC/iB,KAAKge,YAAa,IAI1Bhe,KAAKie,iBAAmB,WACpB,MAAOje,MAAK4d,QAGK,KAAVU,QACqB,KAAjBA,EAAY,MACnBte,KAAKme,GAAKG,EAAY,SAEO,KAAtBA,EAAiB,WACxBte,KAAK4iB,WAAatE,EAAiB,cAEX,KAAjBA,EAAY,MACnBte,KAAK+gB,WAAazC,EAAY,IAC9Bte,KAAK6iB,cAAc7iB,KAAK4iB,WAAY5iB,KAAKme,GAAIne,KAAK+gB,eAI9DnJ,GAAMC,KAAKC,OAAOY,GAAKC,KAAKkD,gBAAiBnD,GAAKC,KAAK+E,WASvD,IAAIsF,IAAiC,SAAUC,GAE3C,QAASD,GAAgBlP,GACrB,GAAIoP,GAAQD,EAAO7G,KAAKpc,OAASA,IAejC,OAXI8T,KAEmB,gBAARA,GACPoP,EAAMC,SAASrP,IAEVkP,EAAgBI,sBAAsBtP,IAC3CkP,EAAgBK,qBAAqBvP,KAErCoP,EAAMI,oBAAoBxP,IAG3BoP,EAyQX,MA1RAphB,GAAUkhB,EAAiBC,GA+C3BD,EAAgB5gB,UAAU+gB,SAAW,SAAUI,GAC3C,IACI,GAAIC,GAAU,EACVC,EAAkB,EAClBC,EAAQ,sCACRC,EAAMD,EAAMpL,KAAKiL,GAAOld,EAAI7G,OAAO+jB,GAAOxc,EAAOE,QAAQsc,GACzD5K,EAAOhP,EAAKnK,OAAOmkB,EAKvB,IAHwB,IAApBhL,EAAKrR,IAAInG,SACTwX,EAAOA,EAAKrR,IAAI,GAAGA,IAAI,IAEH,IAApBqR,EAAKrR,IAAInG,OAAc,CAEvBqiB,EAAU7K,EAAKrR,IAAI,GAAGyD,oBACtB/K,KAAKE,EAAIyC,EAAY6gB,EAAS,IAC9BC,EAAkB9K,EAAKrR,IAAI,GAAGyD,oBAC9B/K,KAAKqL,EAAIjK,SAASqiB,EAAiB,GACnC,IAAIG,GAAmBjL,EAAKrR,IAAI,GAAGyD,mBACnC/K,MAAK+B,EAAIY,EAAYihB,EAAkB,GACvC,IAAIC,GAASlL,EAAKrR,IAAI,GAAGyD,mBACzB/K,MAAKoG,EAAIzD,EAAYkhB,EAAQ,GAC7B,IAAIC,GAASnL,EAAKrR,IAAI,GAAGyD,mBACzB/K,MAAK6O,EAAIlM,EAAYmhB,EAAQ,GAC7B,IAAIC,GAAYpL,EAAKrR,IAAI,GAAGyD,mBAC5B/K,MAAK4U,KAAOjS,EAAYohB,EAAW,GACnC,IAAIC,GAAYrL,EAAKrR,IAAI,GAAGyD,mBAC5B/K,MAAK6U,KAAOlS,EAAYqhB,EAAW,GACnC,IAAIC,GAActL,EAAKrR,IAAI,GAAGyD,mBAC9B/K,MAAK8U,MAAQnS,EAAYshB,EAAa,QAErC,IAAwB,IAApBtL,EAAKrR,IAAInG,OAUd,OAAO,CARP,IAAI+iB,GAAavL,EAAKrR,IAAI,GACtB6c,EAAWD,EAAW5c,IAAI,EAC9Bkc,GAAUW,EAAS7c,IAAI,GAAGyD,oBAC1B/K,KAAKE,EAAIyC,EAAY6gB,EAAS,IAC9BC,EAAkBU,EAAS7c,IAAI,GAAGyD,oBAClC/K,KAAKqL,EAAIjK,SAASqiB,EAAiB,IAKvC,OAAO,EAEX,MAAOhL,GACH,OAAO,IAqBfuK,EAAgB5gB,UAAUgiB,kBAAoB,WAC1C,GAAIC,IACAC,OACI,GAAI5L,IAAKC,KAAKoB,YAAawK,IAAK,IAChC,GAAI7L,IAAKC,KAAKoB,YAAayK,OAAQxkB,KAAKE,IACxC,GAAIwY,IAAKC,KAAKoB,YAAawK,IAAKvkB,KAAKqL,IACrC,GAAIqN,IAAKC,KAAKoB,YAAayK,OAAQxkB,KAAK+B,IACxC,GAAI2W,IAAKC,KAAKoB,YAAayK,OAAQxkB,KAAKoG,IACxC,GAAIsS,IAAKC,KAAKoB,YAAayK,OAAQxkB,KAAK6O,IACxC,GAAI6J,IAAKC,KAAKoB,YAAayK,OAAQxkB,KAAK4U,OACxC,GAAI8D,IAAKC,KAAKoB,YAAayK,OAAQxkB,KAAK6U,OACxC,GAAI6D,IAAKC,KAAKoB,YAAayK,OAAQxkB,KAAK8U,SAIhD,OADU,IAAI4D,IAAKC,KAAK8C,YAAY4I,GACzB7H,iBAOfwG,EAAgB5gB,UAAUqiB,qBAAuB,WAC7C,MAAO3jB,GAAQd,KAAKokB,sBAsBxBpB,EAAgB5gB,UAAUsiB,iBAAmB,WACzC,GAAIC,GAAiB,GAAIjM,IAAKC,KAAK8C,aAC/B6I,OACI,GAAI5L,IAAKC,KAAK4B,qBAAsB6H,IAAK,yBACzC,GAAI1J,IAAKC,KAAK0B,WAGlBuK,EAAkB,GAAIlM,IAAKC,KAAK8C,aAChC6I,OACI,GAAI5L,IAAKC,KAAKoB,YAAayK,OAAQxkB,KAAKE,IACxC,GAAIwY,IAAKC,KAAKoB,YAAawK,IAAKvkB,KAAKqL,OAGzC6Y,EAAa,GAAIxL,IAAKC,KAAKsB,cAC3BzT,IAAK,KAAOoe,EAAgBpI,iBAQhC,OANU,IAAI9D,IAAKC,KAAK8C,aACpB6I,OACIK,EACAT,KAGG1H,iBAOfwG,EAAgB5gB,UAAUyiB,oBAAsB,WAC5C,MAAO/jB,GAAQd,KAAK0kB,qBAUxB1B,EAAgB8B,SAAW,SAAUzlB,EAAK0lB,GAEtC,GADAA,EAAQA,GAAS,IACZ1lB,EACD,MAAOA,EAEX,IAAI2lB,GAAQ,QAAUD,EAAQ,oBAAsBA,EAAQ,IAC5D,OAAO1lB,GAAI2Z,MAAMiM,OAAOD,EAAO,MAAM1E,KAAK,OAO9C0C,EAAgB5gB,UAAU8iB,cAAgB,WACtC,GAAIpR,GAAM,mCAGV,OAFAA,IAAOkP,EAAgB8B,SAAS9kB,KAAKykB,wBAA0B,KAC/D3Q,GAAO,iCAQXkP,EAAgB5gB,UAAU+iB,aAAe,WACrC,GAAIrR,GAAM,8BAGV,OAFAA,IAAOkP,EAAgB8B,SAAS9kB,KAAK6kB,uBAAyB,KAC9D/Q,GAAO,4BAcXkP,EAAgBK,qBAAuB,SAAUxkB,GAE7C,MADAA,GAAMA,MACEA,EAAI8G,eAAe,MACvB9G,EAAI8G,eAAe,MAW3Bqd,EAAgBI,sBAAwB,SAAUvkB,GAE9C,MADAA,GAAMA,MACEA,EAAI8G,eAAe,MACvB9G,EAAI8G,eAAe,MACnB9G,EAAI8G,eAAe,MACnB9G,EAAI8G,eAAe,MACnB9G,EAAI8G,eAAe,MACnB9G,EAAI8G,eAAe,SACnB9G,EAAI8G,eAAe,SACnB9G,EAAI8G,eAAe,UAQ3Bqd,EAAgB5gB,UAAUkhB,oBAAsB,SAAUzkB,GACtDmB,KAAKE,EAAIrB,EAAIqB,EACbF,KAAKqL,EAAIxM,EAAIwM,EACTxM,EAAI8G,eAAe,OACnB3F,KAAK+B,EAAIlD,EAAIkD,EACb/B,KAAKoG,EAAIvH,EAAIuH,EACbpG,KAAK6O,EAAIhQ,EAAIgQ,EACb7O,KAAK4U,KAAO/V,EAAI+V,KAChB5U,KAAK6U,KAAOhW,EAAIgW,KAChB7U,KAAK8U,MAAQjW,EAAIiW,QAGlBkO,GACTrO,IAWEyQ,GAA2B,WAC3B,QAASA,GAAUf,GACfA,EAAUA,MACVrkB,KAAKqlB,iBAAmBjkB,SAASijB,EAAQgB,iBAAkB,KAAO,KAClErlB,KAAKslB,wBAA0BjB,EAAQiB,yBAA2B,SAClEtlB,KAAKgS,IAAMqS,EAAQrS,MAAO,EAE1BhS,KAAK8T,IAAM,KAoKf,MA3JAsR,GAAUhjB,UAAUmjB,OAAS,SAAUzR,GAC/B9T,KAAKgS,KAAOhS,KAAK8T,KACjBrP,QAAQ+gB,KAAK,+CAEjBxlB,KAAK8T,IAAM,GAAIkP,IAAgBlP,IAOnCsR,EAAUhjB,UAAU1C,cAAgB,SAAU+lB,GAE1CzlB,KAAKulB,OAAOE,IAOhBL,EAAUhjB,UAAU9C,aAAe,SAAUomB,GAEzC1lB,KAAKulB,OAAOG,IAUhBN,EAAUhjB,UAAUzC,QAAU,SAAUN,GAEpC,IACI,MAAOW,MAAK2lB,SAAShmB,QAAQ6B,EAASnC,IAE1C,MAAOoZ,GACH,OAAO,IAWf2M,EAAUhjB,UAAU7C,QAAU,SAAUF,GAEpC,IACI,MAAOyB,GAAQd,KAAK2lB,SAASpmB,QAAQF,IAEzC,MAAOoZ,GACH,OAAO,IAWf2M,EAAUhjB,UAAUyU,KAAO,SAAUxX,EAAKyX,EAAcC,GAEpD,IACI,MAAOjW,GAAQd,KAAK2lB,SAAS9O,KAAKxX,EAAKyX,EAAcC,IAEzD,MAAO0B,GACH,OAAO,IAWf2M,EAAUhjB,UAAU6U,OAAS,SAAU5X,EAAK6X,EAAWJ,GAEnD,IACI,MAAO9W,MAAK2lB,SAAS1O,OAAO5X,EAAKmC,EAAS0V,GAAYJ,GAE1D,MAAO2B,GACH,OAAO,IAWf2M,EAAUhjB,UAAUujB,OAAS,SAAUC,GAEnC,IAAK5lB,KAAK8T,IAAK,CAGX,GADA9T,KAAK8T,IAAM,GAAIkP,IACX4C,GAA+B,yBAAtBpe,SAAS4U,KAAKwJ,GAEvB,WADA5lB,MAAK8T,IAAIyC,cAAcvW,KAAKqlB,iBAAkBrlB,KAAKslB,wBAAyBM,EAIhF5lB,MAAK8T,IAAIiC,SAAS/V,KAAKqlB,iBAAkBrlB,KAAKslB,yBAElD,MAAOtlB,MAAK8T,KAQhBsR,EAAUhjB,UAAU8iB,cAAgB,WAEhC,MAAOllB,MAAK2lB,SAAST,iBAQzBE,EAAUhjB,UAAUyjB,iBAAmB,WAEnC,MAAO7lB,MAAK2lB,SAASlB,wBAQzBW,EAAUhjB,UAAU+iB,aAAe,WAE/B,MAAOnlB,MAAK2lB,SAASR,gBAQzBC,EAAUhjB,UAAU0jB,gBAAkB,WAElC,MAAO9lB,MAAK2lB,SAASd,uBAEzBO,EAAUW,QAAU,aACbX,IAGXrR,QAAOqR,UAAYA,GAEnB9mB,EAAQ8mB,UAAYA,GACpB9mB,EAAQS,QAAUqmB,GAElB3mB,OAAOC,eAAeJ,EAAS,cAAgBK,OAAO,SFkDnD","file":"jsencrypt.js?ef9dbd2226cfd03c3fb1","sourcesContent":["webpackJsonp([6],{\n\n/***/ 248:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(32);\n\n\n/***/ }),\n\n/***/ 32:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _jsencrypt = __webpack_require__(36);\n\nvar _jsencrypt2 = _interopRequireDefault(_jsencrypt);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar crypt = new _jsencrypt2.default();\nexports.default = {\n\tencode: function encode(publickey, str) {\n\t\tcrypt.setPublicKey('-----BEGIN PUBLIC KEY-----' + publickey + '-----END PUBLIC KEY-----');\n\t\treturn crypt.encrypt(str);\n\t},\n\tdecode: function decode(privatekey, str) {\n\t\tcrypt.setPrivateKey('-----BEGIN RSA PRIVATE KEY-----' + privatekey + '-----END RSA PRIVATE KEY-----');\n\t\treturn crypt.decrypt(encrypted);\n\t}\n};\n\n/***/ }),\n\n/***/ 36:\n/***/ (function(module, exports, __webpack_require__) {\n\n(function (global, factory) {\n\t true ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(factory((global.JSEncrypt = {})));\n}(this, (function (exports) { 'use strict';\n\nvar BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\nfunction int2char(n) {\n    return BI_RM.charAt(n);\n}\n//#region BIT_OPERATIONS\n// (public) this & a\nfunction op_and(x, y) {\n    return x & y;\n}\n// (public) this | a\nfunction op_or(x, y) {\n    return x | y;\n}\n// (public) this ^ a\nfunction op_xor(x, y) {\n    return x ^ y;\n}\n// (public) this & ~a\nfunction op_andnot(x, y) {\n    return x & ~y;\n}\n// return index of lowest 1-bit in x, x < 2^31\nfunction lbit(x) {\n    if (x == 0) {\n        return -1;\n    }\n    var r = 0;\n    if ((x & 0xffff) == 0) {\n        x >>= 16;\n        r += 16;\n    }\n    if ((x & 0xff) == 0) {\n        x >>= 8;\n        r += 8;\n    }\n    if ((x & 0xf) == 0) {\n        x >>= 4;\n        r += 4;\n    }\n    if ((x & 3) == 0) {\n        x >>= 2;\n        r += 2;\n    }\n    if ((x & 1) == 0) {\n        ++r;\n    }\n    return r;\n}\n// return number of 1 bits in x\nfunction cbit(x) {\n    var r = 0;\n    while (x != 0) {\n        x &= x - 1;\n        ++r;\n    }\n    return r;\n}\n//#endregion BIT_OPERATIONS\n\nvar b64map = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nvar b64pad = \"=\";\nfunction hex2b64(h) {\n    var i;\n    var c;\n    var ret = \"\";\n    for (i = 0; i + 3 <= h.length; i += 3) {\n        c = parseInt(h.substring(i, i + 3), 16);\n        ret += b64map.charAt(c >> 6) + b64map.charAt(c & 63);\n    }\n    if (i + 1 == h.length) {\n        c = parseInt(h.substring(i, i + 1), 16);\n        ret += b64map.charAt(c << 2);\n    }\n    else if (i + 2 == h.length) {\n        c = parseInt(h.substring(i, i + 2), 16);\n        ret += b64map.charAt(c >> 2) + b64map.charAt((c & 3) << 4);\n    }\n    while ((ret.length & 3) > 0) {\n        ret += b64pad;\n    }\n    return ret;\n}\n// convert a base64 string to hex\nfunction b64tohex(s) {\n    var ret = \"\";\n    var i;\n    var k = 0; // b64 state, 0-3\n    var slop = 0;\n    for (i = 0; i < s.length; ++i) {\n        if (s.charAt(i) == b64pad) {\n            break;\n        }\n        var v = b64map.indexOf(s.charAt(i));\n        if (v < 0) {\n            continue;\n        }\n        if (k == 0) {\n            ret += int2char(v >> 2);\n            slop = v & 3;\n            k = 1;\n        }\n        else if (k == 1) {\n            ret += int2char((slop << 2) | (v >> 4));\n            slop = v & 0xf;\n            k = 2;\n        }\n        else if (k == 2) {\n            ret += int2char(slop);\n            ret += int2char(v >> 2);\n            slop = v & 3;\n            k = 3;\n        }\n        else {\n            ret += int2char((slop << 2) | (v >> 4));\n            ret += int2char(v & 0xf);\n            k = 0;\n        }\n    }\n    if (k == 1) {\n        ret += int2char(slop << 2);\n    }\n    return ret;\n}\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\n\n// Hex JavaScript decoder\n// Copyright (c) 2008-2013 Lapo Luchini <lapo@lapo.it>\n// Permission to use, copy, modify, and/or distribute this software for any\n// purpose with or without fee is hereby granted, provided that the above\n// copyright notice and this permission notice appear in all copies.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n/*jshint browser: true, strict: true, immed: true, latedef: true, undef: true, regexdash: false */\nvar decoder;\nvar Hex = {\n    decode: function (a) {\n        var i;\n        if (decoder === undefined) {\n            var hex = \"0123456789ABCDEF\";\n            var ignore = \" \\f\\n\\r\\t\\u00A0\\u2028\\u2029\";\n            decoder = {};\n            for (i = 0; i < 16; ++i) {\n                decoder[hex.charAt(i)] = i;\n            }\n            hex = hex.toLowerCase();\n            for (i = 10; i < 16; ++i) {\n                decoder[hex.charAt(i)] = i;\n            }\n            for (i = 0; i < ignore.length; ++i) {\n                decoder[ignore.charAt(i)] = -1;\n            }\n        }\n        var out = [];\n        var bits = 0;\n        var char_count = 0;\n        for (i = 0; i < a.length; ++i) {\n            var c = a.charAt(i);\n            if (c == \"=\") {\n                break;\n            }\n            c = decoder[c];\n            if (c == -1) {\n                continue;\n            }\n            if (c === undefined) {\n                throw new Error(\"Illegal character at offset \" + i);\n            }\n            bits |= c;\n            if (++char_count >= 2) {\n                out[out.length] = bits;\n                bits = 0;\n                char_count = 0;\n            }\n            else {\n                bits <<= 4;\n            }\n        }\n        if (char_count) {\n            throw new Error(\"Hex encoding incomplete: 4 bits missing\");\n        }\n        return out;\n    }\n};\n\n// Base64 JavaScript decoder\n// Copyright (c) 2008-2013 Lapo Luchini <lapo@lapo.it>\n// Permission to use, copy, modify, and/or distribute this software for any\n// purpose with or without fee is hereby granted, provided that the above\n// copyright notice and this permission notice appear in all copies.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n/*jshint browser: true, strict: true, immed: true, latedef: true, undef: true, regexdash: false */\nvar decoder$1;\nvar Base64 = {\n    decode: function (a) {\n        var i;\n        if (decoder$1 === undefined) {\n            var b64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n            var ignore = \"= \\f\\n\\r\\t\\u00A0\\u2028\\u2029\";\n            decoder$1 = Object.create(null);\n            for (i = 0; i < 64; ++i) {\n                decoder$1[b64.charAt(i)] = i;\n            }\n            for (i = 0; i < ignore.length; ++i) {\n                decoder$1[ignore.charAt(i)] = -1;\n            }\n        }\n        var out = [];\n        var bits = 0;\n        var char_count = 0;\n        for (i = 0; i < a.length; ++i) {\n            var c = a.charAt(i);\n            if (c == \"=\") {\n                break;\n            }\n            c = decoder$1[c];\n            if (c == -1) {\n                continue;\n            }\n            if (c === undefined) {\n                throw new Error(\"Illegal character at offset \" + i);\n            }\n            bits |= c;\n            if (++char_count >= 4) {\n                out[out.length] = (bits >> 16);\n                out[out.length] = (bits >> 8) & 0xFF;\n                out[out.length] = bits & 0xFF;\n                bits = 0;\n                char_count = 0;\n            }\n            else {\n                bits <<= 6;\n            }\n        }\n        switch (char_count) {\n            case 1:\n                throw new Error(\"Base64 encoding incomplete: at least 2 bits missing\");\n            case 2:\n                out[out.length] = (bits >> 10);\n                break;\n            case 3:\n                out[out.length] = (bits >> 16);\n                out[out.length] = (bits >> 8) & 0xFF;\n                break;\n        }\n        return out;\n    },\n    re: /-----BEGIN [^-]+-----([A-Za-z0-9+\\/=\\s]+)-----END [^-]+-----|begin-base64[^\\n]+\\n([A-Za-z0-9+\\/=\\s]+)====/,\n    unarmor: function (a) {\n        var m = Base64.re.exec(a);\n        if (m) {\n            if (m[1]) {\n                a = m[1];\n            }\n            else if (m[2]) {\n                a = m[2];\n            }\n            else {\n                throw new Error(\"RegExp out of sync\");\n            }\n        }\n        return Base64.decode(a);\n    }\n};\n\n// Big integer base-10 printing library\n// Copyright (c) 2014 Lapo Luchini <lapo@lapo.it>\n// Permission to use, copy, modify, and/or distribute this software for any\n// purpose with or without fee is hereby granted, provided that the above\n// copyright notice and this permission notice appear in all copies.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n/*jshint browser: true, strict: true, immed: true, latedef: true, undef: true, regexdash: false */\nvar max = 10000000000000; // biggest integer that can still fit 2^53 when multiplied by 256\nvar Int10 = /** @class */ (function () {\n    function Int10(value) {\n        this.buf = [+value || 0];\n    }\n    Int10.prototype.mulAdd = function (m, c) {\n        // assert(m <= 256)\n        var b = this.buf;\n        var l = b.length;\n        var i;\n        var t;\n        for (i = 0; i < l; ++i) {\n            t = b[i] * m + c;\n            if (t < max) {\n                c = 0;\n            }\n            else {\n                c = 0 | (t / max);\n                t -= c * max;\n            }\n            b[i] = t;\n        }\n        if (c > 0) {\n            b[i] = c;\n        }\n    };\n    Int10.prototype.sub = function (c) {\n        // assert(m <= 256)\n        var b = this.buf;\n        var l = b.length;\n        var i;\n        var t;\n        for (i = 0; i < l; ++i) {\n            t = b[i] - c;\n            if (t < 0) {\n                t += max;\n                c = 1;\n            }\n            else {\n                c = 0;\n            }\n            b[i] = t;\n        }\n        while (b[b.length - 1] === 0) {\n            b.pop();\n        }\n    };\n    Int10.prototype.toString = function (base) {\n        if ((base || 10) != 10) {\n            throw new Error(\"only base 10 is supported\");\n        }\n        var b = this.buf;\n        var s = b[b.length - 1].toString();\n        for (var i = b.length - 2; i >= 0; --i) {\n            s += (max + b[i]).toString().substring(1);\n        }\n        return s;\n    };\n    Int10.prototype.valueOf = function () {\n        var b = this.buf;\n        var v = 0;\n        for (var i = b.length - 1; i >= 0; --i) {\n            v = v * max + b[i];\n        }\n        return v;\n    };\n    Int10.prototype.simplify = function () {\n        var b = this.buf;\n        return (b.length == 1) ? b[0] : this;\n    };\n    return Int10;\n}());\n\n// ASN.1 JavaScript decoder\nvar ellipsis = \"\\u2026\";\nvar reTimeS = /^(\\d\\d)(0[1-9]|1[0-2])(0[1-9]|[12]\\d|3[01])([01]\\d|2[0-3])(?:([0-5]\\d)(?:([0-5]\\d)(?:[.,](\\d{1,3}))?)?)?(Z|[-+](?:[0]\\d|1[0-2])([0-5]\\d)?)?$/;\nvar reTimeL = /^(\\d\\d\\d\\d)(0[1-9]|1[0-2])(0[1-9]|[12]\\d|3[01])([01]\\d|2[0-3])(?:([0-5]\\d)(?:([0-5]\\d)(?:[.,](\\d{1,3}))?)?)?(Z|[-+](?:[0]\\d|1[0-2])([0-5]\\d)?)?$/;\nfunction stringCut(str, len) {\n    if (str.length > len) {\n        str = str.substring(0, len) + ellipsis;\n    }\n    return str;\n}\nvar Stream = /** @class */ (function () {\n    function Stream(enc, pos) {\n        this.hexDigits = \"0123456789ABCDEF\";\n        if (enc instanceof Stream) {\n            this.enc = enc.enc;\n            this.pos = enc.pos;\n        }\n        else {\n            // enc should be an array or a binary string\n            this.enc = enc;\n            this.pos = pos;\n        }\n    }\n    Stream.prototype.get = function (pos) {\n        if (pos === undefined) {\n            pos = this.pos++;\n        }\n        if (pos >= this.enc.length) {\n            throw new Error(\"Requesting byte offset \" + pos + \" on a stream of length \" + this.enc.length);\n        }\n        return (\"string\" === typeof this.enc) ? this.enc.charCodeAt(pos) : this.enc[pos];\n    };\n    Stream.prototype.hexByte = function (b) {\n        return this.hexDigits.charAt((b >> 4) & 0xF) + this.hexDigits.charAt(b & 0xF);\n    };\n    Stream.prototype.hexDump = function (start, end, raw) {\n        var s = \"\";\n        for (var i = start; i < end; ++i) {\n            s += this.hexByte(this.get(i));\n            if (raw !== true) {\n                switch (i & 0xF) {\n                    case 0x7:\n                        s += \"  \";\n                        break;\n                    case 0xF:\n                        s += \"\\n\";\n                        break;\n                    default:\n                        s += \" \";\n                }\n            }\n        }\n        return s;\n    };\n    Stream.prototype.isASCII = function (start, end) {\n        for (var i = start; i < end; ++i) {\n            var c = this.get(i);\n            if (c < 32 || c > 176) {\n                return false;\n            }\n        }\n        return true;\n    };\n    Stream.prototype.parseStringISO = function (start, end) {\n        var s = \"\";\n        for (var i = start; i < end; ++i) {\n            s += String.fromCharCode(this.get(i));\n        }\n        return s;\n    };\n    Stream.prototype.parseStringUTF = function (start, end) {\n        var s = \"\";\n        for (var i = start; i < end;) {\n            var c = this.get(i++);\n            if (c < 128) {\n                s += String.fromCharCode(c);\n            }\n            else if ((c > 191) && (c < 224)) {\n                s += String.fromCharCode(((c & 0x1F) << 6) | (this.get(i++) & 0x3F));\n            }\n            else {\n                s += String.fromCharCode(((c & 0x0F) << 12) | ((this.get(i++) & 0x3F) << 6) | (this.get(i++) & 0x3F));\n            }\n        }\n        return s;\n    };\n    Stream.prototype.parseStringBMP = function (start, end) {\n        var str = \"\";\n        var hi;\n        var lo;\n        for (var i = start; i < end;) {\n            hi = this.get(i++);\n            lo = this.get(i++);\n            str += String.fromCharCode((hi << 8) | lo);\n        }\n        return str;\n    };\n    Stream.prototype.parseTime = function (start, end, shortYear) {\n        var s = this.parseStringISO(start, end);\n        var m = (shortYear ? reTimeS : reTimeL).exec(s);\n        if (!m) {\n            return \"Unrecognized time: \" + s;\n        }\n        if (shortYear) {\n            // to avoid querying the timer, use the fixed range [1970, 2069]\n            // it will conform with ITU X.400 [-10, +40] sliding window until 2030\n            m[1] = +m[1];\n            m[1] += (+m[1] < 70) ? 2000 : 1900;\n        }\n        s = m[1] + \"-\" + m[2] + \"-\" + m[3] + \" \" + m[4];\n        if (m[5]) {\n            s += \":\" + m[5];\n            if (m[6]) {\n                s += \":\" + m[6];\n                if (m[7]) {\n                    s += \".\" + m[7];\n                }\n            }\n        }\n        if (m[8]) {\n            s += \" UTC\";\n            if (m[8] != \"Z\") {\n                s += m[8];\n                if (m[9]) {\n                    s += \":\" + m[9];\n                }\n            }\n        }\n        return s;\n    };\n    Stream.prototype.parseInteger = function (start, end) {\n        var v = this.get(start);\n        var neg = (v > 127);\n        var pad = neg ? 255 : 0;\n        var len;\n        var s = \"\";\n        // skip unuseful bits (not allowed in DER)\n        while (v == pad && ++start < end) {\n            v = this.get(start);\n        }\n        len = end - start;\n        if (len === 0) {\n            return neg ? -1 : 0;\n        }\n        // show bit length of huge integers\n        if (len > 4) {\n            s = v;\n            len <<= 3;\n            while (((+s ^ pad) & 0x80) == 0) {\n                s = +s << 1;\n                --len;\n            }\n            s = \"(\" + len + \" bit)\\n\";\n        }\n        // decode the integer\n        if (neg) {\n            v = v - 256;\n        }\n        var n = new Int10(v);\n        for (var i = start + 1; i < end; ++i) {\n            n.mulAdd(256, this.get(i));\n        }\n        return s + n.toString();\n    };\n    Stream.prototype.parseBitString = function (start, end, maxLength) {\n        var unusedBit = this.get(start);\n        var lenBit = ((end - start - 1) << 3) - unusedBit;\n        var intro = \"(\" + lenBit + \" bit)\\n\";\n        var s = \"\";\n        for (var i = start + 1; i < end; ++i) {\n            var b = this.get(i);\n            var skip = (i == end - 1) ? unusedBit : 0;\n            for (var j = 7; j >= skip; --j) {\n                s += (b >> j) & 1 ? \"1\" : \"0\";\n            }\n            if (s.length > maxLength) {\n                return intro + stringCut(s, maxLength);\n            }\n        }\n        return intro + s;\n    };\n    Stream.prototype.parseOctetString = function (start, end, maxLength) {\n        if (this.isASCII(start, end)) {\n            return stringCut(this.parseStringISO(start, end), maxLength);\n        }\n        var len = end - start;\n        var s = \"(\" + len + \" byte)\\n\";\n        maxLength /= 2; // we work in bytes\n        if (len > maxLength) {\n            end = start + maxLength;\n        }\n        for (var i = start; i < end; ++i) {\n            s += this.hexByte(this.get(i));\n        }\n        if (len > maxLength) {\n            s += ellipsis;\n        }\n        return s;\n    };\n    Stream.prototype.parseOID = function (start, end, maxLength) {\n        var s = \"\";\n        var n = new Int10();\n        var bits = 0;\n        for (var i = start; i < end; ++i) {\n            var v = this.get(i);\n            n.mulAdd(128, v & 0x7F);\n            bits += 7;\n            if (!(v & 0x80)) { // finished\n                if (s === \"\") {\n                    n = n.simplify();\n                    if (n instanceof Int10) {\n                        n.sub(80);\n                        s = \"2.\" + n.toString();\n                    }\n                    else {\n                        var m = n < 80 ? n < 40 ? 0 : 1 : 2;\n                        s = m + \".\" + (n - m * 40);\n                    }\n                }\n                else {\n                    s += \".\" + n.toString();\n                }\n                if (s.length > maxLength) {\n                    return stringCut(s, maxLength);\n                }\n                n = new Int10();\n                bits = 0;\n            }\n        }\n        if (bits > 0) {\n            s += \".incomplete\";\n        }\n        return s;\n    };\n    return Stream;\n}());\nvar ASN1 = /** @class */ (function () {\n    function ASN1(stream, header, length, tag, sub) {\n        if (!(tag instanceof ASN1Tag)) {\n            throw new Error(\"Invalid tag value.\");\n        }\n        this.stream = stream;\n        this.header = header;\n        this.length = length;\n        this.tag = tag;\n        this.sub = sub;\n    }\n    ASN1.prototype.typeName = function () {\n        switch (this.tag.tagClass) {\n            case 0: // universal\n                switch (this.tag.tagNumber) {\n                    case 0x00:\n                        return \"EOC\";\n                    case 0x01:\n                        return \"BOOLEAN\";\n                    case 0x02:\n                        return \"INTEGER\";\n                    case 0x03:\n                        return \"BIT_STRING\";\n                    case 0x04:\n                        return \"OCTET_STRING\";\n                    case 0x05:\n                        return \"NULL\";\n                    case 0x06:\n                        return \"OBJECT_IDENTIFIER\";\n                    case 0x07:\n                        return \"ObjectDescriptor\";\n                    case 0x08:\n                        return \"EXTERNAL\";\n                    case 0x09:\n                        return \"REAL\";\n                    case 0x0A:\n                        return \"ENUMERATED\";\n                    case 0x0B:\n                        return \"EMBEDDED_PDV\";\n                    case 0x0C:\n                        return \"UTF8String\";\n                    case 0x10:\n                        return \"SEQUENCE\";\n                    case 0x11:\n                        return \"SET\";\n                    case 0x12:\n                        return \"NumericString\";\n                    case 0x13:\n                        return \"PrintableString\"; // ASCII subset\n                    case 0x14:\n                        return \"TeletexString\"; // aka T61String\n                    case 0x15:\n                        return \"VideotexString\";\n                    case 0x16:\n                        return \"IA5String\"; // ASCII\n                    case 0x17:\n                        return \"UTCTime\";\n                    case 0x18:\n                        return \"GeneralizedTime\";\n                    case 0x19:\n                        return \"GraphicString\";\n                    case 0x1A:\n                        return \"VisibleString\"; // ASCII subset\n                    case 0x1B:\n                        return \"GeneralString\";\n                    case 0x1C:\n                        return \"UniversalString\";\n                    case 0x1E:\n                        return \"BMPString\";\n                }\n                return \"Universal_\" + this.tag.tagNumber.toString();\n            case 1:\n                return \"Application_\" + this.tag.tagNumber.toString();\n            case 2:\n                return \"[\" + this.tag.tagNumber.toString() + \"]\"; // Context\n            case 3:\n                return \"Private_\" + this.tag.tagNumber.toString();\n        }\n    };\n    ASN1.prototype.content = function (maxLength) {\n        if (this.tag === undefined) {\n            return null;\n        }\n        if (maxLength === undefined) {\n            maxLength = Infinity;\n        }\n        var content = this.posContent();\n        var len = Math.abs(this.length);\n        if (!this.tag.isUniversal()) {\n            if (this.sub !== null) {\n                return \"(\" + this.sub.length + \" elem)\";\n            }\n            return this.stream.parseOctetString(content, content + len, maxLength);\n        }\n        switch (this.tag.tagNumber) {\n            case 0x01: // BOOLEAN\n                return (this.stream.get(content) === 0) ? \"false\" : \"true\";\n            case 0x02: // INTEGER\n                return this.stream.parseInteger(content, content + len);\n            case 0x03: // BIT_STRING\n                return this.sub ? \"(\" + this.sub.length + \" elem)\" :\n                    this.stream.parseBitString(content, content + len, maxLength);\n            case 0x04: // OCTET_STRING\n                return this.sub ? \"(\" + this.sub.length + \" elem)\" :\n                    this.stream.parseOctetString(content, content + len, maxLength);\n            // case 0x05: // NULL\n            case 0x06: // OBJECT_IDENTIFIER\n                return this.stream.parseOID(content, content + len, maxLength);\n            // case 0x07: // ObjectDescriptor\n            // case 0x08: // EXTERNAL\n            // case 0x09: // REAL\n            // case 0x0A: // ENUMERATED\n            // case 0x0B: // EMBEDDED_PDV\n            case 0x10: // SEQUENCE\n            case 0x11: // SET\n                if (this.sub !== null) {\n                    return \"(\" + this.sub.length + \" elem)\";\n                }\n                else {\n                    return \"(no elem)\";\n                }\n            case 0x0C: // UTF8String\n                return stringCut(this.stream.parseStringUTF(content, content + len), maxLength);\n            case 0x12: // NumericString\n            case 0x13: // PrintableString\n            case 0x14: // TeletexString\n            case 0x15: // VideotexString\n            case 0x16: // IA5String\n            // case 0x19: // GraphicString\n            case 0x1A: // VisibleString\n                // case 0x1B: // GeneralString\n                // case 0x1C: // UniversalString\n                return stringCut(this.stream.parseStringISO(content, content + len), maxLength);\n            case 0x1E: // BMPString\n                return stringCut(this.stream.parseStringBMP(content, content + len), maxLength);\n            case 0x17: // UTCTime\n            case 0x18: // GeneralizedTime\n                return this.stream.parseTime(content, content + len, (this.tag.tagNumber == 0x17));\n        }\n        return null;\n    };\n    ASN1.prototype.toString = function () {\n        return this.typeName() + \"@\" + this.stream.pos + \"[header:\" + this.header + \",length:\" + this.length + \",sub:\" + ((this.sub === null) ? \"null\" : this.sub.length) + \"]\";\n    };\n    ASN1.prototype.toPrettyString = function (indent) {\n        if (indent === undefined) {\n            indent = \"\";\n        }\n        var s = indent + this.typeName() + \" @\" + this.stream.pos;\n        if (this.length >= 0) {\n            s += \"+\";\n        }\n        s += this.length;\n        if (this.tag.tagConstructed) {\n            s += \" (constructed)\";\n        }\n        else if ((this.tag.isUniversal() && ((this.tag.tagNumber == 0x03) || (this.tag.tagNumber == 0x04))) && (this.sub !== null)) {\n            s += \" (encapsulates)\";\n        }\n        s += \"\\n\";\n        if (this.sub !== null) {\n            indent += \"  \";\n            for (var i = 0, max = this.sub.length; i < max; ++i) {\n                s += this.sub[i].toPrettyString(indent);\n            }\n        }\n        return s;\n    };\n    ASN1.prototype.posStart = function () {\n        return this.stream.pos;\n    };\n    ASN1.prototype.posContent = function () {\n        return this.stream.pos + this.header;\n    };\n    ASN1.prototype.posEnd = function () {\n        return this.stream.pos + this.header + Math.abs(this.length);\n    };\n    ASN1.prototype.toHexString = function () {\n        return this.stream.hexDump(this.posStart(), this.posEnd(), true);\n    };\n    ASN1.decodeLength = function (stream) {\n        var buf = stream.get();\n        var len = buf & 0x7F;\n        if (len == buf) {\n            return len;\n        }\n        // no reason to use Int10, as it would be a huge buffer anyways\n        if (len > 6) {\n            throw new Error(\"Length over 48 bits not supported at position \" + (stream.pos - 1));\n        }\n        if (len === 0) {\n            return null;\n        } // undefined\n        buf = 0;\n        for (var i = 0; i < len; ++i) {\n            buf = (buf * 256) + stream.get();\n        }\n        return buf;\n    };\n    /**\n     * Retrieve the hexadecimal value (as a string) of the current ASN.1 element\n     * @returns {string}\n     * @public\n     */\n    ASN1.prototype.getHexStringValue = function () {\n        var hexString = this.toHexString();\n        var offset = this.header * 2;\n        var length = this.length * 2;\n        return hexString.substr(offset, length);\n    };\n    ASN1.decode = function (str) {\n        var stream;\n        if (!(str instanceof Stream)) {\n            stream = new Stream(str, 0);\n        }\n        else {\n            stream = str;\n        }\n        var streamStart = new Stream(stream);\n        var tag = new ASN1Tag(stream);\n        var len = ASN1.decodeLength(stream);\n        var start = stream.pos;\n        var header = start - streamStart.pos;\n        var sub = null;\n        var getSub = function () {\n            var ret = [];\n            if (len !== null) {\n                // definite length\n                var end = start + len;\n                while (stream.pos < end) {\n                    ret[ret.length] = ASN1.decode(stream);\n                }\n                if (stream.pos != end) {\n                    throw new Error(\"Content size is not correct for container starting at offset \" + start);\n                }\n            }\n            else {\n                // undefined length\n                try {\n                    for (;;) {\n                        var s = ASN1.decode(stream);\n                        if (s.tag.isEOC()) {\n                            break;\n                        }\n                        ret[ret.length] = s;\n                    }\n                    len = start - stream.pos; // undefined lengths are represented as negative values\n                }\n                catch (e) {\n                    throw new Error(\"Exception while decoding undefined length content: \" + e);\n                }\n            }\n            return ret;\n        };\n        if (tag.tagConstructed) {\n            // must have valid content\n            sub = getSub();\n        }\n        else if (tag.isUniversal() && ((tag.tagNumber == 0x03) || (tag.tagNumber == 0x04))) {\n            // sometimes BitString and OctetString are used to encapsulate ASN.1\n            try {\n                if (tag.tagNumber == 0x03) {\n                    if (stream.get() != 0) {\n                        throw new Error(\"BIT STRINGs with unused bits cannot encapsulate.\");\n                    }\n                }\n                sub = getSub();\n                for (var i = 0; i < sub.length; ++i) {\n                    if (sub[i].tag.isEOC()) {\n                        throw new Error(\"EOC is not supposed to be actual content.\");\n                    }\n                }\n            }\n            catch (e) {\n                // but silently ignore when they don't\n                sub = null;\n            }\n        }\n        if (sub === null) {\n            if (len === null) {\n                throw new Error(\"We can't skip over an invalid tag with undefined length at offset \" + start);\n            }\n            stream.pos = start + Math.abs(len);\n        }\n        return new ASN1(streamStart, header, len, tag, sub);\n    };\n    return ASN1;\n}());\nvar ASN1Tag = /** @class */ (function () {\n    function ASN1Tag(stream) {\n        var buf = stream.get();\n        this.tagClass = buf >> 6;\n        this.tagConstructed = ((buf & 0x20) !== 0);\n        this.tagNumber = buf & 0x1F;\n        if (this.tagNumber == 0x1F) { // long tag\n            var n = new Int10();\n            do {\n                buf = stream.get();\n                n.mulAdd(128, buf & 0x7F);\n            } while (buf & 0x80);\n            this.tagNumber = n.simplify();\n        }\n    }\n    ASN1Tag.prototype.isUniversal = function () {\n        return this.tagClass === 0x00;\n    };\n    ASN1Tag.prototype.isEOC = function () {\n        return this.tagClass === 0x00 && this.tagNumber === 0x00;\n    };\n    return ASN1Tag;\n}());\n\n// Copyright (c) 2005  Tom Wu\n// Bits per digit\nvar dbits;\n// JavaScript engine analysis\nvar canary = 0xdeadbeefcafe;\nvar j_lm = ((canary & 0xffffff) == 0xefcafe);\n//#region\nvar lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\nvar lplim = (1 << 26) / lowprimes[lowprimes.length - 1];\n//#endregion\n// (public) Constructor\nvar BigInteger = /** @class */ (function () {\n    function BigInteger(a, b, c) {\n        if (a != null) {\n            if (\"number\" == typeof a) {\n                this.fromNumber(a, b, c);\n            }\n            else if (b == null && \"string\" != typeof a) {\n                this.fromString(a, 256);\n            }\n            else {\n                this.fromString(a, b);\n            }\n        }\n    }\n    //#region PUBLIC\n    // BigInteger.prototype.toString = bnToString;\n    // (public) return string representation in given radix\n    BigInteger.prototype.toString = function (b) {\n        if (this.s < 0) {\n            return \"-\" + this.negate().toString(b);\n        }\n        var k;\n        if (b == 16) {\n            k = 4;\n        }\n        else if (b == 8) {\n            k = 3;\n        }\n        else if (b == 2) {\n            k = 1;\n        }\n        else if (b == 32) {\n            k = 5;\n        }\n        else if (b == 4) {\n            k = 2;\n        }\n        else {\n            return this.toRadix(b);\n        }\n        var km = (1 << k) - 1;\n        var d;\n        var m = false;\n        var r = \"\";\n        var i = this.t;\n        var p = this.DB - (i * this.DB) % k;\n        if (i-- > 0) {\n            if (p < this.DB && (d = this[i] >> p) > 0) {\n                m = true;\n                r = int2char(d);\n            }\n            while (i >= 0) {\n                if (p < k) {\n                    d = (this[i] & ((1 << p) - 1)) << (k - p);\n                    d |= this[--i] >> (p += this.DB - k);\n                }\n                else {\n                    d = (this[i] >> (p -= k)) & km;\n                    if (p <= 0) {\n                        p += this.DB;\n                        --i;\n                    }\n                }\n                if (d > 0) {\n                    m = true;\n                }\n                if (m) {\n                    r += int2char(d);\n                }\n            }\n        }\n        return m ? r : \"0\";\n    };\n    // BigInteger.prototype.negate = bnNegate;\n    // (public) -this\n    BigInteger.prototype.negate = function () {\n        var r = nbi();\n        BigInteger.ZERO.subTo(this, r);\n        return r;\n    };\n    // BigInteger.prototype.abs = bnAbs;\n    // (public) |this|\n    BigInteger.prototype.abs = function () {\n        return (this.s < 0) ? this.negate() : this;\n    };\n    // BigInteger.prototype.compareTo = bnCompareTo;\n    // (public) return + if this > a, - if this < a, 0 if equal\n    BigInteger.prototype.compareTo = function (a) {\n        var r = this.s - a.s;\n        if (r != 0) {\n            return r;\n        }\n        var i = this.t;\n        r = i - a.t;\n        if (r != 0) {\n            return (this.s < 0) ? -r : r;\n        }\n        while (--i >= 0) {\n            if ((r = this[i] - a[i]) != 0) {\n                return r;\n            }\n        }\n        return 0;\n    };\n    // BigInteger.prototype.bitLength = bnBitLength;\n    // (public) return the number of bits in \"this\"\n    BigInteger.prototype.bitLength = function () {\n        if (this.t <= 0) {\n            return 0;\n        }\n        return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ (this.s & this.DM));\n    };\n    // BigInteger.prototype.mod = bnMod;\n    // (public) this mod a\n    BigInteger.prototype.mod = function (a) {\n        var r = nbi();\n        this.abs().divRemTo(a, null, r);\n        if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) {\n            a.subTo(r, r);\n        }\n        return r;\n    };\n    // BigInteger.prototype.modPowInt = bnModPowInt;\n    // (public) this^e % m, 0 <= e < 2^32\n    BigInteger.prototype.modPowInt = function (e, m) {\n        var z;\n        if (e < 256 || m.isEven()) {\n            z = new Classic(m);\n        }\n        else {\n            z = new Montgomery(m);\n        }\n        return this.exp(e, z);\n    };\n    // BigInteger.prototype.clone = bnClone;\n    // (public)\n    BigInteger.prototype.clone = function () {\n        var r = nbi();\n        this.copyTo(r);\n        return r;\n    };\n    // BigInteger.prototype.intValue = bnIntValue;\n    // (public) return value as integer\n    BigInteger.prototype.intValue = function () {\n        if (this.s < 0) {\n            if (this.t == 1) {\n                return this[0] - this.DV;\n            }\n            else if (this.t == 0) {\n                return -1;\n            }\n        }\n        else if (this.t == 1) {\n            return this[0];\n        }\n        else if (this.t == 0) {\n            return 0;\n        }\n        // assumes 16 < DB < 32\n        return ((this[1] & ((1 << (32 - this.DB)) - 1)) << this.DB) | this[0];\n    };\n    // BigInteger.prototype.byteValue = bnByteValue;\n    // (public) return value as byte\n    BigInteger.prototype.byteValue = function () {\n        return (this.t == 0) ? this.s : (this[0] << 24) >> 24;\n    };\n    // BigInteger.prototype.shortValue = bnShortValue;\n    // (public) return value as short (assumes DB>=16)\n    BigInteger.prototype.shortValue = function () {\n        return (this.t == 0) ? this.s : (this[0] << 16) >> 16;\n    };\n    // BigInteger.prototype.signum = bnSigNum;\n    // (public) 0 if this == 0, 1 if this > 0\n    BigInteger.prototype.signum = function () {\n        if (this.s < 0) {\n            return -1;\n        }\n        else if (this.t <= 0 || (this.t == 1 && this[0] <= 0)) {\n            return 0;\n        }\n        else {\n            return 1;\n        }\n    };\n    // BigInteger.prototype.toByteArray = bnToByteArray;\n    // (public) convert to bigendian byte array\n    BigInteger.prototype.toByteArray = function () {\n        var i = this.t;\n        var r = [];\n        r[0] = this.s;\n        var p = this.DB - (i * this.DB) % 8;\n        var d;\n        var k = 0;\n        if (i-- > 0) {\n            if (p < this.DB && (d = this[i] >> p) != (this.s & this.DM) >> p) {\n                r[k++] = d | (this.s << (this.DB - p));\n            }\n            while (i >= 0) {\n                if (p < 8) {\n                    d = (this[i] & ((1 << p) - 1)) << (8 - p);\n                    d |= this[--i] >> (p += this.DB - 8);\n                }\n                else {\n                    d = (this[i] >> (p -= 8)) & 0xff;\n                    if (p <= 0) {\n                        p += this.DB;\n                        --i;\n                    }\n                }\n                if ((d & 0x80) != 0) {\n                    d |= -256;\n                }\n                if (k == 0 && (this.s & 0x80) != (d & 0x80)) {\n                    ++k;\n                }\n                if (k > 0 || d != this.s) {\n                    r[k++] = d;\n                }\n            }\n        }\n        return r;\n    };\n    // BigInteger.prototype.equals = bnEquals;\n    BigInteger.prototype.equals = function (a) {\n        return (this.compareTo(a) == 0);\n    };\n    // BigInteger.prototype.min = bnMin;\n    BigInteger.prototype.min = function (a) {\n        return (this.compareTo(a) < 0) ? this : a;\n    };\n    // BigInteger.prototype.max = bnMax;\n    BigInteger.prototype.max = function (a) {\n        return (this.compareTo(a) > 0) ? this : a;\n    };\n    // BigInteger.prototype.and = bnAnd;\n    BigInteger.prototype.and = function (a) {\n        var r = nbi();\n        this.bitwiseTo(a, op_and, r);\n        return r;\n    };\n    // BigInteger.prototype.or = bnOr;\n    BigInteger.prototype.or = function (a) {\n        var r = nbi();\n        this.bitwiseTo(a, op_or, r);\n        return r;\n    };\n    // BigInteger.prototype.xor = bnXor;\n    BigInteger.prototype.xor = function (a) {\n        var r = nbi();\n        this.bitwiseTo(a, op_xor, r);\n        return r;\n    };\n    // BigInteger.prototype.andNot = bnAndNot;\n    BigInteger.prototype.andNot = function (a) {\n        var r = nbi();\n        this.bitwiseTo(a, op_andnot, r);\n        return r;\n    };\n    // BigInteger.prototype.not = bnNot;\n    // (public) ~this\n    BigInteger.prototype.not = function () {\n        var r = nbi();\n        for (var i = 0; i < this.t; ++i) {\n            r[i] = this.DM & ~this[i];\n        }\n        r.t = this.t;\n        r.s = ~this.s;\n        return r;\n    };\n    // BigInteger.prototype.shiftLeft = bnShiftLeft;\n    // (public) this << n\n    BigInteger.prototype.shiftLeft = function (n) {\n        var r = nbi();\n        if (n < 0) {\n            this.rShiftTo(-n, r);\n        }\n        else {\n            this.lShiftTo(n, r);\n        }\n        return r;\n    };\n    // BigInteger.prototype.shiftRight = bnShiftRight;\n    // (public) this >> n\n    BigInteger.prototype.shiftRight = function (n) {\n        var r = nbi();\n        if (n < 0) {\n            this.lShiftTo(-n, r);\n        }\n        else {\n            this.rShiftTo(n, r);\n        }\n        return r;\n    };\n    // BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\n    // (public) returns index of lowest 1-bit (or -1 if none)\n    BigInteger.prototype.getLowestSetBit = function () {\n        for (var i = 0; i < this.t; ++i) {\n            if (this[i] != 0) {\n                return i * this.DB + lbit(this[i]);\n            }\n        }\n        if (this.s < 0) {\n            return this.t * this.DB;\n        }\n        return -1;\n    };\n    // BigInteger.prototype.bitCount = bnBitCount;\n    // (public) return number of set bits\n    BigInteger.prototype.bitCount = function () {\n        var r = 0;\n        var x = this.s & this.DM;\n        for (var i = 0; i < this.t; ++i) {\n            r += cbit(this[i] ^ x);\n        }\n        return r;\n    };\n    // BigInteger.prototype.testBit = bnTestBit;\n    // (public) true iff nth bit is set\n    BigInteger.prototype.testBit = function (n) {\n        var j = Math.floor(n / this.DB);\n        if (j >= this.t) {\n            return (this.s != 0);\n        }\n        return ((this[j] & (1 << (n % this.DB))) != 0);\n    };\n    // BigInteger.prototype.setBit = bnSetBit;\n    // (public) this | (1<<n)\n    BigInteger.prototype.setBit = function (n) {\n        return this.changeBit(n, op_or);\n    };\n    // BigInteger.prototype.clearBit = bnClearBit;\n    // (public) this & ~(1<<n)\n    BigInteger.prototype.clearBit = function (n) {\n        return this.changeBit(n, op_andnot);\n    };\n    // BigInteger.prototype.flipBit = bnFlipBit;\n    // (public) this ^ (1<<n)\n    BigInteger.prototype.flipBit = function (n) {\n        return this.changeBit(n, op_xor);\n    };\n    // BigInteger.prototype.add = bnAdd;\n    // (public) this + a\n    BigInteger.prototype.add = function (a) {\n        var r = nbi();\n        this.addTo(a, r);\n        return r;\n    };\n    // BigInteger.prototype.subtract = bnSubtract;\n    // (public) this - a\n    BigInteger.prototype.subtract = function (a) {\n        var r = nbi();\n        this.subTo(a, r);\n        return r;\n    };\n    // BigInteger.prototype.multiply = bnMultiply;\n    // (public) this * a\n    BigInteger.prototype.multiply = function (a) {\n        var r = nbi();\n        this.multiplyTo(a, r);\n        return r;\n    };\n    // BigInteger.prototype.divide = bnDivide;\n    // (public) this / a\n    BigInteger.prototype.divide = function (a) {\n        var r = nbi();\n        this.divRemTo(a, r, null);\n        return r;\n    };\n    // BigInteger.prototype.remainder = bnRemainder;\n    // (public) this % a\n    BigInteger.prototype.remainder = function (a) {\n        var r = nbi();\n        this.divRemTo(a, null, r);\n        return r;\n    };\n    // BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;\n    // (public) [this/a,this%a]\n    BigInteger.prototype.divideAndRemainder = function (a) {\n        var q = nbi();\n        var r = nbi();\n        this.divRemTo(a, q, r);\n        return [q, r];\n    };\n    // BigInteger.prototype.modPow = bnModPow;\n    // (public) this^e % m (HAC 14.85)\n    BigInteger.prototype.modPow = function (e, m) {\n        var i = e.bitLength();\n        var k;\n        var r = nbv(1);\n        var z;\n        if (i <= 0) {\n            return r;\n        }\n        else if (i < 18) {\n            k = 1;\n        }\n        else if (i < 48) {\n            k = 3;\n        }\n        else if (i < 144) {\n            k = 4;\n        }\n        else if (i < 768) {\n            k = 5;\n        }\n        else {\n            k = 6;\n        }\n        if (i < 8) {\n            z = new Classic(m);\n        }\n        else if (m.isEven()) {\n            z = new Barrett(m);\n        }\n        else {\n            z = new Montgomery(m);\n        }\n        // precomputation\n        var g = [];\n        var n = 3;\n        var k1 = k - 1;\n        var km = (1 << k) - 1;\n        g[1] = z.convert(this);\n        if (k > 1) {\n            var g2 = nbi();\n            z.sqrTo(g[1], g2);\n            while (n <= km) {\n                g[n] = nbi();\n                z.mulTo(g2, g[n - 2], g[n]);\n                n += 2;\n            }\n        }\n        var j = e.t - 1;\n        var w;\n        var is1 = true;\n        var r2 = nbi();\n        var t;\n        i = nbits(e[j]) - 1;\n        while (j >= 0) {\n            if (i >= k1) {\n                w = (e[j] >> (i - k1)) & km;\n            }\n            else {\n                w = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i);\n                if (j > 0) {\n                    w |= e[j - 1] >> (this.DB + i - k1);\n                }\n            }\n            n = k;\n            while ((w & 1) == 0) {\n                w >>= 1;\n                --n;\n            }\n            if ((i -= n) < 0) {\n                i += this.DB;\n                --j;\n            }\n            if (is1) { // ret == 1, don't bother squaring or multiplying it\n                g[w].copyTo(r);\n                is1 = false;\n            }\n            else {\n                while (n > 1) {\n                    z.sqrTo(r, r2);\n                    z.sqrTo(r2, r);\n                    n -= 2;\n                }\n                if (n > 0) {\n                    z.sqrTo(r, r2);\n                }\n                else {\n                    t = r;\n                    r = r2;\n                    r2 = t;\n                }\n                z.mulTo(r2, g[w], r);\n            }\n            while (j >= 0 && (e[j] & (1 << i)) == 0) {\n                z.sqrTo(r, r2);\n                t = r;\n                r = r2;\n                r2 = t;\n                if (--i < 0) {\n                    i = this.DB - 1;\n                    --j;\n                }\n            }\n        }\n        return z.revert(r);\n    };\n    // BigInteger.prototype.modInverse = bnModInverse;\n    // (public) 1/this % m (HAC 14.61)\n    BigInteger.prototype.modInverse = function (m) {\n        var ac = m.isEven();\n        if ((this.isEven() && ac) || m.signum() == 0) {\n            return BigInteger.ZERO;\n        }\n        var u = m.clone();\n        var v = this.clone();\n        var a = nbv(1);\n        var b = nbv(0);\n        var c = nbv(0);\n        var d = nbv(1);\n        while (u.signum() != 0) {\n            while (u.isEven()) {\n                u.rShiftTo(1, u);\n                if (ac) {\n                    if (!a.isEven() || !b.isEven()) {\n                        a.addTo(this, a);\n                        b.subTo(m, b);\n                    }\n                    a.rShiftTo(1, a);\n                }\n                else if (!b.isEven()) {\n                    b.subTo(m, b);\n                }\n                b.rShiftTo(1, b);\n            }\n            while (v.isEven()) {\n                v.rShiftTo(1, v);\n                if (ac) {\n                    if (!c.isEven() || !d.isEven()) {\n                        c.addTo(this, c);\n                        d.subTo(m, d);\n                    }\n                    c.rShiftTo(1, c);\n                }\n                else if (!d.isEven()) {\n                    d.subTo(m, d);\n                }\n                d.rShiftTo(1, d);\n            }\n            if (u.compareTo(v) >= 0) {\n                u.subTo(v, u);\n                if (ac) {\n                    a.subTo(c, a);\n                }\n                b.subTo(d, b);\n            }\n            else {\n                v.subTo(u, v);\n                if (ac) {\n                    c.subTo(a, c);\n                }\n                d.subTo(b, d);\n            }\n        }\n        if (v.compareTo(BigInteger.ONE) != 0) {\n            return BigInteger.ZERO;\n        }\n        if (d.compareTo(m) >= 0) {\n            return d.subtract(m);\n        }\n        if (d.signum() < 0) {\n            d.addTo(m, d);\n        }\n        else {\n            return d;\n        }\n        if (d.signum() < 0) {\n            return d.add(m);\n        }\n        else {\n            return d;\n        }\n    };\n    // BigInteger.prototype.pow = bnPow;\n    // (public) this^e\n    BigInteger.prototype.pow = function (e) {\n        return this.exp(e, new NullExp());\n    };\n    // BigInteger.prototype.gcd = bnGCD;\n    // (public) gcd(this,a) (HAC 14.54)\n    BigInteger.prototype.gcd = function (a) {\n        var x = (this.s < 0) ? this.negate() : this.clone();\n        var y = (a.s < 0) ? a.negate() : a.clone();\n        if (x.compareTo(y) < 0) {\n            var t = x;\n            x = y;\n            y = t;\n        }\n        var i = x.getLowestSetBit();\n        var g = y.getLowestSetBit();\n        if (g < 0) {\n            return x;\n        }\n        if (i < g) {\n            g = i;\n        }\n        if (g > 0) {\n            x.rShiftTo(g, x);\n            y.rShiftTo(g, y);\n        }\n        while (x.signum() > 0) {\n            if ((i = x.getLowestSetBit()) > 0) {\n                x.rShiftTo(i, x);\n            }\n            if ((i = y.getLowestSetBit()) > 0) {\n                y.rShiftTo(i, y);\n            }\n            if (x.compareTo(y) >= 0) {\n                x.subTo(y, x);\n                x.rShiftTo(1, x);\n            }\n            else {\n                y.subTo(x, y);\n                y.rShiftTo(1, y);\n            }\n        }\n        if (g > 0) {\n            y.lShiftTo(g, y);\n        }\n        return y;\n    };\n    // BigInteger.prototype.isProbablePrime = bnIsProbablePrime;\n    // (public) test primality with certainty >= 1-.5^t\n    BigInteger.prototype.isProbablePrime = function (t) {\n        var i;\n        var x = this.abs();\n        if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {\n            for (i = 0; i < lowprimes.length; ++i) {\n                if (x[0] == lowprimes[i]) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        if (x.isEven()) {\n            return false;\n        }\n        i = 1;\n        while (i < lowprimes.length) {\n            var m = lowprimes[i];\n            var j = i + 1;\n            while (j < lowprimes.length && m < lplim) {\n                m *= lowprimes[j++];\n            }\n            m = x.modInt(m);\n            while (i < j) {\n                if (m % lowprimes[i++] == 0) {\n                    return false;\n                }\n            }\n        }\n        return x.millerRabin(t);\n    };\n    //#endregion PUBLIC\n    //#region PROTECTED\n    // BigInteger.prototype.copyTo = bnpCopyTo;\n    // (protected) copy this to r\n    BigInteger.prototype.copyTo = function (r) {\n        for (var i = this.t - 1; i >= 0; --i) {\n            r[i] = this[i];\n        }\n        r.t = this.t;\n        r.s = this.s;\n    };\n    // BigInteger.prototype.fromInt = bnpFromInt;\n    // (protected) set from integer value x, -DV <= x < DV\n    BigInteger.prototype.fromInt = function (x) {\n        this.t = 1;\n        this.s = (x < 0) ? -1 : 0;\n        if (x > 0) {\n            this[0] = x;\n        }\n        else if (x < -1) {\n            this[0] = x + this.DV;\n        }\n        else {\n            this.t = 0;\n        }\n    };\n    // BigInteger.prototype.fromString = bnpFromString;\n    // (protected) set from string and radix\n    BigInteger.prototype.fromString = function (s, b) {\n        var k;\n        if (b == 16) {\n            k = 4;\n        }\n        else if (b == 8) {\n            k = 3;\n        }\n        else if (b == 256) {\n            k = 8;\n            /* byte array */\n        }\n        else if (b == 2) {\n            k = 1;\n        }\n        else if (b == 32) {\n            k = 5;\n        }\n        else if (b == 4) {\n            k = 2;\n        }\n        else {\n            this.fromRadix(s, b);\n            return;\n        }\n        this.t = 0;\n        this.s = 0;\n        var i = s.length;\n        var mi = false;\n        var sh = 0;\n        while (--i >= 0) {\n            var x = (k == 8) ? (+s[i]) & 0xff : intAt(s, i);\n            if (x < 0) {\n                if (s.charAt(i) == \"-\") {\n                    mi = true;\n                }\n                continue;\n            }\n            mi = false;\n            if (sh == 0) {\n                this[this.t++] = x;\n            }\n            else if (sh + k > this.DB) {\n                this[this.t - 1] |= (x & ((1 << (this.DB - sh)) - 1)) << sh;\n                this[this.t++] = (x >> (this.DB - sh));\n            }\n            else {\n                this[this.t - 1] |= x << sh;\n            }\n            sh += k;\n            if (sh >= this.DB) {\n                sh -= this.DB;\n            }\n        }\n        if (k == 8 && ((+s[0]) & 0x80) != 0) {\n            this.s = -1;\n            if (sh > 0) {\n                this[this.t - 1] |= ((1 << (this.DB - sh)) - 1) << sh;\n            }\n        }\n        this.clamp();\n        if (mi) {\n            BigInteger.ZERO.subTo(this, this);\n        }\n    };\n    // BigInteger.prototype.clamp = bnpClamp;\n    // (protected) clamp off excess high words\n    BigInteger.prototype.clamp = function () {\n        var c = this.s & this.DM;\n        while (this.t > 0 && this[this.t - 1] == c) {\n            --this.t;\n        }\n    };\n    // BigInteger.prototype.dlShiftTo = bnpDLShiftTo;\n    // (protected) r = this << n*DB\n    BigInteger.prototype.dlShiftTo = function (n, r) {\n        var i;\n        for (i = this.t - 1; i >= 0; --i) {\n            r[i + n] = this[i];\n        }\n        for (i = n - 1; i >= 0; --i) {\n            r[i] = 0;\n        }\n        r.t = this.t + n;\n        r.s = this.s;\n    };\n    // BigInteger.prototype.drShiftTo = bnpDRShiftTo;\n    // (protected) r = this >> n*DB\n    BigInteger.prototype.drShiftTo = function (n, r) {\n        for (var i = n; i < this.t; ++i) {\n            r[i - n] = this[i];\n        }\n        r.t = Math.max(this.t - n, 0);\n        r.s = this.s;\n    };\n    // BigInteger.prototype.lShiftTo = bnpLShiftTo;\n    // (protected) r = this << n\n    BigInteger.prototype.lShiftTo = function (n, r) {\n        var bs = n % this.DB;\n        var cbs = this.DB - bs;\n        var bm = (1 << cbs) - 1;\n        var ds = Math.floor(n / this.DB);\n        var c = (this.s << bs) & this.DM;\n        for (var i = this.t - 1; i >= 0; --i) {\n            r[i + ds + 1] = (this[i] >> cbs) | c;\n            c = (this[i] & bm) << bs;\n        }\n        for (var i = ds - 1; i >= 0; --i) {\n            r[i] = 0;\n        }\n        r[ds] = c;\n        r.t = this.t + ds + 1;\n        r.s = this.s;\n        r.clamp();\n    };\n    // BigInteger.prototype.rShiftTo = bnpRShiftTo;\n    // (protected) r = this >> n\n    BigInteger.prototype.rShiftTo = function (n, r) {\n        r.s = this.s;\n        var ds = Math.floor(n / this.DB);\n        if (ds >= this.t) {\n            r.t = 0;\n            return;\n        }\n        var bs = n % this.DB;\n        var cbs = this.DB - bs;\n        var bm = (1 << bs) - 1;\n        r[0] = this[ds] >> bs;\n        for (var i = ds + 1; i < this.t; ++i) {\n            r[i - ds - 1] |= (this[i] & bm) << cbs;\n            r[i - ds] = this[i] >> bs;\n        }\n        if (bs > 0) {\n            r[this.t - ds - 1] |= (this.s & bm) << cbs;\n        }\n        r.t = this.t - ds;\n        r.clamp();\n    };\n    // BigInteger.prototype.subTo = bnpSubTo;\n    // (protected) r = this - a\n    BigInteger.prototype.subTo = function (a, r) {\n        var i = 0;\n        var c = 0;\n        var m = Math.min(a.t, this.t);\n        while (i < m) {\n            c += this[i] - a[i];\n            r[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        if (a.t < this.t) {\n            c -= a.s;\n            while (i < this.t) {\n                c += this[i];\n                r[i++] = c & this.DM;\n                c >>= this.DB;\n            }\n            c += this.s;\n        }\n        else {\n            c += this.s;\n            while (i < a.t) {\n                c -= a[i];\n                r[i++] = c & this.DM;\n                c >>= this.DB;\n            }\n            c -= a.s;\n        }\n        r.s = (c < 0) ? -1 : 0;\n        if (c < -1) {\n            r[i++] = this.DV + c;\n        }\n        else if (c > 0) {\n            r[i++] = c;\n        }\n        r.t = i;\n        r.clamp();\n    };\n    // BigInteger.prototype.multiplyTo = bnpMultiplyTo;\n    // (protected) r = this * a, r != this,a (HAC 14.12)\n    // \"this\" should be the larger one if appropriate.\n    BigInteger.prototype.multiplyTo = function (a, r) {\n        var x = this.abs();\n        var y = a.abs();\n        var i = x.t;\n        r.t = i + y.t;\n        while (--i >= 0) {\n            r[i] = 0;\n        }\n        for (i = 0; i < y.t; ++i) {\n            r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);\n        }\n        r.s = 0;\n        r.clamp();\n        if (this.s != a.s) {\n            BigInteger.ZERO.subTo(r, r);\n        }\n    };\n    // BigInteger.prototype.squareTo = bnpSquareTo;\n    // (protected) r = this^2, r != this (HAC 14.16)\n    BigInteger.prototype.squareTo = function (r) {\n        var x = this.abs();\n        var i = r.t = 2 * x.t;\n        while (--i >= 0) {\n            r[i] = 0;\n        }\n        for (i = 0; i < x.t - 1; ++i) {\n            var c = x.am(i, x[i], r, 2 * i, 0, 1);\n            if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {\n                r[i + x.t] -= x.DV;\n                r[i + x.t + 1] = 1;\n            }\n        }\n        if (r.t > 0) {\n            r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);\n        }\n        r.s = 0;\n        r.clamp();\n    };\n    // BigInteger.prototype.divRemTo = bnpDivRemTo;\n    // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n    // r != q, this != m.  q or r may be null.\n    BigInteger.prototype.divRemTo = function (m, q, r) {\n        var pm = m.abs();\n        if (pm.t <= 0) {\n            return;\n        }\n        var pt = this.abs();\n        if (pt.t < pm.t) {\n            if (q != null) {\n                q.fromInt(0);\n            }\n            if (r != null) {\n                this.copyTo(r);\n            }\n            return;\n        }\n        if (r == null) {\n            r = nbi();\n        }\n        var y = nbi();\n        var ts = this.s;\n        var ms = m.s;\n        var nsh = this.DB - nbits(pm[pm.t - 1]); // normalize modulus\n        if (nsh > 0) {\n            pm.lShiftTo(nsh, y);\n            pt.lShiftTo(nsh, r);\n        }\n        else {\n            pm.copyTo(y);\n            pt.copyTo(r);\n        }\n        var ys = y.t;\n        var y0 = y[ys - 1];\n        if (y0 == 0) {\n            return;\n        }\n        var yt = y0 * (1 << this.F1) + ((ys > 1) ? y[ys - 2] >> this.F2 : 0);\n        var d1 = this.FV / yt;\n        var d2 = (1 << this.F1) / yt;\n        var e = 1 << this.F2;\n        var i = r.t;\n        var j = i - ys;\n        var t = (q == null) ? nbi() : q;\n        y.dlShiftTo(j, t);\n        if (r.compareTo(t) >= 0) {\n            r[r.t++] = 1;\n            r.subTo(t, r);\n        }\n        BigInteger.ONE.dlShiftTo(ys, t);\n        t.subTo(y, y); // \"negative\" y so we can replace sub with am later\n        while (y.t < ys) {\n            y[y.t++] = 0;\n        }\n        while (--j >= 0) {\n            // Estimate quotient digit\n            var qd = (r[--i] == y0) ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);\n            if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) { // Try it out\n                y.dlShiftTo(j, t);\n                r.subTo(t, r);\n                while (r[i] < --qd) {\n                    r.subTo(t, r);\n                }\n            }\n        }\n        if (q != null) {\n            r.drShiftTo(ys, q);\n            if (ts != ms) {\n                BigInteger.ZERO.subTo(q, q);\n            }\n        }\n        r.t = ys;\n        r.clamp();\n        if (nsh > 0) {\n            r.rShiftTo(nsh, r);\n        } // Denormalize remainder\n        if (ts < 0) {\n            BigInteger.ZERO.subTo(r, r);\n        }\n    };\n    // BigInteger.prototype.invDigit = bnpInvDigit;\n    // (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n    // justification:\n    //         xy == 1 (mod m)\n    //         xy =  1+km\n    //   xy(2-xy) = (1+km)(1-km)\n    // x[y(2-xy)] = 1-k^2m^2\n    // x[y(2-xy)] == 1 (mod m^2)\n    // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n    // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n    // JS multiply \"overflows\" differently from C/C++, so care is needed here.\n    BigInteger.prototype.invDigit = function () {\n        if (this.t < 1) {\n            return 0;\n        }\n        var x = this[0];\n        if ((x & 1) == 0) {\n            return 0;\n        }\n        var y = x & 3; // y == 1/x mod 2^2\n        y = (y * (2 - (x & 0xf) * y)) & 0xf; // y == 1/x mod 2^4\n        y = (y * (2 - (x & 0xff) * y)) & 0xff; // y == 1/x mod 2^8\n        y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff; // y == 1/x mod 2^16\n        // last step - calculate inverse mod DV directly;\n        // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n        y = (y * (2 - x * y % this.DV)) % this.DV; // y == 1/x mod 2^dbits\n        // we really want the negative inverse, and -DV < y < DV\n        return (y > 0) ? this.DV - y : -y;\n    };\n    // BigInteger.prototype.isEven = bnpIsEven;\n    // (protected) true iff this is even\n    BigInteger.prototype.isEven = function () {\n        return ((this.t > 0) ? (this[0] & 1) : this.s) == 0;\n    };\n    // BigInteger.prototype.exp = bnpExp;\n    // (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\n    BigInteger.prototype.exp = function (e, z) {\n        if (e > 0xffffffff || e < 1) {\n            return BigInteger.ONE;\n        }\n        var r = nbi();\n        var r2 = nbi();\n        var g = z.convert(this);\n        var i = nbits(e) - 1;\n        g.copyTo(r);\n        while (--i >= 0) {\n            z.sqrTo(r, r2);\n            if ((e & (1 << i)) > 0) {\n                z.mulTo(r2, g, r);\n            }\n            else {\n                var t = r;\n                r = r2;\n                r2 = t;\n            }\n        }\n        return z.revert(r);\n    };\n    // BigInteger.prototype.chunkSize = bnpChunkSize;\n    // (protected) return x s.t. r^x < DV\n    BigInteger.prototype.chunkSize = function (r) {\n        return Math.floor(Math.LN2 * this.DB / Math.log(r));\n    };\n    // BigInteger.prototype.toRadix = bnpToRadix;\n    // (protected) convert to radix string\n    BigInteger.prototype.toRadix = function (b) {\n        if (b == null) {\n            b = 10;\n        }\n        if (this.signum() == 0 || b < 2 || b > 36) {\n            return \"0\";\n        }\n        var cs = this.chunkSize(b);\n        var a = Math.pow(b, cs);\n        var d = nbv(a);\n        var y = nbi();\n        var z = nbi();\n        var r = \"\";\n        this.divRemTo(d, y, z);\n        while (y.signum() > 0) {\n            r = (a + z.intValue()).toString(b).substr(1) + r;\n            y.divRemTo(d, y, z);\n        }\n        return z.intValue().toString(b) + r;\n    };\n    // BigInteger.prototype.fromRadix = bnpFromRadix;\n    // (protected) convert from radix string\n    BigInteger.prototype.fromRadix = function (s, b) {\n        this.fromInt(0);\n        if (b == null) {\n            b = 10;\n        }\n        var cs = this.chunkSize(b);\n        var d = Math.pow(b, cs);\n        var mi = false;\n        var j = 0;\n        var w = 0;\n        for (var i = 0; i < s.length; ++i) {\n            var x = intAt(s, i);\n            if (x < 0) {\n                if (s.charAt(i) == \"-\" && this.signum() == 0) {\n                    mi = true;\n                }\n                continue;\n            }\n            w = b * w + x;\n            if (++j >= cs) {\n                this.dMultiply(d);\n                this.dAddOffset(w, 0);\n                j = 0;\n                w = 0;\n            }\n        }\n        if (j > 0) {\n            this.dMultiply(Math.pow(b, j));\n            this.dAddOffset(w, 0);\n        }\n        if (mi) {\n            BigInteger.ZERO.subTo(this, this);\n        }\n    };\n    // BigInteger.prototype.fromNumber = bnpFromNumber;\n    // (protected) alternate constructor\n    BigInteger.prototype.fromNumber = function (a, b, c) {\n        if (\"number\" == typeof b) {\n            // new BigInteger(int,int,RNG)\n            if (a < 2) {\n                this.fromInt(1);\n            }\n            else {\n                this.fromNumber(a, c);\n                if (!this.testBit(a - 1)) {\n                    // force MSB set\n                    this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);\n                }\n                if (this.isEven()) {\n                    this.dAddOffset(1, 0);\n                } // force odd\n                while (!this.isProbablePrime(b)) {\n                    this.dAddOffset(2, 0);\n                    if (this.bitLength() > a) {\n                        this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);\n                    }\n                }\n            }\n        }\n        else {\n            // new BigInteger(int,RNG)\n            var x = [];\n            var t = a & 7;\n            x.length = (a >> 3) + 1;\n            b.nextBytes(x);\n            if (t > 0) {\n                x[0] &= ((1 << t) - 1);\n            }\n            else {\n                x[0] = 0;\n            }\n            this.fromString(x, 256);\n        }\n    };\n    // BigInteger.prototype.bitwiseTo = bnpBitwiseTo;\n    // (protected) r = this op a (bitwise)\n    BigInteger.prototype.bitwiseTo = function (a, op, r) {\n        var i;\n        var f;\n        var m = Math.min(a.t, this.t);\n        for (i = 0; i < m; ++i) {\n            r[i] = op(this[i], a[i]);\n        }\n        if (a.t < this.t) {\n            f = a.s & this.DM;\n            for (i = m; i < this.t; ++i) {\n                r[i] = op(this[i], f);\n            }\n            r.t = this.t;\n        }\n        else {\n            f = this.s & this.DM;\n            for (i = m; i < a.t; ++i) {\n                r[i] = op(f, a[i]);\n            }\n            r.t = a.t;\n        }\n        r.s = op(this.s, a.s);\n        r.clamp();\n    };\n    // BigInteger.prototype.changeBit = bnpChangeBit;\n    // (protected) this op (1<<n)\n    BigInteger.prototype.changeBit = function (n, op) {\n        var r = BigInteger.ONE.shiftLeft(n);\n        this.bitwiseTo(r, op, r);\n        return r;\n    };\n    // BigInteger.prototype.addTo = bnpAddTo;\n    // (protected) r = this + a\n    BigInteger.prototype.addTo = function (a, r) {\n        var i = 0;\n        var c = 0;\n        var m = Math.min(a.t, this.t);\n        while (i < m) {\n            c += this[i] + a[i];\n            r[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        if (a.t < this.t) {\n            c += a.s;\n            while (i < this.t) {\n                c += this[i];\n                r[i++] = c & this.DM;\n                c >>= this.DB;\n            }\n            c += this.s;\n        }\n        else {\n            c += this.s;\n            while (i < a.t) {\n                c += a[i];\n                r[i++] = c & this.DM;\n                c >>= this.DB;\n            }\n            c += a.s;\n        }\n        r.s = (c < 0) ? -1 : 0;\n        if (c > 0) {\n            r[i++] = c;\n        }\n        else if (c < -1) {\n            r[i++] = this.DV + c;\n        }\n        r.t = i;\n        r.clamp();\n    };\n    // BigInteger.prototype.dMultiply = bnpDMultiply;\n    // (protected) this *= n, this >= 0, 1 < n < DV\n    BigInteger.prototype.dMultiply = function (n) {\n        this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);\n        ++this.t;\n        this.clamp();\n    };\n    // BigInteger.prototype.dAddOffset = bnpDAddOffset;\n    // (protected) this += n << w words, this >= 0\n    BigInteger.prototype.dAddOffset = function (n, w) {\n        if (n == 0) {\n            return;\n        }\n        while (this.t <= w) {\n            this[this.t++] = 0;\n        }\n        this[w] += n;\n        while (this[w] >= this.DV) {\n            this[w] -= this.DV;\n            if (++w >= this.t) {\n                this[this.t++] = 0;\n            }\n            ++this[w];\n        }\n    };\n    // BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;\n    // (protected) r = lower n words of \"this * a\", a.t <= n\n    // \"this\" should be the larger one if appropriate.\n    BigInteger.prototype.multiplyLowerTo = function (a, n, r) {\n        var i = Math.min(this.t + a.t, n);\n        r.s = 0; // assumes a,this >= 0\n        r.t = i;\n        while (i > 0) {\n            r[--i] = 0;\n        }\n        for (var j = r.t - this.t; i < j; ++i) {\n            r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);\n        }\n        for (var j = Math.min(a.t, n); i < j; ++i) {\n            this.am(0, a[i], r, i, 0, n - i);\n        }\n        r.clamp();\n    };\n    // BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;\n    // (protected) r = \"this * a\" without lower n words, n > 0\n    // \"this\" should be the larger one if appropriate.\n    BigInteger.prototype.multiplyUpperTo = function (a, n, r) {\n        --n;\n        var i = r.t = this.t + a.t - n;\n        r.s = 0; // assumes a,this >= 0\n        while (--i >= 0) {\n            r[i] = 0;\n        }\n        for (i = Math.max(n - this.t, 0); i < a.t; ++i) {\n            r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);\n        }\n        r.clamp();\n        r.drShiftTo(1, r);\n    };\n    // BigInteger.prototype.modInt = bnpModInt;\n    // (protected) this % n, n < 2^26\n    BigInteger.prototype.modInt = function (n) {\n        if (n <= 0) {\n            return 0;\n        }\n        var d = this.DV % n;\n        var r = (this.s < 0) ? n - 1 : 0;\n        if (this.t > 0) {\n            if (d == 0) {\n                r = this[0] % n;\n            }\n            else {\n                for (var i = this.t - 1; i >= 0; --i) {\n                    r = (d * r + this[i]) % n;\n                }\n            }\n        }\n        return r;\n    };\n    // BigInteger.prototype.millerRabin = bnpMillerRabin;\n    // (protected) true if probably prime (HAC 4.24, Miller-Rabin)\n    BigInteger.prototype.millerRabin = function (t) {\n        var n1 = this.subtract(BigInteger.ONE);\n        var k = n1.getLowestSetBit();\n        if (k <= 0) {\n            return false;\n        }\n        var r = n1.shiftRight(k);\n        t = (t + 1) >> 1;\n        if (t > lowprimes.length) {\n            t = lowprimes.length;\n        }\n        var a = nbi();\n        for (var i = 0; i < t; ++i) {\n            // Pick bases at random, instead of starting at 2\n            a.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);\n            var y = a.modPow(r, this);\n            if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {\n                var j = 1;\n                while (j++ < k && y.compareTo(n1) != 0) {\n                    y = y.modPowInt(2, this);\n                    if (y.compareTo(BigInteger.ONE) == 0) {\n                        return false;\n                    }\n                }\n                if (y.compareTo(n1) != 0) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    };\n    // BigInteger.prototype.square = bnSquare;\n    // (public) this^2\n    BigInteger.prototype.square = function () {\n        var r = nbi();\n        this.squareTo(r);\n        return r;\n    };\n    //#region ASYNC\n    // Public API method\n    BigInteger.prototype.gcda = function (a, callback) {\n        var x = (this.s < 0) ? this.negate() : this.clone();\n        var y = (a.s < 0) ? a.negate() : a.clone();\n        if (x.compareTo(y) < 0) {\n            var t = x;\n            x = y;\n            y = t;\n        }\n        var i = x.getLowestSetBit();\n        var g = y.getLowestSetBit();\n        if (g < 0) {\n            callback(x);\n            return;\n        }\n        if (i < g) {\n            g = i;\n        }\n        if (g > 0) {\n            x.rShiftTo(g, x);\n            y.rShiftTo(g, y);\n        }\n        // Workhorse of the algorithm, gets called 200 - 800 times per 512 bit keygen.\n        var gcda1 = function () {\n            if ((i = x.getLowestSetBit()) > 0) {\n                x.rShiftTo(i, x);\n            }\n            if ((i = y.getLowestSetBit()) > 0) {\n                y.rShiftTo(i, y);\n            }\n            if (x.compareTo(y) >= 0) {\n                x.subTo(y, x);\n                x.rShiftTo(1, x);\n            }\n            else {\n                y.subTo(x, y);\n                y.rShiftTo(1, y);\n            }\n            if (!(x.signum() > 0)) {\n                if (g > 0) {\n                    y.lShiftTo(g, y);\n                }\n                setTimeout(function () { callback(y); }, 0); // escape\n            }\n            else {\n                setTimeout(gcda1, 0);\n            }\n        };\n        setTimeout(gcda1, 10);\n    };\n    // (protected) alternate constructor\n    BigInteger.prototype.fromNumberAsync = function (a, b, c, callback) {\n        if (\"number\" == typeof b) {\n            if (a < 2) {\n                this.fromInt(1);\n            }\n            else {\n                this.fromNumber(a, c);\n                if (!this.testBit(a - 1)) {\n                    this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);\n                }\n                if (this.isEven()) {\n                    this.dAddOffset(1, 0);\n                }\n                var bnp_1 = this;\n                var bnpfn1_1 = function () {\n                    bnp_1.dAddOffset(2, 0);\n                    if (bnp_1.bitLength() > a) {\n                        bnp_1.subTo(BigInteger.ONE.shiftLeft(a - 1), bnp_1);\n                    }\n                    if (bnp_1.isProbablePrime(b)) {\n                        setTimeout(function () { callback(); }, 0); // escape\n                    }\n                    else {\n                        setTimeout(bnpfn1_1, 0);\n                    }\n                };\n                setTimeout(bnpfn1_1, 0);\n            }\n        }\n        else {\n            var x = [];\n            var t = a & 7;\n            x.length = (a >> 3) + 1;\n            b.nextBytes(x);\n            if (t > 0) {\n                x[0] &= ((1 << t) - 1);\n            }\n            else {\n                x[0] = 0;\n            }\n            this.fromString(x, 256);\n        }\n    };\n    return BigInteger;\n}());\n//#region REDUCERS\n//#region NullExp\nvar NullExp = /** @class */ (function () {\n    function NullExp() {\n    }\n    // NullExp.prototype.convert = nNop;\n    NullExp.prototype.convert = function (x) {\n        return x;\n    };\n    // NullExp.prototype.revert = nNop;\n    NullExp.prototype.revert = function (x) {\n        return x;\n    };\n    // NullExp.prototype.mulTo = nMulTo;\n    NullExp.prototype.mulTo = function (x, y, r) {\n        x.multiplyTo(y, r);\n    };\n    // NullExp.prototype.sqrTo = nSqrTo;\n    NullExp.prototype.sqrTo = function (x, r) {\n        x.squareTo(r);\n    };\n    return NullExp;\n}());\n// Modular reduction using \"classic\" algorithm\nvar Classic = /** @class */ (function () {\n    function Classic(m) {\n        this.m = m;\n    }\n    // Classic.prototype.convert = cConvert;\n    Classic.prototype.convert = function (x) {\n        if (x.s < 0 || x.compareTo(this.m) >= 0) {\n            return x.mod(this.m);\n        }\n        else {\n            return x;\n        }\n    };\n    // Classic.prototype.revert = cRevert;\n    Classic.prototype.revert = function (x) {\n        return x;\n    };\n    // Classic.prototype.reduce = cReduce;\n    Classic.prototype.reduce = function (x) {\n        x.divRemTo(this.m, null, x);\n    };\n    // Classic.prototype.mulTo = cMulTo;\n    Classic.prototype.mulTo = function (x, y, r) {\n        x.multiplyTo(y, r);\n        this.reduce(r);\n    };\n    // Classic.prototype.sqrTo = cSqrTo;\n    Classic.prototype.sqrTo = function (x, r) {\n        x.squareTo(r);\n        this.reduce(r);\n    };\n    return Classic;\n}());\n//#endregion\n//#region Montgomery\n// Montgomery reduction\nvar Montgomery = /** @class */ (function () {\n    function Montgomery(m) {\n        this.m = m;\n        this.mp = m.invDigit();\n        this.mpl = this.mp & 0x7fff;\n        this.mph = this.mp >> 15;\n        this.um = (1 << (m.DB - 15)) - 1;\n        this.mt2 = 2 * m.t;\n    }\n    // Montgomery.prototype.convert = montConvert;\n    // xR mod m\n    Montgomery.prototype.convert = function (x) {\n        var r = nbi();\n        x.abs().dlShiftTo(this.m.t, r);\n        r.divRemTo(this.m, null, r);\n        if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) {\n            this.m.subTo(r, r);\n        }\n        return r;\n    };\n    // Montgomery.prototype.revert = montRevert;\n    // x/R mod m\n    Montgomery.prototype.revert = function (x) {\n        var r = nbi();\n        x.copyTo(r);\n        this.reduce(r);\n        return r;\n    };\n    // Montgomery.prototype.reduce = montReduce;\n    // x = x/R mod m (HAC 14.32)\n    Montgomery.prototype.reduce = function (x) {\n        while (x.t <= this.mt2) {\n            // pad x so am has enough room later\n            x[x.t++] = 0;\n        }\n        for (var i = 0; i < this.m.t; ++i) {\n            // faster way of calculating u0 = x[i]*mp mod DV\n            var j = x[i] & 0x7fff;\n            var u0 = (j * this.mpl + (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) & x.DM;\n            // use am to combine the multiply-shift-add into one call\n            j = i + this.m.t;\n            x[j] += this.m.am(0, u0, x, i, 0, this.m.t);\n            // propagate carry\n            while (x[j] >= x.DV) {\n                x[j] -= x.DV;\n                x[++j]++;\n            }\n        }\n        x.clamp();\n        x.drShiftTo(this.m.t, x);\n        if (x.compareTo(this.m) >= 0) {\n            x.subTo(this.m, x);\n        }\n    };\n    // Montgomery.prototype.mulTo = montMulTo;\n    // r = \"xy/R mod m\"; x,y != r\n    Montgomery.prototype.mulTo = function (x, y, r) {\n        x.multiplyTo(y, r);\n        this.reduce(r);\n    };\n    // Montgomery.prototype.sqrTo = montSqrTo;\n    // r = \"x^2/R mod m\"; x != r\n    Montgomery.prototype.sqrTo = function (x, r) {\n        x.squareTo(r);\n        this.reduce(r);\n    };\n    return Montgomery;\n}());\n//#endregion Montgomery\n//#region Barrett\n// Barrett modular reduction\nvar Barrett = /** @class */ (function () {\n    function Barrett(m) {\n        this.m = m;\n        // setup Barrett\n        this.r2 = nbi();\n        this.q3 = nbi();\n        BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);\n        this.mu = this.r2.divide(m);\n    }\n    // Barrett.prototype.convert = barrettConvert;\n    Barrett.prototype.convert = function (x) {\n        if (x.s < 0 || x.t > 2 * this.m.t) {\n            return x.mod(this.m);\n        }\n        else if (x.compareTo(this.m) < 0) {\n            return x;\n        }\n        else {\n            var r = nbi();\n            x.copyTo(r);\n            this.reduce(r);\n            return r;\n        }\n    };\n    // Barrett.prototype.revert = barrettRevert;\n    Barrett.prototype.revert = function (x) {\n        return x;\n    };\n    // Barrett.prototype.reduce = barrettReduce;\n    // x = x mod m (HAC 14.42)\n    Barrett.prototype.reduce = function (x) {\n        x.drShiftTo(this.m.t - 1, this.r2);\n        if (x.t > this.m.t + 1) {\n            x.t = this.m.t + 1;\n            x.clamp();\n        }\n        this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);\n        this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);\n        while (x.compareTo(this.r2) < 0) {\n            x.dAddOffset(1, this.m.t + 1);\n        }\n        x.subTo(this.r2, x);\n        while (x.compareTo(this.m) >= 0) {\n            x.subTo(this.m, x);\n        }\n    };\n    // Barrett.prototype.mulTo = barrettMulTo;\n    // r = x*y mod m; x,y != r\n    Barrett.prototype.mulTo = function (x, y, r) {\n        x.multiplyTo(y, r);\n        this.reduce(r);\n    };\n    // Barrett.prototype.sqrTo = barrettSqrTo;\n    // r = x^2 mod m; x != r\n    Barrett.prototype.sqrTo = function (x, r) {\n        x.squareTo(r);\n        this.reduce(r);\n    };\n    return Barrett;\n}());\n//#endregion\n//#endregion REDUCERS\n// return new, unset BigInteger\nfunction nbi() { return new BigInteger(null); }\nfunction parseBigInt(str, r) {\n    return new BigInteger(str, r);\n}\n// am: Compute w_j += (x*this_i), propagate carries,\n// c is initial carry, returns final carry.\n// c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n// We need to select the fastest one that works in this environment.\n// am1: use a single mult and divide to get the high bits,\n// max digit bits should be 26 because\n// max internal value = 2*dvalue^2-2*dvalue (< 2^53)\nfunction am1(i, x, w, j, c, n) {\n    while (--n >= 0) {\n        var v = x * this[i++] + w[j] + c;\n        c = Math.floor(v / 0x4000000);\n        w[j++] = v & 0x3ffffff;\n    }\n    return c;\n}\n// am2 avoids a big mult-and-extract completely.\n// Max digit bits should be <= 30 because we do bitwise ops\n// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\nfunction am2(i, x, w, j, c, n) {\n    var xl = x & 0x7fff;\n    var xh = x >> 15;\n    while (--n >= 0) {\n        var l = this[i] & 0x7fff;\n        var h = this[i++] >> 15;\n        var m = xh * l + h * xl;\n        l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);\n        c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);\n        w[j++] = l & 0x3fffffff;\n    }\n    return c;\n}\n// Alternately, set max digit bits to 28 since some\n// browsers slow down when dealing with 32-bit numbers.\nfunction am3(i, x, w, j, c, n) {\n    var xl = x & 0x3fff;\n    var xh = x >> 14;\n    while (--n >= 0) {\n        var l = this[i] & 0x3fff;\n        var h = this[i++] >> 14;\n        var m = xh * l + h * xl;\n        l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;\n        c = (l >> 28) + (m >> 14) + xh * h;\n        w[j++] = l & 0xfffffff;\n    }\n    return c;\n}\nif (j_lm && (navigator.appName == \"Microsoft Internet Explorer\")) {\n    BigInteger.prototype.am = am2;\n    dbits = 30;\n}\nelse if (j_lm && (navigator.appName != \"Netscape\")) {\n    BigInteger.prototype.am = am1;\n    dbits = 26;\n}\nelse { // Mozilla/Netscape seems to prefer am3\n    BigInteger.prototype.am = am3;\n    dbits = 28;\n}\nBigInteger.prototype.DB = dbits;\nBigInteger.prototype.DM = ((1 << dbits) - 1);\nBigInteger.prototype.DV = (1 << dbits);\nvar BI_FP = 52;\nBigInteger.prototype.FV = Math.pow(2, BI_FP);\nBigInteger.prototype.F1 = BI_FP - dbits;\nBigInteger.prototype.F2 = 2 * dbits - BI_FP;\n// Digit conversions\nvar BI_RC = [];\nvar rr;\nvar vv;\nrr = \"0\".charCodeAt(0);\nfor (vv = 0; vv <= 9; ++vv) {\n    BI_RC[rr++] = vv;\n}\nrr = \"a\".charCodeAt(0);\nfor (vv = 10; vv < 36; ++vv) {\n    BI_RC[rr++] = vv;\n}\nrr = \"A\".charCodeAt(0);\nfor (vv = 10; vv < 36; ++vv) {\n    BI_RC[rr++] = vv;\n}\nfunction intAt(s, i) {\n    var c = BI_RC[s.charCodeAt(i)];\n    return (c == null) ? -1 : c;\n}\n// return bigint initialized to value\nfunction nbv(i) {\n    var r = nbi();\n    r.fromInt(i);\n    return r;\n}\n// returns bit length of the integer x\nfunction nbits(x) {\n    var r = 1;\n    var t;\n    if ((t = x >>> 16) != 0) {\n        x = t;\n        r += 16;\n    }\n    if ((t = x >> 8) != 0) {\n        x = t;\n        r += 8;\n    }\n    if ((t = x >> 4) != 0) {\n        x = t;\n        r += 4;\n    }\n    if ((t = x >> 2) != 0) {\n        x = t;\n        r += 2;\n    }\n    if ((t = x >> 1) != 0) {\n        x = t;\n        r += 1;\n    }\n    return r;\n}\n// \"constants\"\nBigInteger.ZERO = nbv(0);\nBigInteger.ONE = nbv(1);\n\n// prng4.js - uses Arcfour as a PRNG\nvar Arcfour = /** @class */ (function () {\n    function Arcfour() {\n        this.i = 0;\n        this.j = 0;\n        this.S = [];\n    }\n    // Arcfour.prototype.init = ARC4init;\n    // Initialize arcfour context from key, an array of ints, each from [0..255]\n    Arcfour.prototype.init = function (key) {\n        var i;\n        var j;\n        var t;\n        for (i = 0; i < 256; ++i) {\n            this.S[i] = i;\n        }\n        j = 0;\n        for (i = 0; i < 256; ++i) {\n            j = (j + this.S[i] + key[i % key.length]) & 255;\n            t = this.S[i];\n            this.S[i] = this.S[j];\n            this.S[j] = t;\n        }\n        this.i = 0;\n        this.j = 0;\n    };\n    // Arcfour.prototype.next = ARC4next;\n    Arcfour.prototype.next = function () {\n        var t;\n        this.i = (this.i + 1) & 255;\n        this.j = (this.j + this.S[this.i]) & 255;\n        t = this.S[this.i];\n        this.S[this.i] = this.S[this.j];\n        this.S[this.j] = t;\n        return this.S[(t + this.S[this.i]) & 255];\n    };\n    return Arcfour;\n}());\n// Plug in your RNG constructor here\nfunction prng_newstate() {\n    return new Arcfour();\n}\n// Pool size must be a multiple of 4 and greater than 32.\n// An array of bytes the size of the pool will be passed to init()\nvar rng_psize = 256;\n\n// Random number generator - requires a PRNG backend, e.g. prng4.js\nvar rng_state;\nvar rng_pool = null;\nvar rng_pptr;\n// Initialize the pool with junk if needed.\nif (rng_pool == null) {\n    rng_pool = [];\n    rng_pptr = 0;\n    var t = void 0;\n    if (window.crypto && window.crypto.getRandomValues) {\n        // Extract entropy (2048 bits) from RNG if available\n        var z = new Uint32Array(256);\n        window.crypto.getRandomValues(z);\n        for (t = 0; t < z.length; ++t) {\n            rng_pool[rng_pptr++] = z[t] & 255;\n        }\n    }\n    // Use mouse events for entropy, if we do not have enough entropy by the time\n    // we need it, entropy will be generated by Math.random.\n    var onMouseMoveListener_1 = function (ev) {\n        this.count = this.count || 0;\n        if (this.count >= 256 || rng_pptr >= rng_psize) {\n            if (window.removeEventListener) {\n                window.removeEventListener(\"mousemove\", onMouseMoveListener_1, false);\n            }\n            else if (window.detachEvent) {\n                window.detachEvent(\"onmousemove\", onMouseMoveListener_1);\n            }\n            return;\n        }\n        try {\n            var mouseCoordinates = ev.x + ev.y;\n            rng_pool[rng_pptr++] = mouseCoordinates & 255;\n            this.count += 1;\n        }\n        catch (e) {\n            // Sometimes Firefox will deny permission to access event properties for some reason. Ignore.\n        }\n    };\n    if (window.addEventListener) {\n        window.addEventListener(\"mousemove\", onMouseMoveListener_1, false);\n    }\n    else if (window.attachEvent) {\n        window.attachEvent(\"onmousemove\", onMouseMoveListener_1);\n    }\n}\nfunction rng_get_byte() {\n    if (rng_state == null) {\n        rng_state = prng_newstate();\n        // At this point, we may not have collected enough entropy.  If not, fall back to Math.random\n        while (rng_pptr < rng_psize) {\n            var random = Math.floor(65536 * Math.random());\n            rng_pool[rng_pptr++] = random & 255;\n        }\n        rng_state.init(rng_pool);\n        for (rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr) {\n            rng_pool[rng_pptr] = 0;\n        }\n        rng_pptr = 0;\n    }\n    // TODO: allow reseeding after first request\n    return rng_state.next();\n}\nvar SecureRandom = /** @class */ (function () {\n    function SecureRandom() {\n    }\n    SecureRandom.prototype.nextBytes = function (ba) {\n        for (var i = 0; i < ba.length; ++i) {\n            ba[i] = rng_get_byte();\n        }\n    };\n    return SecureRandom;\n}());\n\n// Depends on jsbn.js and rng.js\n// function linebrk(s,n) {\n//   var ret = \"\";\n//   var i = 0;\n//   while(i + n < s.length) {\n//     ret += s.substring(i,i+n) + \"\\n\";\n//     i += n;\n//   }\n//   return ret + s.substring(i,s.length);\n// }\n// function byte2Hex(b) {\n//   if(b < 0x10)\n//     return \"0\" + b.toString(16);\n//   else\n//     return b.toString(16);\n// }\nfunction pkcs1pad1(s, n) {\n    if (n < s.length + 22) {\n        console.error(\"Message too long for RSA\");\n        return null;\n    }\n    var len = n - s.length - 6;\n    var filler = \"\";\n    for (var f = 0; f < len; f += 2) {\n        filler += \"ff\";\n    }\n    var m = \"0001\" + filler + \"00\" + s;\n    return parseBigInt(m, 16);\n}\n// PKCS#1 (type 2, random) pad input string s to n bytes, and return a bigint\nfunction pkcs1pad2(s, n) {\n    if (n < s.length + 11) { // TODO: fix for utf-8\n        console.error(\"Message too long for RSA\");\n        return null;\n    }\n    var ba = [];\n    var i = s.length - 1;\n    while (i >= 0 && n > 0) {\n        var c = s.charCodeAt(i--);\n        if (c < 128) { // encode using utf-8\n            ba[--n] = c;\n        }\n        else if ((c > 127) && (c < 2048)) {\n            ba[--n] = (c & 63) | 128;\n            ba[--n] = (c >> 6) | 192;\n        }\n        else {\n            ba[--n] = (c & 63) | 128;\n            ba[--n] = ((c >> 6) & 63) | 128;\n            ba[--n] = (c >> 12) | 224;\n        }\n    }\n    ba[--n] = 0;\n    var rng = new SecureRandom();\n    var x = [];\n    while (n > 2) { // random non-zero pad\n        x[0] = 0;\n        while (x[0] == 0) {\n            rng.nextBytes(x);\n        }\n        ba[--n] = x[0];\n    }\n    ba[--n] = 2;\n    ba[--n] = 0;\n    return new BigInteger(ba);\n}\n// \"empty\" RSA key constructor\nvar RSAKey = /** @class */ (function () {\n    function RSAKey() {\n        this.n = null;\n        this.e = 0;\n        this.d = null;\n        this.p = null;\n        this.q = null;\n        this.dmp1 = null;\n        this.dmq1 = null;\n        this.coeff = null;\n    }\n    //#region PROTECTED\n    // protected\n    // RSAKey.prototype.doPublic = RSADoPublic;\n    // Perform raw public operation on \"x\": return x^e (mod n)\n    RSAKey.prototype.doPublic = function (x) {\n        return x.modPowInt(this.e, this.n);\n    };\n    // RSAKey.prototype.doPrivate = RSADoPrivate;\n    // Perform raw private operation on \"x\": return x^d (mod n)\n    RSAKey.prototype.doPrivate = function (x) {\n        if (this.p == null || this.q == null) {\n            return x.modPow(this.d, this.n);\n        }\n        // TODO: re-calculate any missing CRT params\n        var xp = x.mod(this.p).modPow(this.dmp1, this.p);\n        var xq = x.mod(this.q).modPow(this.dmq1, this.q);\n        while (xp.compareTo(xq) < 0) {\n            xp = xp.add(this.p);\n        }\n        return xp.subtract(xq).multiply(this.coeff).mod(this.p).multiply(this.q).add(xq);\n    };\n    //#endregion PROTECTED\n    //#region PUBLIC\n    // RSAKey.prototype.setPublic = RSASetPublic;\n    // Set the public key fields N and e from hex strings\n    RSAKey.prototype.setPublic = function (N, E) {\n        if (N != null && E != null && N.length > 0 && E.length > 0) {\n            this.n = parseBigInt(N, 16);\n            this.e = parseInt(E, 16);\n        }\n        else {\n            console.error(\"Invalid RSA public key\");\n        }\n    };\n    // RSAKey.prototype.encrypt = RSAEncrypt;\n    // Return the PKCS#1 RSA encryption of \"text\" as an even-length hex string\n    RSAKey.prototype.encrypt = function (text) {\n        var m = pkcs1pad2(text, (this.n.bitLength() + 7) >> 3);\n        if (m == null) {\n            return null;\n        }\n        var c = this.doPublic(m);\n        if (c == null) {\n            return null;\n        }\n        var h = c.toString(16);\n        if ((h.length & 1) == 0) {\n            return h;\n        }\n        else {\n            return \"0\" + h;\n        }\n    };\n    // RSAKey.prototype.setPrivate = RSASetPrivate;\n    // Set the private key fields N, e, and d from hex strings\n    RSAKey.prototype.setPrivate = function (N, E, D) {\n        if (N != null && E != null && N.length > 0 && E.length > 0) {\n            this.n = parseBigInt(N, 16);\n            this.e = parseInt(E, 16);\n            this.d = parseBigInt(D, 16);\n        }\n        else {\n            console.error(\"Invalid RSA private key\");\n        }\n    };\n    // RSAKey.prototype.setPrivateEx = RSASetPrivateEx;\n    // Set the private key fields N, e, d and CRT params from hex strings\n    RSAKey.prototype.setPrivateEx = function (N, E, D, P, Q, DP, DQ, C) {\n        if (N != null && E != null && N.length > 0 && E.length > 0) {\n            this.n = parseBigInt(N, 16);\n            this.e = parseInt(E, 16);\n            this.d = parseBigInt(D, 16);\n            this.p = parseBigInt(P, 16);\n            this.q = parseBigInt(Q, 16);\n            this.dmp1 = parseBigInt(DP, 16);\n            this.dmq1 = parseBigInt(DQ, 16);\n            this.coeff = parseBigInt(C, 16);\n        }\n        else {\n            console.error(\"Invalid RSA private key\");\n        }\n    };\n    // RSAKey.prototype.generate = RSAGenerate;\n    // Generate a new random private key B bits long, using public expt E\n    RSAKey.prototype.generate = function (B, E) {\n        var rng = new SecureRandom();\n        var qs = B >> 1;\n        this.e = parseInt(E, 16);\n        var ee = new BigInteger(E, 16);\n        for (;;) {\n            for (;;) {\n                this.p = new BigInteger(B - qs, 1, rng);\n                if (this.p.subtract(BigInteger.ONE).gcd(ee).compareTo(BigInteger.ONE) == 0 && this.p.isProbablePrime(10)) {\n                    break;\n                }\n            }\n            for (;;) {\n                this.q = new BigInteger(qs, 1, rng);\n                if (this.q.subtract(BigInteger.ONE).gcd(ee).compareTo(BigInteger.ONE) == 0 && this.q.isProbablePrime(10)) {\n                    break;\n                }\n            }\n            if (this.p.compareTo(this.q) <= 0) {\n                var t = this.p;\n                this.p = this.q;\n                this.q = t;\n            }\n            var p1 = this.p.subtract(BigInteger.ONE);\n            var q1 = this.q.subtract(BigInteger.ONE);\n            var phi = p1.multiply(q1);\n            if (phi.gcd(ee).compareTo(BigInteger.ONE) == 0) {\n                this.n = this.p.multiply(this.q);\n                this.d = ee.modInverse(phi);\n                this.dmp1 = this.d.mod(p1);\n                this.dmq1 = this.d.mod(q1);\n                this.coeff = this.q.modInverse(this.p);\n                break;\n            }\n        }\n    };\n    // RSAKey.prototype.decrypt = RSADecrypt;\n    // Return the PKCS#1 RSA decryption of \"ctext\".\n    // \"ctext\" is an even-length hex string and the output is a plain string.\n    RSAKey.prototype.decrypt = function (ctext) {\n        var c = parseBigInt(ctext, 16);\n        var m = this.doPrivate(c);\n        if (m == null) {\n            return null;\n        }\n        return pkcs1unpad2(m, (this.n.bitLength() + 7) >> 3);\n    };\n    // Generate a new random private key B bits long, using public expt E\n    RSAKey.prototype.generateAsync = function (B, E, callback) {\n        var rng = new SecureRandom();\n        var qs = B >> 1;\n        this.e = parseInt(E, 16);\n        var ee = new BigInteger(E, 16);\n        var rsa = this;\n        // These functions have non-descript names because they were originally for(;;) loops.\n        // I don't know about cryptography to give them better names than loop1-4.\n        var loop1 = function () {\n            var loop4 = function () {\n                if (rsa.p.compareTo(rsa.q) <= 0) {\n                    var t = rsa.p;\n                    rsa.p = rsa.q;\n                    rsa.q = t;\n                }\n                var p1 = rsa.p.subtract(BigInteger.ONE);\n                var q1 = rsa.q.subtract(BigInteger.ONE);\n                var phi = p1.multiply(q1);\n                if (phi.gcd(ee).compareTo(BigInteger.ONE) == 0) {\n                    rsa.n = rsa.p.multiply(rsa.q);\n                    rsa.d = ee.modInverse(phi);\n                    rsa.dmp1 = rsa.d.mod(p1);\n                    rsa.dmq1 = rsa.d.mod(q1);\n                    rsa.coeff = rsa.q.modInverse(rsa.p);\n                    setTimeout(function () { callback(); }, 0); // escape\n                }\n                else {\n                    setTimeout(loop1, 0);\n                }\n            };\n            var loop3 = function () {\n                rsa.q = nbi();\n                rsa.q.fromNumberAsync(qs, 1, rng, function () {\n                    rsa.q.subtract(BigInteger.ONE).gcda(ee, function (r) {\n                        if (r.compareTo(BigInteger.ONE) == 0 && rsa.q.isProbablePrime(10)) {\n                            setTimeout(loop4, 0);\n                        }\n                        else {\n                            setTimeout(loop3, 0);\n                        }\n                    });\n                });\n            };\n            var loop2 = function () {\n                rsa.p = nbi();\n                rsa.p.fromNumberAsync(B - qs, 1, rng, function () {\n                    rsa.p.subtract(BigInteger.ONE).gcda(ee, function (r) {\n                        if (r.compareTo(BigInteger.ONE) == 0 && rsa.p.isProbablePrime(10)) {\n                            setTimeout(loop3, 0);\n                        }\n                        else {\n                            setTimeout(loop2, 0);\n                        }\n                    });\n                });\n            };\n            setTimeout(loop2, 0);\n        };\n        setTimeout(loop1, 0);\n    };\n    RSAKey.prototype.sign = function (text, digestMethod, digestName) {\n        var header = getDigestHeader(digestName);\n        var digest = header + digestMethod(text).toString();\n        var m = pkcs1pad1(digest, this.n.bitLength() / 4);\n        if (m == null) {\n            return null;\n        }\n        var c = this.doPrivate(m);\n        if (c == null) {\n            return null;\n        }\n        var h = c.toString(16);\n        if ((h.length & 1) == 0) {\n            return h;\n        }\n        else {\n            return \"0\" + h;\n        }\n    };\n    RSAKey.prototype.verify = function (text, signature, digestMethod) {\n        var c = parseBigInt(signature, 16);\n        var m = this.doPublic(c);\n        if (m == null) {\n            return null;\n        }\n        var unpadded = m.toString(16).replace(/^1f+00/, \"\");\n        var digest = removeDigestHeader(unpadded);\n        return digest == digestMethod(text).toString();\n    };\n    return RSAKey;\n}());\n// Undo PKCS#1 (type 2, random) padding and, if valid, return the plaintext\nfunction pkcs1unpad2(d, n) {\n    var b = d.toByteArray();\n    var i = 0;\n    while (i < b.length && b[i] == 0) {\n        ++i;\n    }\n    if (b.length - i != n - 1 || b[i] != 2) {\n        return null;\n    }\n    ++i;\n    while (b[i] != 0) {\n        if (++i >= b.length) {\n            return null;\n        }\n    }\n    var ret = \"\";\n    while (++i < b.length) {\n        var c = b[i] & 255;\n        if (c < 128) { // utf-8 decode\n            ret += String.fromCharCode(c);\n        }\n        else if ((c > 191) && (c < 224)) {\n            ret += String.fromCharCode(((c & 31) << 6) | (b[i + 1] & 63));\n            ++i;\n        }\n        else {\n            ret += String.fromCharCode(((c & 15) << 12) | ((b[i + 1] & 63) << 6) | (b[i + 2] & 63));\n            i += 2;\n        }\n    }\n    return ret;\n}\n// https://tools.ietf.org/html/rfc3447#page-43\nvar DIGEST_HEADERS = {\n    md2: \"3020300c06082a864886f70d020205000410\",\n    md5: \"3020300c06082a864886f70d020505000410\",\n    sha1: \"3021300906052b0e03021a05000414\",\n    sha224: \"302d300d06096086480165030402040500041c\",\n    sha256: \"3031300d060960864801650304020105000420\",\n    sha384: \"3041300d060960864801650304020205000430\",\n    sha512: \"3051300d060960864801650304020305000440\",\n    ripemd160: \"3021300906052b2403020105000414\",\n};\nfunction getDigestHeader(name) {\n    return DIGEST_HEADERS[name] || \"\";\n}\nfunction removeDigestHeader(str) {\n    for (var name_1 in DIGEST_HEADERS) {\n        if (DIGEST_HEADERS.hasOwnProperty(name_1)) {\n            var header = DIGEST_HEADERS[name_1];\n            var len = header.length;\n            if (str.substr(0, len) == header) {\n                return str.substr(len);\n            }\n        }\n    }\n    return str;\n}\n// Return the PKCS#1 RSA encryption of \"text\" as a Base64-encoded string\n// function RSAEncryptB64(text) {\n//  var h = this.encrypt(text);\n//  if(h) return hex2b64(h); else return null;\n// }\n// public\n// RSAKey.prototype.encrypt_b64 = RSAEncryptB64;\n\n/*!\nCopyright (c) 2011, Yahoo! Inc. All rights reserved.\nCode licensed under the BSD License:\nhttp://developer.yahoo.com/yui/license.html\nversion: 2.9.0\n*/\nvar YAHOO = {};\nYAHOO.lang = {\n    /**\n     * Utility to set up the prototype, constructor and superclass properties to\n     * support an inheritance strategy that can chain constructors and methods.\n     * Static members will not be inherited.\n     *\n     * @method extend\n     * @static\n     * @param {Function} subc   the object to modify\n     * @param {Function} superc the object to inherit\n     * @param {Object} overrides  additional properties/methods to add to the\n     *                              subclass prototype.  These will override the\n     *                              matching items obtained from the superclass\n     *                              if present.\n     */\n    extend: function(subc, superc, overrides) {\n        if (! superc || ! subc) {\n            throw new Error(\"YAHOO.lang.extend failed, please check that \" +\n                \"all dependencies are included.\");\n        }\n\n        var F = function() {};\n        F.prototype = superc.prototype;\n        subc.prototype = new F();\n        subc.prototype.constructor = subc;\n        subc.superclass = superc.prototype;\n\n        if (superc.prototype.constructor == Object.prototype.constructor) {\n            superc.prototype.constructor = superc;\n        }\n\n        if (overrides) {\n            var i;\n            for (i in overrides) {\n                subc.prototype[i] = overrides[i];\n            }\n\n            /*\n             * IE will not enumerate native functions in a derived object even if the\n             * function was overridden.  This is a workaround for specific functions\n             * we care about on the Object prototype.\n             * @property _IEEnumFix\n             * @param {Function} r  the object to receive the augmentation\n             * @param {Function} s  the object that supplies the properties to augment\n             * @static\n             * @private\n             */\n            var _IEEnumFix = function() {},\n                ADD = [\"toString\", \"valueOf\"];\n            try {\n                if (/MSIE/.test(navigator.userAgent)) {\n                    _IEEnumFix = function(r, s) {\n                        for (i = 0; i < ADD.length; i = i + 1) {\n                            var fname = ADD[i], f = s[fname];\n                            if (typeof f === 'function' && f != Object.prototype[fname]) {\n                                r[fname] = f;\n                            }\n                        }\n                    };\n                }\n            } catch (ex) {}            _IEEnumFix(subc.prototype, overrides);\n        }\n    }\n};\n\n/* asn1-1.0.13.js (c) 2013-2017 Kenji Urushima | kjur.github.com/jsrsasign/license\n */\n\n/**\n * @fileOverview\n * @name asn1-1.0.js\n * @author Kenji Urushima kenji.urushima@gmail.com\n * @version asn1 1.0.13 (2017-Jun-02)\n * @since jsrsasign 2.1\n * @license <a href=\"https://kjur.github.io/jsrsasign/license/\">MIT License</a>\n */\n\n/**\n * kjur's class library name space\n * <p>\n * This name space provides following name spaces:\n * <ul>\n * <li>{@link KJUR.asn1} - ASN.1 primitive hexadecimal encoder</li>\n * <li>{@link KJUR.asn1.x509} - ASN.1 structure for X.509 certificate and CRL</li>\n * <li>{@link KJUR.crypto} - Java Cryptographic Extension(JCE) style MessageDigest/Signature\n * class and utilities</li>\n * </ul>\n * </p>\n * NOTE: Please ignore method summary and document of this namespace. This caused by a bug of jsdoc2.\n * @name KJUR\n * @namespace kjur's class library name space\n */\nvar KJUR = {};\n\n/**\n * kjur's ASN.1 class library name space\n * <p>\n * This is ITU-T X.690 ASN.1 DER encoder class library and\n * class structure and methods is very similar to\n * org.bouncycastle.asn1 package of\n * well known BouncyCaslte Cryptography Library.\n * <h4>PROVIDING ASN.1 PRIMITIVES</h4>\n * Here are ASN.1 DER primitive classes.\n * <ul>\n * <li>0x01 {@link KJUR.asn1.DERBoolean}</li>\n * <li>0x02 {@link KJUR.asn1.DERInteger}</li>\n * <li>0x03 {@link KJUR.asn1.DERBitString}</li>\n * <li>0x04 {@link KJUR.asn1.DEROctetString}</li>\n * <li>0x05 {@link KJUR.asn1.DERNull}</li>\n * <li>0x06 {@link KJUR.asn1.DERObjectIdentifier}</li>\n * <li>0x0a {@link KJUR.asn1.DEREnumerated}</li>\n * <li>0x0c {@link KJUR.asn1.DERUTF8String}</li>\n * <li>0x12 {@link KJUR.asn1.DERNumericString}</li>\n * <li>0x13 {@link KJUR.asn1.DERPrintableString}</li>\n * <li>0x14 {@link KJUR.asn1.DERTeletexString}</li>\n * <li>0x16 {@link KJUR.asn1.DERIA5String}</li>\n * <li>0x17 {@link KJUR.asn1.DERUTCTime}</li>\n * <li>0x18 {@link KJUR.asn1.DERGeneralizedTime}</li>\n * <li>0x30 {@link KJUR.asn1.DERSequence}</li>\n * <li>0x31 {@link KJUR.asn1.DERSet}</li>\n * </ul>\n * <h4>OTHER ASN.1 CLASSES</h4>\n * <ul>\n * <li>{@link KJUR.asn1.ASN1Object}</li>\n * <li>{@link KJUR.asn1.DERAbstractString}</li>\n * <li>{@link KJUR.asn1.DERAbstractTime}</li>\n * <li>{@link KJUR.asn1.DERAbstractStructured}</li>\n * <li>{@link KJUR.asn1.DERTaggedObject}</li>\n * </ul>\n * <h4>SUB NAME SPACES</h4>\n * <ul>\n * <li>{@link KJUR.asn1.cades} - CAdES long term signature format</li>\n * <li>{@link KJUR.asn1.cms} - Cryptographic Message Syntax</li>\n * <li>{@link KJUR.asn1.csr} - Certificate Signing Request (CSR/PKCS#10)</li>\n * <li>{@link KJUR.asn1.tsp} - RFC 3161 Timestamping Protocol Format</li>\n * <li>{@link KJUR.asn1.x509} - RFC 5280 X.509 certificate and CRL</li>\n * </ul>\n * </p>\n * NOTE: Please ignore method summary and document of this namespace.\n * This caused by a bug of jsdoc2.\n * @name KJUR.asn1\n * @namespace\n */\nif (typeof KJUR.asn1 == \"undefined\" || !KJUR.asn1) KJUR.asn1 = {};\n\n/**\n * ASN1 utilities class\n * @name KJUR.asn1.ASN1Util\n * @class ASN1 utilities class\n * @since asn1 1.0.2\n */\nKJUR.asn1.ASN1Util = new function() {\n    this.integerToByteHex = function(i) {\n        var h = i.toString(16);\n        if ((h.length % 2) == 1) h = '0' + h;\n        return h;\n    };\n    this.bigIntToMinTwosComplementsHex = function(bigIntegerValue) {\n        var h = bigIntegerValue.toString(16);\n        if (h.substr(0, 1) != '-') {\n            if (h.length % 2 == 1) {\n                h = '0' + h;\n            } else {\n                if (! h.match(/^[0-7]/)) {\n                    h = '00' + h;\n                }\n            }\n        } else {\n            var hPos = h.substr(1);\n            var xorLen = hPos.length;\n            if (xorLen % 2 == 1) {\n                xorLen += 1;\n            } else {\n                if (! h.match(/^[0-7]/)) {\n                    xorLen += 2;\n                }\n            }\n            var hMask = '';\n            for (var i = 0; i < xorLen; i++) {\n                hMask += 'f';\n            }\n            var biMask = new BigInteger(hMask, 16);\n            var biNeg = biMask.xor(bigIntegerValue).add(BigInteger.ONE);\n            h = biNeg.toString(16).replace(/^-/, '');\n        }\n        return h;\n    };\n    /**\n     * get PEM string from hexadecimal data and header string\n     * @name getPEMStringFromHex\n     * @memberOf KJUR.asn1.ASN1Util\n     * @function\n     * @param {String} dataHex hexadecimal string of PEM body\n     * @param {String} pemHeader PEM header string (ex. 'RSA PRIVATE KEY')\n     * @return {String} PEM formatted string of input data\n     * @description\n     * This method converts a hexadecimal string to a PEM string with\n     * a specified header. Its line break will be CRLF(\"\\r\\n\").\n     * @example\n     * var pem  = KJUR.asn1.ASN1Util.getPEMStringFromHex('616161', 'RSA PRIVATE KEY');\n     * // value of pem will be:\n     * -----BEGIN PRIVATE KEY-----\n     * YWFh\n     * -----END PRIVATE KEY-----\n     */\n    this.getPEMStringFromHex = function(dataHex, pemHeader) {\n        return hextopem(dataHex, pemHeader);\n    };\n\n    /**\n     * generate ASN1Object specifed by JSON parameters\n     * @name newObject\n     * @memberOf KJUR.asn1.ASN1Util\n     * @function\n     * @param {Array} param JSON parameter to generate ASN1Object\n     * @return {KJUR.asn1.ASN1Object} generated object\n     * @since asn1 1.0.3\n     * @description\n     * generate any ASN1Object specified by JSON param\n     * including ASN.1 primitive or structured.\n     * Generally 'param' can be described as follows:\n     * <blockquote>\n     * {TYPE-OF-ASNOBJ: ASN1OBJ-PARAMETER}\n     * </blockquote>\n     * 'TYPE-OF-ASN1OBJ' can be one of following symbols:\n     * <ul>\n     * <li>'bool' - DERBoolean</li>\n     * <li>'int' - DERInteger</li>\n     * <li>'bitstr' - DERBitString</li>\n     * <li>'octstr' - DEROctetString</li>\n     * <li>'null' - DERNull</li>\n     * <li>'oid' - DERObjectIdentifier</li>\n     * <li>'enum' - DEREnumerated</li>\n     * <li>'utf8str' - DERUTF8String</li>\n     * <li>'numstr' - DERNumericString</li>\n     * <li>'prnstr' - DERPrintableString</li>\n     * <li>'telstr' - DERTeletexString</li>\n     * <li>'ia5str' - DERIA5String</li>\n     * <li>'utctime' - DERUTCTime</li>\n     * <li>'gentime' - DERGeneralizedTime</li>\n     * <li>'seq' - DERSequence</li>\n     * <li>'set' - DERSet</li>\n     * <li>'tag' - DERTaggedObject</li>\n     * </ul>\n     * @example\n     * newObject({'prnstr': 'aaa'});\n     * newObject({'seq': [{'int': 3}, {'prnstr': 'aaa'}]})\n     * // ASN.1 Tagged Object\n     * newObject({'tag': {'tag': 'a1',\n     *                    'explicit': true,\n     *                    'obj': {'seq': [{'int': 3}, {'prnstr': 'aaa'}]}}});\n     * // more simple representation of ASN.1 Tagged Object\n     * newObject({'tag': ['a1',\n     *                    true,\n     *                    {'seq': [\n     *                      {'int': 3},\n     *                      {'prnstr': 'aaa'}]}\n     *                   ]});\n     */\n    this.newObject = function(param) {\n        var _KJUR = KJUR,\n            _KJUR_asn1 = _KJUR.asn1,\n            _DERBoolean = _KJUR_asn1.DERBoolean,\n            _DERInteger = _KJUR_asn1.DERInteger,\n            _DERBitString = _KJUR_asn1.DERBitString,\n            _DEROctetString = _KJUR_asn1.DEROctetString,\n            _DERNull = _KJUR_asn1.DERNull,\n            _DERObjectIdentifier = _KJUR_asn1.DERObjectIdentifier,\n            _DEREnumerated = _KJUR_asn1.DEREnumerated,\n            _DERUTF8String = _KJUR_asn1.DERUTF8String,\n            _DERNumericString = _KJUR_asn1.DERNumericString,\n            _DERPrintableString = _KJUR_asn1.DERPrintableString,\n            _DERTeletexString = _KJUR_asn1.DERTeletexString,\n            _DERIA5String = _KJUR_asn1.DERIA5String,\n            _DERUTCTime = _KJUR_asn1.DERUTCTime,\n            _DERGeneralizedTime = _KJUR_asn1.DERGeneralizedTime,\n            _DERSequence = _KJUR_asn1.DERSequence,\n            _DERSet = _KJUR_asn1.DERSet,\n            _DERTaggedObject = _KJUR_asn1.DERTaggedObject,\n            _newObject = _KJUR_asn1.ASN1Util.newObject;\n\n        var keys = Object.keys(param);\n        if (keys.length != 1)\n            throw \"key of param shall be only one.\";\n        var key = keys[0];\n\n        if (\":bool:int:bitstr:octstr:null:oid:enum:utf8str:numstr:prnstr:telstr:ia5str:utctime:gentime:seq:set:tag:\".indexOf(\":\" + key + \":\") == -1)\n            throw \"undefined key: \" + key;\n\n        if (key == \"bool\")    return new _DERBoolean(param[key]);\n        if (key == \"int\")     return new _DERInteger(param[key]);\n        if (key == \"bitstr\")  return new _DERBitString(param[key]);\n        if (key == \"octstr\")  return new _DEROctetString(param[key]);\n        if (key == \"null\")    return new _DERNull(param[key]);\n        if (key == \"oid\")     return new _DERObjectIdentifier(param[key]);\n        if (key == \"enum\")    return new _DEREnumerated(param[key]);\n        if (key == \"utf8str\") return new _DERUTF8String(param[key]);\n        if (key == \"numstr\")  return new _DERNumericString(param[key]);\n        if (key == \"prnstr\")  return new _DERPrintableString(param[key]);\n        if (key == \"telstr\")  return new _DERTeletexString(param[key]);\n        if (key == \"ia5str\")  return new _DERIA5String(param[key]);\n        if (key == \"utctime\") return new _DERUTCTime(param[key]);\n        if (key == \"gentime\") return new _DERGeneralizedTime(param[key]);\n\n        if (key == \"seq\") {\n            var paramList = param[key];\n            var a = [];\n            for (var i = 0; i < paramList.length; i++) {\n                var asn1Obj = _newObject(paramList[i]);\n                a.push(asn1Obj);\n            }\n            return new _DERSequence({'array': a});\n        }\n\n        if (key == \"set\") {\n            var paramList = param[key];\n            var a = [];\n            for (var i = 0; i < paramList.length; i++) {\n                var asn1Obj = _newObject(paramList[i]);\n                a.push(asn1Obj);\n            }\n            return new _DERSet({'array': a});\n        }\n\n        if (key == \"tag\") {\n            var tagParam = param[key];\n            if (Object.prototype.toString.call(tagParam) === '[object Array]' &&\n                tagParam.length == 3) {\n                var obj = _newObject(tagParam[2]);\n                return new _DERTaggedObject({tag: tagParam[0],\n                    explicit: tagParam[1],\n                    obj: obj});\n            } else {\n                var newParam = {};\n                if (tagParam.explicit !== undefined)\n                    newParam.explicit = tagParam.explicit;\n                if (tagParam.tag !== undefined)\n                    newParam.tag = tagParam.tag;\n                if (tagParam.obj === undefined)\n                    throw \"obj shall be specified for 'tag'.\";\n                newParam.obj = _newObject(tagParam.obj);\n                return new _DERTaggedObject(newParam);\n            }\n        }\n    };\n\n    /**\n     * get encoded hexadecimal string of ASN1Object specifed by JSON parameters\n     * @name jsonToASN1HEX\n     * @memberOf KJUR.asn1.ASN1Util\n     * @function\n     * @param {Array} param JSON parameter to generate ASN1Object\n     * @return hexadecimal string of ASN1Object\n     * @since asn1 1.0.4\n     * @description\n     * As for ASN.1 object representation of JSON object,\n     * please see {@link newObject}.\n     * @example\n     * jsonToASN1HEX({'prnstr': 'aaa'});\n     */\n    this.jsonToASN1HEX = function(param) {\n        var asn1Obj = this.newObject(param);\n        return asn1Obj.getEncodedHex();\n    };\n};\n\n/**\n * get dot noted oid number string from hexadecimal value of OID\n * @name oidHexToInt\n * @memberOf KJUR.asn1.ASN1Util\n * @function\n * @param {String} hex hexadecimal value of object identifier\n * @return {String} dot noted string of object identifier\n * @since jsrsasign 4.8.3 asn1 1.0.7\n * @description\n * This static method converts from hexadecimal string representation of\n * ASN.1 value of object identifier to oid number string.\n * @example\n * KJUR.asn1.ASN1Util.oidHexToInt('550406') &rarr; \"2.5.4.6\"\n */\nKJUR.asn1.ASN1Util.oidHexToInt = function(hex) {\n    var s = \"\";\n    var i01 = parseInt(hex.substr(0, 2), 16);\n    var i0 = Math.floor(i01 / 40);\n    var i1 = i01 % 40;\n    var s = i0 + \".\" + i1;\n\n    var binbuf = \"\";\n    for (var i = 2; i < hex.length; i += 2) {\n        var value = parseInt(hex.substr(i, 2), 16);\n        var bin = (\"00000000\" + value.toString(2)).slice(- 8);\n        binbuf = binbuf + bin.substr(1, 7);\n        if (bin.substr(0, 1) == \"0\") {\n            var bi = new BigInteger(binbuf, 2);\n            s = s + \".\" + bi.toString(10);\n            binbuf = \"\";\n        }\n    }\n    return s;\n};\n\n/**\n * get hexadecimal value of object identifier from dot noted oid value\n * @name oidIntToHex\n * @memberOf KJUR.asn1.ASN1Util\n * @function\n * @param {String} oidString dot noted string of object identifier\n * @return {String} hexadecimal value of object identifier\n * @since jsrsasign 4.8.3 asn1 1.0.7\n * @description\n * This static method converts from object identifier value string.\n * to hexadecimal string representation of it.\n * @example\n * KJUR.asn1.ASN1Util.oidIntToHex(\"2.5.4.6\") &rarr; \"550406\"\n */\nKJUR.asn1.ASN1Util.oidIntToHex = function(oidString) {\n    var itox = function(i) {\n        var h = i.toString(16);\n        if (h.length == 1) h = '0' + h;\n        return h;\n    };\n\n    var roidtox = function(roid) {\n        var h = '';\n        var bi = new BigInteger(roid, 10);\n        var b = bi.toString(2);\n        var padLen = 7 - b.length % 7;\n        if (padLen == 7) padLen = 0;\n        var bPad = '';\n        for (var i = 0; i < padLen; i++) bPad += '0';\n        b = bPad + b;\n        for (var i = 0; i < b.length - 1; i += 7) {\n            var b8 = b.substr(i, 7);\n            if (i != b.length - 7) b8 = '1' + b8;\n            h += itox(parseInt(b8, 2));\n        }\n        return h;\n    };\n\n    if (! oidString.match(/^[0-9.]+$/)) {\n        throw \"malformed oid string: \" + oidString;\n    }\n    var h = '';\n    var a = oidString.split('.');\n    var i0 = parseInt(a[0]) * 40 + parseInt(a[1]);\n    h += itox(i0);\n    a.splice(0, 2);\n    for (var i = 0; i < a.length; i++) {\n        h += roidtox(a[i]);\n    }\n    return h;\n};\n\n\n// ********************************************************************\n//  Abstract ASN.1 Classes\n// ********************************************************************\n\n// ********************************************************************\n\n/**\n * base class for ASN.1 DER encoder object\n * @name KJUR.asn1.ASN1Object\n * @class base class for ASN.1 DER encoder object\n * @property {Boolean} isModified flag whether internal data was changed\n * @property {String} hTLV hexadecimal string of ASN.1 TLV\n * @property {String} hT hexadecimal string of ASN.1 TLV tag(T)\n * @property {String} hL hexadecimal string of ASN.1 TLV length(L)\n * @property {String} hV hexadecimal string of ASN.1 TLV value(V)\n * @description\n */\nKJUR.asn1.ASN1Object = function() {\n    var hV = '';\n\n    /**\n     * get hexadecimal ASN.1 TLV length(L) bytes from TLV value(V)\n     * @name getLengthHexFromValue\n     * @memberOf KJUR.asn1.ASN1Object#\n     * @function\n     * @return {String} hexadecimal string of ASN.1 TLV length(L)\n     */\n    this.getLengthHexFromValue = function() {\n        if (typeof this.hV == \"undefined\" || this.hV == null) {\n            throw \"this.hV is null or undefined.\";\n        }\n        if (this.hV.length % 2 == 1) {\n            throw \"value hex must be even length: n=\" + hV.length + \",v=\" + this.hV;\n        }\n        var n = this.hV.length / 2;\n        var hN = n.toString(16);\n        if (hN.length % 2 == 1) {\n            hN = \"0\" + hN;\n        }\n        if (n < 128) {\n            return hN;\n        } else {\n            var hNlen = hN.length / 2;\n            if (hNlen > 15) {\n                throw \"ASN.1 length too long to represent by 8x: n = \" + n.toString(16);\n            }\n            var head = 128 + hNlen;\n            return head.toString(16) + hN;\n        }\n    };\n\n    /**\n     * get hexadecimal string of ASN.1 TLV bytes\n     * @name getEncodedHex\n     * @memberOf KJUR.asn1.ASN1Object#\n     * @function\n     * @return {String} hexadecimal string of ASN.1 TLV\n     */\n    this.getEncodedHex = function() {\n        if (this.hTLV == null || this.isModified) {\n            this.hV = this.getFreshValueHex();\n            this.hL = this.getLengthHexFromValue();\n            this.hTLV = this.hT + this.hL + this.hV;\n            this.isModified = false;\n            //alert(\"first time: \" + this.hTLV);\n        }\n        return this.hTLV;\n    };\n\n    /**\n     * get hexadecimal string of ASN.1 TLV value(V) bytes\n     * @name getValueHex\n     * @memberOf KJUR.asn1.ASN1Object#\n     * @function\n     * @return {String} hexadecimal string of ASN.1 TLV value(V) bytes\n     */\n    this.getValueHex = function() {\n        this.getEncodedHex();\n        return this.hV;\n    };\n\n    this.getFreshValueHex = function() {\n        return '';\n    };\n};\n\n// == BEGIN DERAbstractString ================================================\n/**\n * base class for ASN.1 DER string classes\n * @name KJUR.asn1.DERAbstractString\n * @class base class for ASN.1 DER string classes\n * @param {Array} params associative array of parameters (ex. {'str': 'aaa'})\n * @property {String} s internal string of value\n * @extends KJUR.asn1.ASN1Object\n * @description\n * <br/>\n * As for argument 'params' for constructor, you can specify one of\n * following properties:\n * <ul>\n * <li>str - specify initial ASN.1 value(V) by a string</li>\n * <li>hex - specify initial ASN.1 value(V) by a hexadecimal string</li>\n * </ul>\n * NOTE: 'params' can be omitted.\n */\nKJUR.asn1.DERAbstractString = function(params) {\n    KJUR.asn1.DERAbstractString.superclass.constructor.call(this);\n\n    /**\n     * get string value of this string object\n     * @name getString\n     * @memberOf KJUR.asn1.DERAbstractString#\n     * @function\n     * @return {String} string value of this string object\n     */\n    this.getString = function() {\n        return this.s;\n    };\n\n    /**\n     * set value by a string\n     * @name setString\n     * @memberOf KJUR.asn1.DERAbstractString#\n     * @function\n     * @param {String} newS value by a string to set\n     */\n    this.setString = function(newS) {\n        this.hTLV = null;\n        this.isModified = true;\n        this.s = newS;\n        this.hV = stohex(this.s);\n    };\n\n    /**\n     * set value by a hexadecimal string\n     * @name setStringHex\n     * @memberOf KJUR.asn1.DERAbstractString#\n     * @function\n     * @param {String} newHexString value by a hexadecimal string to set\n     */\n    this.setStringHex = function(newHexString) {\n        this.hTLV = null;\n        this.isModified = true;\n        this.s = null;\n        this.hV = newHexString;\n    };\n\n    this.getFreshValueHex = function() {\n        return this.hV;\n    };\n\n    if (typeof params != \"undefined\") {\n        if (typeof params == \"string\") {\n            this.setString(params);\n        } else if (typeof params['str'] != \"undefined\") {\n            this.setString(params['str']);\n        } else if (typeof params['hex'] != \"undefined\") {\n            this.setStringHex(params['hex']);\n        }\n    }\n};\nYAHOO.lang.extend(KJUR.asn1.DERAbstractString, KJUR.asn1.ASN1Object);\n// == END   DERAbstractString ================================================\n\n// == BEGIN DERAbstractTime ==================================================\n/**\n * base class for ASN.1 DER Generalized/UTCTime class\n * @name KJUR.asn1.DERAbstractTime\n * @class base class for ASN.1 DER Generalized/UTCTime class\n * @param {Array} params associative array of parameters (ex. {'str': '130430235959Z'})\n * @extends KJUR.asn1.ASN1Object\n * @description\n * @see KJUR.asn1.ASN1Object - superclass\n */\nKJUR.asn1.DERAbstractTime = function(params) {\n    KJUR.asn1.DERAbstractTime.superclass.constructor.call(this);\n\n    // --- PRIVATE METHODS --------------------\n    this.localDateToUTC = function(d) {\n        utc = d.getTime() + (d.getTimezoneOffset() * 60000);\n        var utcDate = new Date(utc);\n        return utcDate;\n    };\n\n    /*\n     * format date string by Data object\n     * @name formatDate\n     * @memberOf KJUR.asn1.AbstractTime;\n     * @param {Date} dateObject\n     * @param {string} type 'utc' or 'gen'\n     * @param {boolean} withMillis flag for with millisections or not\n     * @description\n     * 'withMillis' flag is supported from asn1 1.0.6.\n     */\n    this.formatDate = function(dateObject, type, withMillis) {\n        var pad = this.zeroPadding;\n        var d = this.localDateToUTC(dateObject);\n        var year = String(d.getFullYear());\n        if (type == 'utc') year = year.substr(2, 2);\n        var month = pad(String(d.getMonth() + 1), 2);\n        var day = pad(String(d.getDate()), 2);\n        var hour = pad(String(d.getHours()), 2);\n        var min = pad(String(d.getMinutes()), 2);\n        var sec = pad(String(d.getSeconds()), 2);\n        var s = year + month + day + hour + min + sec;\n        if (withMillis === true) {\n            var millis = d.getMilliseconds();\n            if (millis != 0) {\n                var sMillis = pad(String(millis), 3);\n                sMillis = sMillis.replace(/[0]+$/, \"\");\n                s = s + \".\" + sMillis;\n            }\n        }\n        return s + \"Z\";\n    };\n\n    this.zeroPadding = function(s, len) {\n        if (s.length >= len) return s;\n        return new Array(len - s.length + 1).join('0') + s;\n    };\n\n    // --- PUBLIC METHODS --------------------\n    /**\n     * get string value of this string object\n     * @name getString\n     * @memberOf KJUR.asn1.DERAbstractTime#\n     * @function\n     * @return {String} string value of this time object\n     */\n    this.getString = function() {\n        return this.s;\n    };\n\n    /**\n     * set value by a string\n     * @name setString\n     * @memberOf KJUR.asn1.DERAbstractTime#\n     * @function\n     * @param {String} newS value by a string to set such like \"130430235959Z\"\n     */\n    this.setString = function(newS) {\n        this.hTLV = null;\n        this.isModified = true;\n        this.s = newS;\n        this.hV = stohex(newS);\n    };\n\n    /**\n     * set value by a Date object\n     * @name setByDateValue\n     * @memberOf KJUR.asn1.DERAbstractTime#\n     * @function\n     * @param {Integer} year year of date (ex. 2013)\n     * @param {Integer} month month of date between 1 and 12 (ex. 12)\n     * @param {Integer} day day of month\n     * @param {Integer} hour hours of date\n     * @param {Integer} min minutes of date\n     * @param {Integer} sec seconds of date\n     */\n    this.setByDateValue = function(year, month, day, hour, min, sec) {\n        var dateObject = new Date(Date.UTC(year, month - 1, day, hour, min, sec, 0));\n        this.setByDate(dateObject);\n    };\n\n    this.getFreshValueHex = function() {\n        return this.hV;\n    };\n};\nYAHOO.lang.extend(KJUR.asn1.DERAbstractTime, KJUR.asn1.ASN1Object);\n// == END   DERAbstractTime ==================================================\n\n// == BEGIN DERAbstractStructured ============================================\n/**\n * base class for ASN.1 DER structured class\n * @name KJUR.asn1.DERAbstractStructured\n * @class base class for ASN.1 DER structured class\n * @property {Array} asn1Array internal array of ASN1Object\n * @extends KJUR.asn1.ASN1Object\n * @description\n * @see KJUR.asn1.ASN1Object - superclass\n */\nKJUR.asn1.DERAbstractStructured = function(params) {\n    KJUR.asn1.DERAbstractString.superclass.constructor.call(this);\n\n    /**\n     * set value by array of ASN1Object\n     * @name setByASN1ObjectArray\n     * @memberOf KJUR.asn1.DERAbstractStructured#\n     * @function\n     * @param {array} asn1ObjectArray array of ASN1Object to set\n     */\n    this.setByASN1ObjectArray = function(asn1ObjectArray) {\n        this.hTLV = null;\n        this.isModified = true;\n        this.asn1Array = asn1ObjectArray;\n    };\n\n    /**\n     * append an ASN1Object to internal array\n     * @name appendASN1Object\n     * @memberOf KJUR.asn1.DERAbstractStructured#\n     * @function\n     * @param {ASN1Object} asn1Object to add\n     */\n    this.appendASN1Object = function(asn1Object) {\n        this.hTLV = null;\n        this.isModified = true;\n        this.asn1Array.push(asn1Object);\n    };\n\n    this.asn1Array = new Array();\n    if (typeof params != \"undefined\") {\n        if (typeof params['array'] != \"undefined\") {\n            this.asn1Array = params['array'];\n        }\n    }\n};\nYAHOO.lang.extend(KJUR.asn1.DERAbstractStructured, KJUR.asn1.ASN1Object);\n\n\n// ********************************************************************\n//  ASN.1 Object Classes\n// ********************************************************************\n\n// ********************************************************************\n/**\n * class for ASN.1 DER Boolean\n * @name KJUR.asn1.DERBoolean\n * @class class for ASN.1 DER Boolean\n * @extends KJUR.asn1.ASN1Object\n * @description\n * @see KJUR.asn1.ASN1Object - superclass\n */\nKJUR.asn1.DERBoolean = function() {\n    KJUR.asn1.DERBoolean.superclass.constructor.call(this);\n    this.hT = \"01\";\n    this.hTLV = \"0101ff\";\n};\nYAHOO.lang.extend(KJUR.asn1.DERBoolean, KJUR.asn1.ASN1Object);\n\n// ********************************************************************\n/**\n * class for ASN.1 DER Integer\n * @name KJUR.asn1.DERInteger\n * @class class for ASN.1 DER Integer\n * @extends KJUR.asn1.ASN1Object\n * @description\n * <br/>\n * As for argument 'params' for constructor, you can specify one of\n * following properties:\n * <ul>\n * <li>int - specify initial ASN.1 value(V) by integer value</li>\n * <li>bigint - specify initial ASN.1 value(V) by BigInteger object</li>\n * <li>hex - specify initial ASN.1 value(V) by a hexadecimal string</li>\n * </ul>\n * NOTE: 'params' can be omitted.\n */\nKJUR.asn1.DERInteger = function(params) {\n    KJUR.asn1.DERInteger.superclass.constructor.call(this);\n    this.hT = \"02\";\n\n    /**\n     * set value by Tom Wu's BigInteger object\n     * @name setByBigInteger\n     * @memberOf KJUR.asn1.DERInteger#\n     * @function\n     * @param {BigInteger} bigIntegerValue to set\n     */\n    this.setByBigInteger = function(bigIntegerValue) {\n        this.hTLV = null;\n        this.isModified = true;\n        this.hV = KJUR.asn1.ASN1Util.bigIntToMinTwosComplementsHex(bigIntegerValue);\n    };\n\n    /**\n     * set value by integer value\n     * @name setByInteger\n     * @memberOf KJUR.asn1.DERInteger\n     * @function\n     * @param {Integer} integer value to set\n     */\n    this.setByInteger = function(intValue) {\n        var bi = new BigInteger(String(intValue), 10);\n        this.setByBigInteger(bi);\n    };\n\n    /**\n     * set value by integer value\n     * @name setValueHex\n     * @memberOf KJUR.asn1.DERInteger#\n     * @function\n     * @param {String} hexadecimal string of integer value\n     * @description\n     * <br/>\n     * NOTE: Value shall be represented by minimum octet length of\n     * two's complement representation.\n     * @example\n     * new KJUR.asn1.DERInteger(123);\n     * new KJUR.asn1.DERInteger({'int': 123});\n     * new KJUR.asn1.DERInteger({'hex': '1fad'});\n     */\n    this.setValueHex = function(newHexString) {\n        this.hV = newHexString;\n    };\n\n    this.getFreshValueHex = function() {\n        return this.hV;\n    };\n\n    if (typeof params != \"undefined\") {\n        if (typeof params['bigint'] != \"undefined\") {\n            this.setByBigInteger(params['bigint']);\n        } else if (typeof params['int'] != \"undefined\") {\n            this.setByInteger(params['int']);\n        } else if (typeof params == \"number\") {\n            this.setByInteger(params);\n        } else if (typeof params['hex'] != \"undefined\") {\n            this.setValueHex(params['hex']);\n        }\n    }\n};\nYAHOO.lang.extend(KJUR.asn1.DERInteger, KJUR.asn1.ASN1Object);\n\n// ********************************************************************\n/**\n * class for ASN.1 DER encoded BitString primitive\n * @name KJUR.asn1.DERBitString\n * @class class for ASN.1 DER encoded BitString primitive\n * @extends KJUR.asn1.ASN1Object\n * @description\n * <br/>\n * As for argument 'params' for constructor, you can specify one of\n * following properties:\n * <ul>\n * <li>bin - specify binary string (ex. '10111')</li>\n * <li>array - specify array of boolean (ex. [true,false,true,true])</li>\n * <li>hex - specify hexadecimal string of ASN.1 value(V) including unused bits</li>\n * <li>obj - specify {@link KJUR.asn1.ASN1Util.newObject}\n * argument for \"BitString encapsulates\" structure.</li>\n * </ul>\n * NOTE1: 'params' can be omitted.<br/>\n * NOTE2: 'obj' parameter have been supported since\n * asn1 1.0.11, jsrsasign 6.1.1 (2016-Sep-25).<br/>\n * @example\n * // default constructor\n * o = new KJUR.asn1.DERBitString();\n * // initialize with binary string\n * o = new KJUR.asn1.DERBitString({bin: \"1011\"});\n * // initialize with boolean array\n * o = new KJUR.asn1.DERBitString({array: [true,false,true,true]});\n * // initialize with hexadecimal string (04 is unused bits)\n * o = new KJUR.asn1.DEROctetString({hex: \"04bac0\"});\n * // initialize with ASN1Util.newObject argument for encapsulated\n * o = new KJUR.asn1.DERBitString({obj: {seq: [{int: 3}, {prnstr: 'aaa'}]}});\n * // above generates a ASN.1 data like this:\n * // BIT STRING, encapsulates {\n * //   SEQUENCE {\n * //     INTEGER 3\n * //     PrintableString 'aaa'\n * //     }\n * //   }\n */\nKJUR.asn1.DERBitString = function(params) {\n    if (params !== undefined && typeof params.obj !== \"undefined\") {\n        var o = KJUR.asn1.ASN1Util.newObject(params.obj);\n        params.hex = \"00\" + o.getEncodedHex();\n    }\n    KJUR.asn1.DERBitString.superclass.constructor.call(this);\n    this.hT = \"03\";\n\n    /**\n     * set ASN.1 value(V) by a hexadecimal string including unused bits\n     * @name setHexValueIncludingUnusedBits\n     * @memberOf KJUR.asn1.DERBitString#\n     * @function\n     * @param {String} newHexStringIncludingUnusedBits\n     */\n    this.setHexValueIncludingUnusedBits = function(newHexStringIncludingUnusedBits) {\n        this.hTLV = null;\n        this.isModified = true;\n        this.hV = newHexStringIncludingUnusedBits;\n    };\n\n    /**\n     * set ASN.1 value(V) by unused bit and hexadecimal string of value\n     * @name setUnusedBitsAndHexValue\n     * @memberOf KJUR.asn1.DERBitString#\n     * @function\n     * @param {Integer} unusedBits\n     * @param {String} hValue\n     */\n    this.setUnusedBitsAndHexValue = function(unusedBits, hValue) {\n        if (unusedBits < 0 || 7 < unusedBits) {\n            throw \"unused bits shall be from 0 to 7: u = \" + unusedBits;\n        }\n        var hUnusedBits = \"0\" + unusedBits;\n        this.hTLV = null;\n        this.isModified = true;\n        this.hV = hUnusedBits + hValue;\n    };\n\n    /**\n     * set ASN.1 DER BitString by binary string<br/>\n     * @name setByBinaryString\n     * @memberOf KJUR.asn1.DERBitString#\n     * @function\n     * @param {String} binaryString binary value string (i.e. '10111')\n     * @description\n     * Its unused bits will be calculated automatically by length of\n     * 'binaryValue'. <br/>\n     * NOTE: Trailing zeros '0' will be ignored.\n     * @example\n     * o = new KJUR.asn1.DERBitString();\n     * o.setByBooleanArray(\"01011\");\n     */\n    this.setByBinaryString = function(binaryString) {\n        binaryString = binaryString.replace(/0+$/, '');\n        var unusedBits = 8 - binaryString.length % 8;\n        if (unusedBits == 8) unusedBits = 0;\n        for (var i = 0; i <= unusedBits; i++) {\n            binaryString += '0';\n        }\n        var h = '';\n        for (var i = 0; i < binaryString.length - 1; i += 8) {\n            var b = binaryString.substr(i, 8);\n            var x = parseInt(b, 2).toString(16);\n            if (x.length == 1) x = '0' + x;\n            h += x;\n        }\n        this.hTLV = null;\n        this.isModified = true;\n        this.hV = '0' + unusedBits + h;\n    };\n\n    /**\n     * set ASN.1 TLV value(V) by an array of boolean<br/>\n     * @name setByBooleanArray\n     * @memberOf KJUR.asn1.DERBitString#\n     * @function\n     * @param {array} booleanArray array of boolean (ex. [true, false, true])\n     * @description\n     * NOTE: Trailing falses will be ignored in the ASN.1 DER Object.\n     * @example\n     * o = new KJUR.asn1.DERBitString();\n     * o.setByBooleanArray([false, true, false, true, true]);\n     */\n    this.setByBooleanArray = function(booleanArray) {\n        var s = '';\n        for (var i = 0; i < booleanArray.length; i++) {\n            if (booleanArray[i] == true) {\n                s += '1';\n            } else {\n                s += '0';\n            }\n        }\n        this.setByBinaryString(s);\n    };\n\n    /**\n     * generate an array of falses with specified length<br/>\n     * @name newFalseArray\n     * @memberOf KJUR.asn1.DERBitString\n     * @function\n     * @param {Integer} nLength length of array to generate\n     * @return {array} array of boolean falses\n     * @description\n     * This static method may be useful to initialize boolean array.\n     * @example\n     * o = new KJUR.asn1.DERBitString();\n     * o.newFalseArray(3) &rarr; [false, false, false]\n     */\n    this.newFalseArray = function(nLength) {\n        var a = new Array(nLength);\n        for (var i = 0; i < nLength; i++) {\n            a[i] = false;\n        }\n        return a;\n    };\n\n    this.getFreshValueHex = function() {\n        return this.hV;\n    };\n\n    if (typeof params != \"undefined\") {\n        if (typeof params == \"string\" && params.toLowerCase().match(/^[0-9a-f]+$/)) {\n            this.setHexValueIncludingUnusedBits(params);\n        } else if (typeof params['hex'] != \"undefined\") {\n            this.setHexValueIncludingUnusedBits(params['hex']);\n        } else if (typeof params['bin'] != \"undefined\") {\n            this.setByBinaryString(params['bin']);\n        } else if (typeof params['array'] != \"undefined\") {\n            this.setByBooleanArray(params['array']);\n        }\n    }\n};\nYAHOO.lang.extend(KJUR.asn1.DERBitString, KJUR.asn1.ASN1Object);\n\n// ********************************************************************\n/**\n * class for ASN.1 DER OctetString<br/>\n * @name KJUR.asn1.DEROctetString\n * @class class for ASN.1 DER OctetString\n * @param {Array} params associative array of parameters (ex. {'str': 'aaa'})\n * @extends KJUR.asn1.DERAbstractString\n * @description\n * This class provides ASN.1 OctetString simple type.<br/>\n * Supported \"params\" attributes are:\n * <ul>\n * <li>str - to set a string as a value</li>\n * <li>hex - to set a hexadecimal string as a value</li>\n * <li>obj - to set a encapsulated ASN.1 value by JSON object\n * which is defined in {@link KJUR.asn1.ASN1Util.newObject}</li>\n * </ul>\n * NOTE: A parameter 'obj' have been supported\n * for \"OCTET STRING, encapsulates\" structure.\n * since asn1 1.0.11, jsrsasign 6.1.1 (2016-Sep-25).\n * @see KJUR.asn1.DERAbstractString - superclass\n * @example\n * // default constructor\n * o = new KJUR.asn1.DEROctetString();\n * // initialize with string\n * o = new KJUR.asn1.DEROctetString({str: \"aaa\"});\n * // initialize with hexadecimal string\n * o = new KJUR.asn1.DEROctetString({hex: \"616161\"});\n * // initialize with ASN1Util.newObject argument\n * o = new KJUR.asn1.DEROctetString({obj: {seq: [{int: 3}, {prnstr: 'aaa'}]}});\n * // above generates a ASN.1 data like this:\n * // OCTET STRING, encapsulates {\n * //   SEQUENCE {\n * //     INTEGER 3\n * //     PrintableString 'aaa'\n * //     }\n * //   }\n */\nKJUR.asn1.DEROctetString = function(params) {\n    if (params !== undefined && typeof params.obj !== \"undefined\") {\n        var o = KJUR.asn1.ASN1Util.newObject(params.obj);\n        params.hex = o.getEncodedHex();\n    }\n    KJUR.asn1.DEROctetString.superclass.constructor.call(this, params);\n    this.hT = \"04\";\n};\nYAHOO.lang.extend(KJUR.asn1.DEROctetString, KJUR.asn1.DERAbstractString);\n\n// ********************************************************************\n/**\n * class for ASN.1 DER Null\n * @name KJUR.asn1.DERNull\n * @class class for ASN.1 DER Null\n * @extends KJUR.asn1.ASN1Object\n * @description\n * @see KJUR.asn1.ASN1Object - superclass\n */\nKJUR.asn1.DERNull = function() {\n    KJUR.asn1.DERNull.superclass.constructor.call(this);\n    this.hT = \"05\";\n    this.hTLV = \"0500\";\n};\nYAHOO.lang.extend(KJUR.asn1.DERNull, KJUR.asn1.ASN1Object);\n\n// ********************************************************************\n/**\n * class for ASN.1 DER ObjectIdentifier\n * @name KJUR.asn1.DERObjectIdentifier\n * @class class for ASN.1 DER ObjectIdentifier\n * @param {Array} params associative array of parameters (ex. {'oid': '2.5.4.5'})\n * @extends KJUR.asn1.ASN1Object\n * @description\n * <br/>\n * As for argument 'params' for constructor, you can specify one of\n * following properties:\n * <ul>\n * <li>oid - specify initial ASN.1 value(V) by a oid string (ex. 2.5.4.13)</li>\n * <li>hex - specify initial ASN.1 value(V) by a hexadecimal string</li>\n * </ul>\n * NOTE: 'params' can be omitted.\n */\nKJUR.asn1.DERObjectIdentifier = function(params) {\n    var itox = function(i) {\n        var h = i.toString(16);\n        if (h.length == 1) h = '0' + h;\n        return h;\n    };\n    var roidtox = function(roid) {\n        var h = '';\n        var bi = new BigInteger(roid, 10);\n        var b = bi.toString(2);\n        var padLen = 7 - b.length % 7;\n        if (padLen == 7) padLen = 0;\n        var bPad = '';\n        for (var i = 0; i < padLen; i++) bPad += '0';\n        b = bPad + b;\n        for (var i = 0; i < b.length - 1; i += 7) {\n            var b8 = b.substr(i, 7);\n            if (i != b.length - 7) b8 = '1' + b8;\n            h += itox(parseInt(b8, 2));\n        }\n        return h;\n    };\n\n    KJUR.asn1.DERObjectIdentifier.superclass.constructor.call(this);\n    this.hT = \"06\";\n\n    /**\n     * set value by a hexadecimal string\n     * @name setValueHex\n     * @memberOf KJUR.asn1.DERObjectIdentifier#\n     * @function\n     * @param {String} newHexString hexadecimal value of OID bytes\n     */\n    this.setValueHex = function(newHexString) {\n        this.hTLV = null;\n        this.isModified = true;\n        this.s = null;\n        this.hV = newHexString;\n    };\n\n    /**\n     * set value by a OID string<br/>\n     * @name setValueOidString\n     * @memberOf KJUR.asn1.DERObjectIdentifier#\n     * @function\n     * @param {String} oidString OID string (ex. 2.5.4.13)\n     * @example\n     * o = new KJUR.asn1.DERObjectIdentifier();\n     * o.setValueOidString(\"2.5.4.13\");\n     */\n    this.setValueOidString = function(oidString) {\n        if (! oidString.match(/^[0-9.]+$/)) {\n            throw \"malformed oid string: \" + oidString;\n        }\n        var h = '';\n        var a = oidString.split('.');\n        var i0 = parseInt(a[0]) * 40 + parseInt(a[1]);\n        h += itox(i0);\n        a.splice(0, 2);\n        for (var i = 0; i < a.length; i++) {\n            h += roidtox(a[i]);\n        }\n        this.hTLV = null;\n        this.isModified = true;\n        this.s = null;\n        this.hV = h;\n    };\n\n    /**\n     * set value by a OID name\n     * @name setValueName\n     * @memberOf KJUR.asn1.DERObjectIdentifier#\n     * @function\n     * @param {String} oidName OID name (ex. 'serverAuth')\n     * @since 1.0.1\n     * @description\n     * OID name shall be defined in 'KJUR.asn1.x509.OID.name2oidList'.\n     * Otherwise raise error.\n     * @example\n     * o = new KJUR.asn1.DERObjectIdentifier();\n     * o.setValueName(\"serverAuth\");\n     */\n    this.setValueName = function(oidName) {\n        var oid = KJUR.asn1.x509.OID.name2oid(oidName);\n        if (oid !== '') {\n            this.setValueOidString(oid);\n        } else {\n            throw \"DERObjectIdentifier oidName undefined: \" + oidName;\n        }\n    };\n\n    this.getFreshValueHex = function() {\n        return this.hV;\n    };\n\n    if (params !== undefined) {\n        if (typeof params === \"string\") {\n            if (params.match(/^[0-2].[0-9.]+$/)) {\n                this.setValueOidString(params);\n            } else {\n                this.setValueName(params);\n            }\n        } else if (params.oid !== undefined) {\n            this.setValueOidString(params.oid);\n        } else if (params.hex !== undefined) {\n            this.setValueHex(params.hex);\n        } else if (params.name !== undefined) {\n            this.setValueName(params.name);\n        }\n    }\n};\nYAHOO.lang.extend(KJUR.asn1.DERObjectIdentifier, KJUR.asn1.ASN1Object);\n\n// ********************************************************************\n/**\n * class for ASN.1 DER Enumerated\n * @name KJUR.asn1.DEREnumerated\n * @class class for ASN.1 DER Enumerated\n * @extends KJUR.asn1.ASN1Object\n * @description\n * <br/>\n * As for argument 'params' for constructor, you can specify one of\n * following properties:\n * <ul>\n * <li>int - specify initial ASN.1 value(V) by integer value</li>\n * <li>hex - specify initial ASN.1 value(V) by a hexadecimal string</li>\n * </ul>\n * NOTE: 'params' can be omitted.\n * @example\n * new KJUR.asn1.DEREnumerated(123);\n * new KJUR.asn1.DEREnumerated({int: 123});\n * new KJUR.asn1.DEREnumerated({hex: '1fad'});\n */\nKJUR.asn1.DEREnumerated = function(params) {\n    KJUR.asn1.DEREnumerated.superclass.constructor.call(this);\n    this.hT = \"0a\";\n\n    /**\n     * set value by Tom Wu's BigInteger object\n     * @name setByBigInteger\n     * @memberOf KJUR.asn1.DEREnumerated#\n     * @function\n     * @param {BigInteger} bigIntegerValue to set\n     */\n    this.setByBigInteger = function(bigIntegerValue) {\n        this.hTLV = null;\n        this.isModified = true;\n        this.hV = KJUR.asn1.ASN1Util.bigIntToMinTwosComplementsHex(bigIntegerValue);\n    };\n\n    /**\n     * set value by integer value\n     * @name setByInteger\n     * @memberOf KJUR.asn1.DEREnumerated#\n     * @function\n     * @param {Integer} integer value to set\n     */\n    this.setByInteger = function(intValue) {\n        var bi = new BigInteger(String(intValue), 10);\n        this.setByBigInteger(bi);\n    };\n\n    /**\n     * set value by integer value\n     * @name setValueHex\n     * @memberOf KJUR.asn1.DEREnumerated#\n     * @function\n     * @param {String} hexadecimal string of integer value\n     * @description\n     * <br/>\n     * NOTE: Value shall be represented by minimum octet length of\n     * two's complement representation.\n     */\n    this.setValueHex = function(newHexString) {\n        this.hV = newHexString;\n    };\n\n    this.getFreshValueHex = function() {\n        return this.hV;\n    };\n\n    if (typeof params != \"undefined\") {\n        if (typeof params['int'] != \"undefined\") {\n            this.setByInteger(params['int']);\n        } else if (typeof params == \"number\") {\n            this.setByInteger(params);\n        } else if (typeof params['hex'] != \"undefined\") {\n            this.setValueHex(params['hex']);\n        }\n    }\n};\nYAHOO.lang.extend(KJUR.asn1.DEREnumerated, KJUR.asn1.ASN1Object);\n\n// ********************************************************************\n/**\n * class for ASN.1 DER UTF8String\n * @name KJUR.asn1.DERUTF8String\n * @class class for ASN.1 DER UTF8String\n * @param {Array} params associative array of parameters (ex. {'str': 'aaa'})\n * @extends KJUR.asn1.DERAbstractString\n * @description\n * @see KJUR.asn1.DERAbstractString - superclass\n */\nKJUR.asn1.DERUTF8String = function(params) {\n    KJUR.asn1.DERUTF8String.superclass.constructor.call(this, params);\n    this.hT = \"0c\";\n};\nYAHOO.lang.extend(KJUR.asn1.DERUTF8String, KJUR.asn1.DERAbstractString);\n\n// ********************************************************************\n/**\n * class for ASN.1 DER NumericString\n * @name KJUR.asn1.DERNumericString\n * @class class for ASN.1 DER NumericString\n * @param {Array} params associative array of parameters (ex. {'str': 'aaa'})\n * @extends KJUR.asn1.DERAbstractString\n * @description\n * @see KJUR.asn1.DERAbstractString - superclass\n */\nKJUR.asn1.DERNumericString = function(params) {\n    KJUR.asn1.DERNumericString.superclass.constructor.call(this, params);\n    this.hT = \"12\";\n};\nYAHOO.lang.extend(KJUR.asn1.DERNumericString, KJUR.asn1.DERAbstractString);\n\n// ********************************************************************\n/**\n * class for ASN.1 DER PrintableString\n * @name KJUR.asn1.DERPrintableString\n * @class class for ASN.1 DER PrintableString\n * @param {Array} params associative array of parameters (ex. {'str': 'aaa'})\n * @extends KJUR.asn1.DERAbstractString\n * @description\n * @see KJUR.asn1.DERAbstractString - superclass\n */\nKJUR.asn1.DERPrintableString = function(params) {\n    KJUR.asn1.DERPrintableString.superclass.constructor.call(this, params);\n    this.hT = \"13\";\n};\nYAHOO.lang.extend(KJUR.asn1.DERPrintableString, KJUR.asn1.DERAbstractString);\n\n// ********************************************************************\n/**\n * class for ASN.1 DER TeletexString\n * @name KJUR.asn1.DERTeletexString\n * @class class for ASN.1 DER TeletexString\n * @param {Array} params associative array of parameters (ex. {'str': 'aaa'})\n * @extends KJUR.asn1.DERAbstractString\n * @description\n * @see KJUR.asn1.DERAbstractString - superclass\n */\nKJUR.asn1.DERTeletexString = function(params) {\n    KJUR.asn1.DERTeletexString.superclass.constructor.call(this, params);\n    this.hT = \"14\";\n};\nYAHOO.lang.extend(KJUR.asn1.DERTeletexString, KJUR.asn1.DERAbstractString);\n\n// ********************************************************************\n/**\n * class for ASN.1 DER IA5String\n * @name KJUR.asn1.DERIA5String\n * @class class for ASN.1 DER IA5String\n * @param {Array} params associative array of parameters (ex. {'str': 'aaa'})\n * @extends KJUR.asn1.DERAbstractString\n * @description\n * @see KJUR.asn1.DERAbstractString - superclass\n */\nKJUR.asn1.DERIA5String = function(params) {\n    KJUR.asn1.DERIA5String.superclass.constructor.call(this, params);\n    this.hT = \"16\";\n};\nYAHOO.lang.extend(KJUR.asn1.DERIA5String, KJUR.asn1.DERAbstractString);\n\n// ********************************************************************\n/**\n * class for ASN.1 DER UTCTime\n * @name KJUR.asn1.DERUTCTime\n * @class class for ASN.1 DER UTCTime\n * @param {Array} params associative array of parameters (ex. {'str': '130430235959Z'})\n * @extends KJUR.asn1.DERAbstractTime\n * @description\n * <br/>\n * As for argument 'params' for constructor, you can specify one of\n * following properties:\n * <ul>\n * <li>str - specify initial ASN.1 value(V) by a string (ex.'130430235959Z')</li>\n * <li>hex - specify initial ASN.1 value(V) by a hexadecimal string</li>\n * <li>date - specify Date object.</li>\n * </ul>\n * NOTE: 'params' can be omitted.\n * <h4>EXAMPLES</h4>\n * @example\n * d1 = new KJUR.asn1.DERUTCTime();\n * d1.setString('130430125959Z');\n *\n * d2 = new KJUR.asn1.DERUTCTime({'str': '130430125959Z'});\n * d3 = new KJUR.asn1.DERUTCTime({'date': new Date(Date.UTC(2015, 0, 31, 0, 0, 0, 0))});\n * d4 = new KJUR.asn1.DERUTCTime('130430125959Z');\n */\nKJUR.asn1.DERUTCTime = function(params) {\n    KJUR.asn1.DERUTCTime.superclass.constructor.call(this, params);\n    this.hT = \"17\";\n\n    /**\n     * set value by a Date object<br/>\n     * @name setByDate\n     * @memberOf KJUR.asn1.DERUTCTime#\n     * @function\n     * @param {Date} dateObject Date object to set ASN.1 value(V)\n     * @example\n     * o = new KJUR.asn1.DERUTCTime();\n     * o.setByDate(new Date(\"2016/12/31\"));\n     */\n    this.setByDate = function(dateObject) {\n        this.hTLV = null;\n        this.isModified = true;\n        this.date = dateObject;\n        this.s = this.formatDate(this.date, 'utc');\n        this.hV = stohex(this.s);\n    };\n\n    this.getFreshValueHex = function() {\n        if (typeof this.date == \"undefined\" && typeof this.s == \"undefined\") {\n            this.date = new Date();\n            this.s = this.formatDate(this.date, 'utc');\n            this.hV = stohex(this.s);\n        }\n        return this.hV;\n    };\n\n    if (params !== undefined) {\n        if (params.str !== undefined) {\n            this.setString(params.str);\n        } else if (typeof params == \"string\" && params.match(/^[0-9]{12}Z$/)) {\n            this.setString(params);\n        } else if (params.hex !== undefined) {\n            this.setStringHex(params.hex);\n        } else if (params.date !== undefined) {\n            this.setByDate(params.date);\n        }\n    }\n};\nYAHOO.lang.extend(KJUR.asn1.DERUTCTime, KJUR.asn1.DERAbstractTime);\n\n// ********************************************************************\n/**\n * class for ASN.1 DER GeneralizedTime\n * @name KJUR.asn1.DERGeneralizedTime\n * @class class for ASN.1 DER GeneralizedTime\n * @param {Array} params associative array of parameters (ex. {'str': '20130430235959Z'})\n * @property {Boolean} withMillis flag to show milliseconds or not\n * @extends KJUR.asn1.DERAbstractTime\n * @description\n * <br/>\n * As for argument 'params' for constructor, you can specify one of\n * following properties:\n * <ul>\n * <li>str - specify initial ASN.1 value(V) by a string (ex.'20130430235959Z')</li>\n * <li>hex - specify initial ASN.1 value(V) by a hexadecimal string</li>\n * <li>date - specify Date object.</li>\n * <li>millis - specify flag to show milliseconds (from 1.0.6)</li>\n * </ul>\n * NOTE1: 'params' can be omitted.\n * NOTE2: 'withMillis' property is supported from asn1 1.0.6.\n */\nKJUR.asn1.DERGeneralizedTime = function(params) {\n    KJUR.asn1.DERGeneralizedTime.superclass.constructor.call(this, params);\n    this.hT = \"18\";\n    this.withMillis = false;\n\n    /**\n     * set value by a Date object\n     * @name setByDate\n     * @memberOf KJUR.asn1.DERGeneralizedTime#\n     * @function\n     * @param {Date} dateObject Date object to set ASN.1 value(V)\n     * @example\n     * When you specify UTC time, use 'Date.UTC' method like this:<br/>\n     * o1 = new DERUTCTime();\n     * o1.setByDate(date);\n     *\n     * date = new Date(Date.UTC(2015, 0, 31, 23, 59, 59, 0)); #2015JAN31 23:59:59\n     */\n    this.setByDate = function(dateObject) {\n        this.hTLV = null;\n        this.isModified = true;\n        this.date = dateObject;\n        this.s = this.formatDate(this.date, 'gen', this.withMillis);\n        this.hV = stohex(this.s);\n    };\n\n    this.getFreshValueHex = function() {\n        if (this.date === undefined && this.s === undefined) {\n            this.date = new Date();\n            this.s = this.formatDate(this.date, 'gen', this.withMillis);\n            this.hV = stohex(this.s);\n        }\n        return this.hV;\n    };\n\n    if (params !== undefined) {\n        if (params.str !== undefined) {\n            this.setString(params.str);\n        } else if (typeof params == \"string\" && params.match(/^[0-9]{14}Z$/)) {\n            this.setString(params);\n        } else if (params.hex !== undefined) {\n            this.setStringHex(params.hex);\n        } else if (params.date !== undefined) {\n            this.setByDate(params.date);\n        }\n        if (params.millis === true) {\n            this.withMillis = true;\n        }\n    }\n};\nYAHOO.lang.extend(KJUR.asn1.DERGeneralizedTime, KJUR.asn1.DERAbstractTime);\n\n// ********************************************************************\n/**\n * class for ASN.1 DER Sequence\n * @name KJUR.asn1.DERSequence\n * @class class for ASN.1 DER Sequence\n * @extends KJUR.asn1.DERAbstractStructured\n * @description\n * <br/>\n * As for argument 'params' for constructor, you can specify one of\n * following properties:\n * <ul>\n * <li>array - specify array of ASN1Object to set elements of content</li>\n * </ul>\n * NOTE: 'params' can be omitted.\n */\nKJUR.asn1.DERSequence = function(params) {\n    KJUR.asn1.DERSequence.superclass.constructor.call(this, params);\n    this.hT = \"30\";\n    this.getFreshValueHex = function() {\n        var h = '';\n        for (var i = 0; i < this.asn1Array.length; i++) {\n            var asn1Obj = this.asn1Array[i];\n            h += asn1Obj.getEncodedHex();\n        }\n        this.hV = h;\n        return this.hV;\n    };\n};\nYAHOO.lang.extend(KJUR.asn1.DERSequence, KJUR.asn1.DERAbstractStructured);\n\n// ********************************************************************\n/**\n * class for ASN.1 DER Set\n * @name KJUR.asn1.DERSet\n * @class class for ASN.1 DER Set\n * @extends KJUR.asn1.DERAbstractStructured\n * @description\n * <br/>\n * As for argument 'params' for constructor, you can specify one of\n * following properties:\n * <ul>\n * <li>array - specify array of ASN1Object to set elements of content</li>\n * <li>sortflag - flag for sort (default: true). ASN.1 BER is not sorted in 'SET OF'.</li>\n * </ul>\n * NOTE1: 'params' can be omitted.<br/>\n * NOTE2: sortflag is supported since 1.0.5.\n */\nKJUR.asn1.DERSet = function(params) {\n    KJUR.asn1.DERSet.superclass.constructor.call(this, params);\n    this.hT = \"31\";\n    this.sortFlag = true; // item shall be sorted only in ASN.1 DER\n    this.getFreshValueHex = function() {\n        var a = new Array();\n        for (var i = 0; i < this.asn1Array.length; i++) {\n            var asn1Obj = this.asn1Array[i];\n            a.push(asn1Obj.getEncodedHex());\n        }\n        if (this.sortFlag == true) a.sort();\n        this.hV = a.join('');\n        return this.hV;\n    };\n\n    if (typeof params != \"undefined\") {\n        if (typeof params.sortflag != \"undefined\" &&\n            params.sortflag == false)\n            this.sortFlag = false;\n    }\n};\nYAHOO.lang.extend(KJUR.asn1.DERSet, KJUR.asn1.DERAbstractStructured);\n\n// ********************************************************************\n/**\n * class for ASN.1 DER TaggedObject\n * @name KJUR.asn1.DERTaggedObject\n * @class class for ASN.1 DER TaggedObject\n * @extends KJUR.asn1.ASN1Object\n * @description\n * <br/>\n * Parameter 'tagNoNex' is ASN.1 tag(T) value for this object.\n * For example, if you find '[1]' tag in a ASN.1 dump,\n * 'tagNoHex' will be 'a1'.\n * <br/>\n * As for optional argument 'params' for constructor, you can specify *ANY* of\n * following properties:\n * <ul>\n * <li>explicit - specify true if this is explicit tag otherwise false\n *     (default is 'true').</li>\n * <li>tag - specify tag (default is 'a0' which means [0])</li>\n * <li>obj - specify ASN1Object which is tagged</li>\n * </ul>\n * @example\n * d1 = new KJUR.asn1.DERUTF8String({'str':'a'});\n * d2 = new KJUR.asn1.DERTaggedObject({'obj': d1});\n * hex = d2.getEncodedHex();\n */\nKJUR.asn1.DERTaggedObject = function(params) {\n    KJUR.asn1.DERTaggedObject.superclass.constructor.call(this);\n    this.hT = \"a0\";\n    this.hV = '';\n    this.isExplicit = true;\n    this.asn1Object = null;\n\n    /**\n     * set value by an ASN1Object\n     * @name setString\n     * @memberOf KJUR.asn1.DERTaggedObject#\n     * @function\n     * @param {Boolean} isExplicitFlag flag for explicit/implicit tag\n     * @param {Integer} tagNoHex hexadecimal string of ASN.1 tag\n     * @param {ASN1Object} asn1Object ASN.1 to encapsulate\n     */\n    this.setASN1Object = function(isExplicitFlag, tagNoHex, asn1Object) {\n        this.hT = tagNoHex;\n        this.isExplicit = isExplicitFlag;\n        this.asn1Object = asn1Object;\n        if (this.isExplicit) {\n            this.hV = this.asn1Object.getEncodedHex();\n            this.hTLV = null;\n            this.isModified = true;\n        } else {\n            this.hV = null;\n            this.hTLV = asn1Object.getEncodedHex();\n            this.hTLV = this.hTLV.replace(/^../, tagNoHex);\n            this.isModified = false;\n        }\n    };\n\n    this.getFreshValueHex = function() {\n        return this.hV;\n    };\n\n    if (typeof params != \"undefined\") {\n        if (typeof params['tag'] != \"undefined\") {\n            this.hT = params['tag'];\n        }\n        if (typeof params['explicit'] != \"undefined\") {\n            this.isExplicit = params['explicit'];\n        }\n        if (typeof params['obj'] != \"undefined\") {\n            this.asn1Object = params['obj'];\n            this.setASN1Object(this.isExplicit, this.hT, this.asn1Object);\n        }\n    }\n};\nYAHOO.lang.extend(KJUR.asn1.DERTaggedObject, KJUR.asn1.ASN1Object);\n\n/**\n * Create a new JSEncryptRSAKey that extends Tom Wu's RSA key object.\n * This object is just a decorator for parsing the key parameter\n * @param {string|Object} key - The key in string format, or an object containing\n * the parameters needed to build a RSAKey object.\n * @constructor\n */\nvar JSEncryptRSAKey = /** @class */ (function (_super) {\n    __extends(JSEncryptRSAKey, _super);\n    function JSEncryptRSAKey(key) {\n        var _this = _super.call(this) || this;\n        // Call the super constructor.\n        //  RSAKey.call(this);\n        // If a key key was provided.\n        if (key) {\n            // If this is a string...\n            if (typeof key === \"string\") {\n                _this.parseKey(key);\n            }\n            else if (JSEncryptRSAKey.hasPrivateKeyProperty(key) ||\n                JSEncryptRSAKey.hasPublicKeyProperty(key)) {\n                // Set the values for the key.\n                _this.parsePropertiesFrom(key);\n            }\n        }\n        return _this;\n    }\n    /**\n     * Method to parse a pem encoded string containing both a public or private key.\n     * The method will translate the pem encoded string in a der encoded string and\n     * will parse private key and public key parameters. This method accepts public key\n     * in the rsaencryption pkcs #1 format (oid: 1.2.840.113549.1.1.1).\n     *\n     * @todo Check how many rsa formats use the same format of pkcs #1.\n     *\n     * The format is defined as:\n     * PublicKeyInfo ::= SEQUENCE {\n     *   algorithm       AlgorithmIdentifier,\n     *   PublicKey       BIT STRING\n     * }\n     * Where AlgorithmIdentifier is:\n     * AlgorithmIdentifier ::= SEQUENCE {\n     *   algorithm       OBJECT IDENTIFIER,     the OID of the enc algorithm\n     *   parameters      ANY DEFINED BY algorithm OPTIONAL (NULL for PKCS #1)\n     * }\n     * and PublicKey is a SEQUENCE encapsulated in a BIT STRING\n     * RSAPublicKey ::= SEQUENCE {\n     *   modulus           INTEGER,  -- n\n     *   publicExponent    INTEGER   -- e\n     * }\n     * it's possible to examine the structure of the keys obtained from openssl using\n     * an asn.1 dumper as the one used here to parse the components: http://lapo.it/asn1js/\n     * @argument {string} pem the pem encoded string, can include the BEGIN/END header/footer\n     * @private\n     */\n    JSEncryptRSAKey.prototype.parseKey = function (pem) {\n        try {\n            var modulus = 0;\n            var public_exponent = 0;\n            var reHex = /^\\s*(?:[0-9A-Fa-f][0-9A-Fa-f]\\s*)+$/;\n            var der = reHex.test(pem) ? Hex.decode(pem) : Base64.unarmor(pem);\n            var asn1 = ASN1.decode(der);\n            // Fixes a bug with OpenSSL 1.0+ private keys\n            if (asn1.sub.length === 3) {\n                asn1 = asn1.sub[2].sub[0];\n            }\n            if (asn1.sub.length === 9) {\n                // Parse the private key.\n                modulus = asn1.sub[1].getHexStringValue(); // bigint\n                this.n = parseBigInt(modulus, 16);\n                public_exponent = asn1.sub[2].getHexStringValue(); // int\n                this.e = parseInt(public_exponent, 16);\n                var private_exponent = asn1.sub[3].getHexStringValue(); // bigint\n                this.d = parseBigInt(private_exponent, 16);\n                var prime1 = asn1.sub[4].getHexStringValue(); // bigint\n                this.p = parseBigInt(prime1, 16);\n                var prime2 = asn1.sub[5].getHexStringValue(); // bigint\n                this.q = parseBigInt(prime2, 16);\n                var exponent1 = asn1.sub[6].getHexStringValue(); // bigint\n                this.dmp1 = parseBigInt(exponent1, 16);\n                var exponent2 = asn1.sub[7].getHexStringValue(); // bigint\n                this.dmq1 = parseBigInt(exponent2, 16);\n                var coefficient = asn1.sub[8].getHexStringValue(); // bigint\n                this.coeff = parseBigInt(coefficient, 16);\n            }\n            else if (asn1.sub.length === 2) {\n                // Parse the public key.\n                var bit_string = asn1.sub[1];\n                var sequence = bit_string.sub[0];\n                modulus = sequence.sub[0].getHexStringValue();\n                this.n = parseBigInt(modulus, 16);\n                public_exponent = sequence.sub[1].getHexStringValue();\n                this.e = parseInt(public_exponent, 16);\n            }\n            else {\n                return false;\n            }\n            return true;\n        }\n        catch (ex) {\n            return false;\n        }\n    };\n    /**\n     * Translate rsa parameters in a hex encoded string representing the rsa key.\n     *\n     * The translation follow the ASN.1 notation :\n     * RSAPrivateKey ::= SEQUENCE {\n     *   version           Version,\n     *   modulus           INTEGER,  -- n\n     *   publicExponent    INTEGER,  -- e\n     *   privateExponent   INTEGER,  -- d\n     *   prime1            INTEGER,  -- p\n     *   prime2            INTEGER,  -- q\n     *   exponent1         INTEGER,  -- d mod (p1)\n     *   exponent2         INTEGER,  -- d mod (q-1)\n     *   coefficient       INTEGER,  -- (inverse of q) mod p\n     * }\n     * @returns {string}  DER Encoded String representing the rsa private key\n     * @private\n     */\n    JSEncryptRSAKey.prototype.getPrivateBaseKey = function () {\n        var options = {\n            array: [\n                new KJUR.asn1.DERInteger({ int: 0 }),\n                new KJUR.asn1.DERInteger({ bigint: this.n }),\n                new KJUR.asn1.DERInteger({ int: this.e }),\n                new KJUR.asn1.DERInteger({ bigint: this.d }),\n                new KJUR.asn1.DERInteger({ bigint: this.p }),\n                new KJUR.asn1.DERInteger({ bigint: this.q }),\n                new KJUR.asn1.DERInteger({ bigint: this.dmp1 }),\n                new KJUR.asn1.DERInteger({ bigint: this.dmq1 }),\n                new KJUR.asn1.DERInteger({ bigint: this.coeff })\n            ]\n        };\n        var seq = new KJUR.asn1.DERSequence(options);\n        return seq.getEncodedHex();\n    };\n    /**\n     * base64 (pem) encoded version of the DER encoded representation\n     * @returns {string} pem encoded representation without header and footer\n     * @public\n     */\n    JSEncryptRSAKey.prototype.getPrivateBaseKeyB64 = function () {\n        return hex2b64(this.getPrivateBaseKey());\n    };\n    /**\n     * Translate rsa parameters in a hex encoded string representing the rsa public key.\n     * The representation follow the ASN.1 notation :\n     * PublicKeyInfo ::= SEQUENCE {\n     *   algorithm       AlgorithmIdentifier,\n     *   PublicKey       BIT STRING\n     * }\n     * Where AlgorithmIdentifier is:\n     * AlgorithmIdentifier ::= SEQUENCE {\n     *   algorithm       OBJECT IDENTIFIER,     the OID of the enc algorithm\n     *   parameters      ANY DEFINED BY algorithm OPTIONAL (NULL for PKCS #1)\n     * }\n     * and PublicKey is a SEQUENCE encapsulated in a BIT STRING\n     * RSAPublicKey ::= SEQUENCE {\n     *   modulus           INTEGER,  -- n\n     *   publicExponent    INTEGER   -- e\n     * }\n     * @returns {string} DER Encoded String representing the rsa public key\n     * @private\n     */\n    JSEncryptRSAKey.prototype.getPublicBaseKey = function () {\n        var first_sequence = new KJUR.asn1.DERSequence({\n            array: [\n                new KJUR.asn1.DERObjectIdentifier({ oid: \"1.2.840.113549.1.1.1\" }),\n                new KJUR.asn1.DERNull()\n            ]\n        });\n        var second_sequence = new KJUR.asn1.DERSequence({\n            array: [\n                new KJUR.asn1.DERInteger({ bigint: this.n }),\n                new KJUR.asn1.DERInteger({ int: this.e })\n            ]\n        });\n        var bit_string = new KJUR.asn1.DERBitString({\n            hex: \"00\" + second_sequence.getEncodedHex()\n        });\n        var seq = new KJUR.asn1.DERSequence({\n            array: [\n                first_sequence,\n                bit_string\n            ]\n        });\n        return seq.getEncodedHex();\n    };\n    /**\n     * base64 (pem) encoded version of the DER encoded representation\n     * @returns {string} pem encoded representation without header and footer\n     * @public\n     */\n    JSEncryptRSAKey.prototype.getPublicBaseKeyB64 = function () {\n        return hex2b64(this.getPublicBaseKey());\n    };\n    /**\n     * wrap the string in block of width chars. The default value for rsa keys is 64\n     * characters.\n     * @param {string} str the pem encoded string without header and footer\n     * @param {Number} [width=64] - the length the string has to be wrapped at\n     * @returns {string}\n     * @private\n     */\n    JSEncryptRSAKey.wordwrap = function (str, width) {\n        width = width || 64;\n        if (!str) {\n            return str;\n        }\n        var regex = \"(.{1,\" + width + \"})( +|$\\n?)|(.{1,\" + width + \"})\";\n        return str.match(RegExp(regex, \"g\")).join(\"\\n\");\n    };\n    /**\n     * Retrieve the pem encoded private key\n     * @returns {string} the pem encoded private key with header/footer\n     * @public\n     */\n    JSEncryptRSAKey.prototype.getPrivateKey = function () {\n        var key = \"-----BEGIN RSA PRIVATE KEY-----\\n\";\n        key += JSEncryptRSAKey.wordwrap(this.getPrivateBaseKeyB64()) + \"\\n\";\n        key += \"-----END RSA PRIVATE KEY-----\";\n        return key;\n    };\n    /**\n     * Retrieve the pem encoded public key\n     * @returns {string} the pem encoded public key with header/footer\n     * @public\n     */\n    JSEncryptRSAKey.prototype.getPublicKey = function () {\n        var key = \"-----BEGIN PUBLIC KEY-----\\n\";\n        key += JSEncryptRSAKey.wordwrap(this.getPublicBaseKeyB64()) + \"\\n\";\n        key += \"-----END PUBLIC KEY-----\";\n        return key;\n    };\n    /**\n     * Check if the object contains the necessary parameters to populate the rsa modulus\n     * and public exponent parameters.\n     * @param {Object} [obj={}] - An object that may contain the two public key\n     * parameters\n     * @returns {boolean} true if the object contains both the modulus and the public exponent\n     * properties (n and e)\n     * @todo check for types of n and e. N should be a parseable bigInt object, E should\n     * be a parseable integer number\n     * @private\n     */\n    JSEncryptRSAKey.hasPublicKeyProperty = function (obj) {\n        obj = obj || {};\n        return (obj.hasOwnProperty(\"n\") &&\n            obj.hasOwnProperty(\"e\"));\n    };\n    /**\n     * Check if the object contains ALL the parameters of an RSA key.\n     * @param {Object} [obj={}] - An object that may contain nine rsa key\n     * parameters\n     * @returns {boolean} true if the object contains all the parameters needed\n     * @todo check for types of the parameters all the parameters but the public exponent\n     * should be parseable bigint objects, the public exponent should be a parseable integer number\n     * @private\n     */\n    JSEncryptRSAKey.hasPrivateKeyProperty = function (obj) {\n        obj = obj || {};\n        return (obj.hasOwnProperty(\"n\") &&\n            obj.hasOwnProperty(\"e\") &&\n            obj.hasOwnProperty(\"d\") &&\n            obj.hasOwnProperty(\"p\") &&\n            obj.hasOwnProperty(\"q\") &&\n            obj.hasOwnProperty(\"dmp1\") &&\n            obj.hasOwnProperty(\"dmq1\") &&\n            obj.hasOwnProperty(\"coeff\"));\n    };\n    /**\n     * Parse the properties of obj in the current rsa object. Obj should AT LEAST\n     * include the modulus and public exponent (n, e) parameters.\n     * @param {Object} obj - the object containing rsa parameters\n     * @private\n     */\n    JSEncryptRSAKey.prototype.parsePropertiesFrom = function (obj) {\n        this.n = obj.n;\n        this.e = obj.e;\n        if (obj.hasOwnProperty(\"d\")) {\n            this.d = obj.d;\n            this.p = obj.p;\n            this.q = obj.q;\n            this.dmp1 = obj.dmp1;\n            this.dmq1 = obj.dmq1;\n            this.coeff = obj.coeff;\n        }\n    };\n    return JSEncryptRSAKey;\n}(RSAKey));\n\n/**\n *\n * @param {Object} [options = {}] - An object to customize JSEncrypt behaviour\n * possible parameters are:\n * - default_key_size        {number}  default: 1024 the key size in bit\n * - default_public_exponent {string}  default: '010001' the hexadecimal representation of the public exponent\n * - log                     {boolean} default: false whether log warn/error or not\n * @constructor\n */\nvar JSEncrypt = /** @class */ (function () {\n    function JSEncrypt(options) {\n        options = options || {};\n        this.default_key_size = parseInt(options.default_key_size, 10) || 1024;\n        this.default_public_exponent = options.default_public_exponent || \"010001\"; // 65537 default openssl public exponent for rsa key type\n        this.log = options.log || false;\n        // The private and public key.\n        this.key = null;\n    }\n    /**\n     * Method to set the rsa key parameter (one method is enough to set both the public\n     * and the private key, since the private key contains the public key paramenters)\n     * Log a warning if logs are enabled\n     * @param {Object|string} key the pem encoded string or an object (with or without header/footer)\n     * @public\n     */\n    JSEncrypt.prototype.setKey = function (key) {\n        if (this.log && this.key) {\n            console.warn(\"A key was already set, overriding existing.\");\n        }\n        this.key = new JSEncryptRSAKey(key);\n    };\n    /**\n     * Proxy method for setKey, for api compatibility\n     * @see setKey\n     * @public\n     */\n    JSEncrypt.prototype.setPrivateKey = function (privkey) {\n        // Create the key.\n        this.setKey(privkey);\n    };\n    /**\n     * Proxy method for setKey, for api compatibility\n     * @see setKey\n     * @public\n     */\n    JSEncrypt.prototype.setPublicKey = function (pubkey) {\n        // Sets the public key.\n        this.setKey(pubkey);\n    };\n    /**\n     * Proxy method for RSAKey object's decrypt, decrypt the string using the private\n     * components of the rsa key object. Note that if the object was not set will be created\n     * on the fly (by the getKey method) using the parameters passed in the JSEncrypt constructor\n     * @param {string} str base64 encoded crypted string to decrypt\n     * @return {string} the decrypted string\n     * @public\n     */\n    JSEncrypt.prototype.decrypt = function (str) {\n        // Return the decrypted string.\n        try {\n            return this.getKey().decrypt(b64tohex(str));\n        }\n        catch (ex) {\n            return false;\n        }\n    };\n    /**\n     * Proxy method for RSAKey object's encrypt, encrypt the string using the public\n     * components of the rsa key object. Note that if the object was not set will be created\n     * on the fly (by the getKey method) using the parameters passed in the JSEncrypt constructor\n     * @param {string} str the string to encrypt\n     * @return {string} the encrypted string encoded in base64\n     * @public\n     */\n    JSEncrypt.prototype.encrypt = function (str) {\n        // Return the encrypted string.\n        try {\n            return hex2b64(this.getKey().encrypt(str));\n        }\n        catch (ex) {\n            return false;\n        }\n    };\n    /**\n     * Proxy method for RSAKey object's sign.\n     * @param {string} str the string to sign\n     * @param {function} digestMethod hash method\n     * @param {string} digestName the name of the hash algorithm\n     * @return {string} the signature encoded in base64\n     * @public\n     */\n    JSEncrypt.prototype.sign = function (str, digestMethod, digestName) {\n        // return the RSA signature of 'str' in 'hex' format.\n        try {\n            return hex2b64(this.getKey().sign(str, digestMethod, digestName));\n        }\n        catch (ex) {\n            return false;\n        }\n    };\n    /**\n     * Proxy method for RSAKey object's verify.\n     * @param {string} str the string to verify\n     * @param {string} signature the signature encoded in base64 to compare the string to\n     * @param {function} digestMethod hash method\n     * @return {boolean} whether the data and signature match\n     * @public\n     */\n    JSEncrypt.prototype.verify = function (str, signature, digestMethod) {\n        // Return the decrypted 'digest' of the signature.\n        try {\n            return this.getKey().verify(str, b64tohex(signature), digestMethod);\n        }\n        catch (ex) {\n            return false;\n        }\n    };\n    /**\n     * Getter for the current JSEncryptRSAKey object. If it doesn't exists a new object\n     * will be created and returned\n     * @param {callback} [cb] the callback to be called if we want the key to be generated\n     * in an async fashion\n     * @returns {JSEncryptRSAKey} the JSEncryptRSAKey object\n     * @public\n     */\n    JSEncrypt.prototype.getKey = function (cb) {\n        // Only create new if it does not exist.\n        if (!this.key) {\n            // Get a new private key.\n            this.key = new JSEncryptRSAKey();\n            if (cb && {}.toString.call(cb) === \"[object Function]\") {\n                this.key.generateAsync(this.default_key_size, this.default_public_exponent, cb);\n                return;\n            }\n            // Generate the key.\n            this.key.generate(this.default_key_size, this.default_public_exponent);\n        }\n        return this.key;\n    };\n    /**\n     * Returns the pem encoded representation of the private key\n     * If the key doesn't exists a new key will be created\n     * @returns {string} pem encoded representation of the private key WITH header and footer\n     * @public\n     */\n    JSEncrypt.prototype.getPrivateKey = function () {\n        // Return the private representation of this key.\n        return this.getKey().getPrivateKey();\n    };\n    /**\n     * Returns the pem encoded representation of the private key\n     * If the key doesn't exists a new key will be created\n     * @returns {string} pem encoded representation of the private key WITHOUT header and footer\n     * @public\n     */\n    JSEncrypt.prototype.getPrivateKeyB64 = function () {\n        // Return the private representation of this key.\n        return this.getKey().getPrivateBaseKeyB64();\n    };\n    /**\n     * Returns the pem encoded representation of the public key\n     * If the key doesn't exists a new key will be created\n     * @returns {string} pem encoded representation of the public key WITH header and footer\n     * @public\n     */\n    JSEncrypt.prototype.getPublicKey = function () {\n        // Return the private representation of this key.\n        return this.getKey().getPublicKey();\n    };\n    /**\n     * Returns the pem encoded representation of the public key\n     * If the key doesn't exists a new key will be created\n     * @returns {string} pem encoded representation of the public key WITHOUT header and footer\n     * @public\n     */\n    JSEncrypt.prototype.getPublicKeyB64 = function () {\n        // Return the private representation of this key.\n        return this.getKey().getPublicBaseKeyB64();\n    };\n    JSEncrypt.version = \"3.0.0-rc.1\";\n    return JSEncrypt;\n}());\n\nwindow.JSEncrypt = JSEncrypt;\n\nexports.JSEncrypt = JSEncrypt;\nexports.default = JSEncrypt;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n\n/***/ })\n\n},[248]);\n\n\n// WEBPACK FOOTER //\n// jsencrypt.js?ef9dbd2226cfd03c3fb1","import jsencrypt from 'jsencrypt'\r\nvar crypt = new jsencrypt();\r\nexport default{\r\n\tencode(publickey, str){\r\n\t\tcrypt.setPublicKey('-----BEGIN PUBLIC KEY-----' + publickey + '-----END PUBLIC KEY-----');\r\n\t\treturn crypt.encrypt(str);\r\n\t},\r\n\tdecode(privatekey, str){\r\n\t\tcrypt.setPrivateKey('-----BEGIN RSA PRIVATE KEY-----' + privatekey + '-----END RSA PRIVATE KEY-----');\r\n\t\treturn crypt.decrypt(encrypted);\r\n\t}\r\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/jsencrypt.js","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(factory((global.JSEncrypt = {})));\n}(this, (function (exports) { 'use strict';\n\nvar BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\nfunction int2char(n) {\n    return BI_RM.charAt(n);\n}\n//#region BIT_OPERATIONS\n// (public) this & a\nfunction op_and(x, y) {\n    return x & y;\n}\n// (public) this | a\nfunction op_or(x, y) {\n    return x | y;\n}\n// (public) this ^ a\nfunction op_xor(x, y) {\n    return x ^ y;\n}\n// (public) this & ~a\nfunction op_andnot(x, y) {\n    return x & ~y;\n}\n// return index of lowest 1-bit in x, x < 2^31\nfunction lbit(x) {\n    if (x == 0) {\n        return -1;\n    }\n    var r = 0;\n    if ((x & 0xffff) == 0) {\n        x >>= 16;\n        r += 16;\n    }\n    if ((x & 0xff) == 0) {\n        x >>= 8;\n        r += 8;\n    }\n    if ((x & 0xf) == 0) {\n        x >>= 4;\n        r += 4;\n    }\n    if ((x & 3) == 0) {\n        x >>= 2;\n        r += 2;\n    }\n    if ((x & 1) == 0) {\n        ++r;\n    }\n    return r;\n}\n// return number of 1 bits in x\nfunction cbit(x) {\n    var r = 0;\n    while (x != 0) {\n        x &= x - 1;\n        ++r;\n    }\n    return r;\n}\n//#endregion BIT_OPERATIONS\n\nvar b64map = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nvar b64pad = \"=\";\nfunction hex2b64(h) {\n    var i;\n    var c;\n    var ret = \"\";\n    for (i = 0; i + 3 <= h.length; i += 3) {\n        c = parseInt(h.substring(i, i + 3), 16);\n        ret += b64map.charAt(c >> 6) + b64map.charAt(c & 63);\n    }\n    if (i + 1 == h.length) {\n        c = parseInt(h.substring(i, i + 1), 16);\n        ret += b64map.charAt(c << 2);\n    }\n    else if (i + 2 == h.length) {\n        c = parseInt(h.substring(i, i + 2), 16);\n        ret += b64map.charAt(c >> 2) + b64map.charAt((c & 3) << 4);\n    }\n    while ((ret.length & 3) > 0) {\n        ret += b64pad;\n    }\n    return ret;\n}\n// convert a base64 string to hex\nfunction b64tohex(s) {\n    var ret = \"\";\n    var i;\n    var k = 0; // b64 state, 0-3\n    var slop = 0;\n    for (i = 0; i < s.length; ++i) {\n        if (s.charAt(i) == b64pad) {\n            break;\n        }\n        var v = b64map.indexOf(s.charAt(i));\n        if (v < 0) {\n            continue;\n        }\n        if (k == 0) {\n            ret += int2char(v >> 2);\n            slop = v & 3;\n            k = 1;\n        }\n        else if (k == 1) {\n            ret += int2char((slop << 2) | (v >> 4));\n            slop = v & 0xf;\n            k = 2;\n        }\n        else if (k == 2) {\n            ret += int2char(slop);\n            ret += int2char(v >> 2);\n            slop = v & 3;\n            k = 3;\n        }\n        else {\n            ret += int2char((slop << 2) | (v >> 4));\n            ret += int2char(v & 0xf);\n            k = 0;\n        }\n    }\n    if (k == 1) {\n        ret += int2char(slop << 2);\n    }\n    return ret;\n}\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\n\n// Hex JavaScript decoder\n// Copyright (c) 2008-2013 Lapo Luchini <lapo@lapo.it>\n// Permission to use, copy, modify, and/or distribute this software for any\n// purpose with or without fee is hereby granted, provided that the above\n// copyright notice and this permission notice appear in all copies.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n/*jshint browser: true, strict: true, immed: true, latedef: true, undef: true, regexdash: false */\nvar decoder;\nvar Hex = {\n    decode: function (a) {\n        var i;\n        if (decoder === undefined) {\n            var hex = \"0123456789ABCDEF\";\n            var ignore = \" \\f\\n\\r\\t\\u00A0\\u2028\\u2029\";\n            decoder = {};\n            for (i = 0; i < 16; ++i) {\n                decoder[hex.charAt(i)] = i;\n            }\n            hex = hex.toLowerCase();\n            for (i = 10; i < 16; ++i) {\n                decoder[hex.charAt(i)] = i;\n            }\n            for (i = 0; i < ignore.length; ++i) {\n                decoder[ignore.charAt(i)] = -1;\n            }\n        }\n        var out = [];\n        var bits = 0;\n        var char_count = 0;\n        for (i = 0; i < a.length; ++i) {\n            var c = a.charAt(i);\n            if (c == \"=\") {\n                break;\n            }\n            c = decoder[c];\n            if (c == -1) {\n                continue;\n            }\n            if (c === undefined) {\n                throw new Error(\"Illegal character at offset \" + i);\n            }\n            bits |= c;\n            if (++char_count >= 2) {\n                out[out.length] = bits;\n                bits = 0;\n                char_count = 0;\n            }\n            else {\n                bits <<= 4;\n            }\n        }\n        if (char_count) {\n            throw new Error(\"Hex encoding incomplete: 4 bits missing\");\n        }\n        return out;\n    }\n};\n\n// Base64 JavaScript decoder\n// Copyright (c) 2008-2013 Lapo Luchini <lapo@lapo.it>\n// Permission to use, copy, modify, and/or distribute this software for any\n// purpose with or without fee is hereby granted, provided that the above\n// copyright notice and this permission notice appear in all copies.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n/*jshint browser: true, strict: true, immed: true, latedef: true, undef: true, regexdash: false */\nvar decoder$1;\nvar Base64 = {\n    decode: function (a) {\n        var i;\n        if (decoder$1 === undefined) {\n            var b64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n            var ignore = \"= \\f\\n\\r\\t\\u00A0\\u2028\\u2029\";\n            decoder$1 = Object.create(null);\n            for (i = 0; i < 64; ++i) {\n                decoder$1[b64.charAt(i)] = i;\n            }\n            for (i = 0; i < ignore.length; ++i) {\n                decoder$1[ignore.charAt(i)] = -1;\n            }\n        }\n        var out = [];\n        var bits = 0;\n        var char_count = 0;\n        for (i = 0; i < a.length; ++i) {\n            var c = a.charAt(i);\n            if (c == \"=\") {\n                break;\n            }\n            c = decoder$1[c];\n            if (c == -1) {\n                continue;\n            }\n            if (c === undefined) {\n                throw new Error(\"Illegal character at offset \" + i);\n            }\n            bits |= c;\n            if (++char_count >= 4) {\n                out[out.length] = (bits >> 16);\n                out[out.length] = (bits >> 8) & 0xFF;\n                out[out.length] = bits & 0xFF;\n                bits = 0;\n                char_count = 0;\n            }\n            else {\n                bits <<= 6;\n            }\n        }\n        switch (char_count) {\n            case 1:\n                throw new Error(\"Base64 encoding incomplete: at least 2 bits missing\");\n            case 2:\n                out[out.length] = (bits >> 10);\n                break;\n            case 3:\n                out[out.length] = (bits >> 16);\n                out[out.length] = (bits >> 8) & 0xFF;\n                break;\n        }\n        return out;\n    },\n    re: /-----BEGIN [^-]+-----([A-Za-z0-9+\\/=\\s]+)-----END [^-]+-----|begin-base64[^\\n]+\\n([A-Za-z0-9+\\/=\\s]+)====/,\n    unarmor: function (a) {\n        var m = Base64.re.exec(a);\n        if (m) {\n            if (m[1]) {\n                a = m[1];\n            }\n            else if (m[2]) {\n                a = m[2];\n            }\n            else {\n                throw new Error(\"RegExp out of sync\");\n            }\n        }\n        return Base64.decode(a);\n    }\n};\n\n// Big integer base-10 printing library\n// Copyright (c) 2014 Lapo Luchini <lapo@lapo.it>\n// Permission to use, copy, modify, and/or distribute this software for any\n// purpose with or without fee is hereby granted, provided that the above\n// copyright notice and this permission notice appear in all copies.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n/*jshint browser: true, strict: true, immed: true, latedef: true, undef: true, regexdash: false */\nvar max = 10000000000000; // biggest integer that can still fit 2^53 when multiplied by 256\nvar Int10 = /** @class */ (function () {\n    function Int10(value) {\n        this.buf = [+value || 0];\n    }\n    Int10.prototype.mulAdd = function (m, c) {\n        // assert(m <= 256)\n        var b = this.buf;\n        var l = b.length;\n        var i;\n        var t;\n        for (i = 0; i < l; ++i) {\n            t = b[i] * m + c;\n            if (t < max) {\n                c = 0;\n            }\n            else {\n                c = 0 | (t / max);\n                t -= c * max;\n            }\n            b[i] = t;\n        }\n        if (c > 0) {\n            b[i] = c;\n        }\n    };\n    Int10.prototype.sub = function (c) {\n        // assert(m <= 256)\n        var b = this.buf;\n        var l = b.length;\n        var i;\n        var t;\n        for (i = 0; i < l; ++i) {\n            t = b[i] - c;\n            if (t < 0) {\n                t += max;\n                c = 1;\n            }\n            else {\n                c = 0;\n            }\n            b[i] = t;\n        }\n        while (b[b.length - 1] === 0) {\n            b.pop();\n        }\n    };\n    Int10.prototype.toString = function (base) {\n        if ((base || 10) != 10) {\n            throw new Error(\"only base 10 is supported\");\n        }\n        var b = this.buf;\n        var s = b[b.length - 1].toString();\n        for (var i = b.length - 2; i >= 0; --i) {\n            s += (max + b[i]).toString().substring(1);\n        }\n        return s;\n    };\n    Int10.prototype.valueOf = function () {\n        var b = this.buf;\n        var v = 0;\n        for (var i = b.length - 1; i >= 0; --i) {\n            v = v * max + b[i];\n        }\n        return v;\n    };\n    Int10.prototype.simplify = function () {\n        var b = this.buf;\n        return (b.length == 1) ? b[0] : this;\n    };\n    return Int10;\n}());\n\n// ASN.1 JavaScript decoder\nvar ellipsis = \"\\u2026\";\nvar reTimeS = /^(\\d\\d)(0[1-9]|1[0-2])(0[1-9]|[12]\\d|3[01])([01]\\d|2[0-3])(?:([0-5]\\d)(?:([0-5]\\d)(?:[.,](\\d{1,3}))?)?)?(Z|[-+](?:[0]\\d|1[0-2])([0-5]\\d)?)?$/;\nvar reTimeL = /^(\\d\\d\\d\\d)(0[1-9]|1[0-2])(0[1-9]|[12]\\d|3[01])([01]\\d|2[0-3])(?:([0-5]\\d)(?:([0-5]\\d)(?:[.,](\\d{1,3}))?)?)?(Z|[-+](?:[0]\\d|1[0-2])([0-5]\\d)?)?$/;\nfunction stringCut(str, len) {\n    if (str.length > len) {\n        str = str.substring(0, len) + ellipsis;\n    }\n    return str;\n}\nvar Stream = /** @class */ (function () {\n    function Stream(enc, pos) {\n        this.hexDigits = \"0123456789ABCDEF\";\n        if (enc instanceof Stream) {\n            this.enc = enc.enc;\n            this.pos = enc.pos;\n        }\n        else {\n            // enc should be an array or a binary string\n            this.enc = enc;\n            this.pos = pos;\n        }\n    }\n    Stream.prototype.get = function (pos) {\n        if (pos === undefined) {\n            pos = this.pos++;\n        }\n        if (pos >= this.enc.length) {\n            throw new Error(\"Requesting byte offset \" + pos + \" on a stream of length \" + this.enc.length);\n        }\n        return (\"string\" === typeof this.enc) ? this.enc.charCodeAt(pos) : this.enc[pos];\n    };\n    Stream.prototype.hexByte = function (b) {\n        return this.hexDigits.charAt((b >> 4) & 0xF) + this.hexDigits.charAt(b & 0xF);\n    };\n    Stream.prototype.hexDump = function (start, end, raw) {\n        var s = \"\";\n        for (var i = start; i < end; ++i) {\n            s += this.hexByte(this.get(i));\n            if (raw !== true) {\n                switch (i & 0xF) {\n                    case 0x7:\n                        s += \"  \";\n                        break;\n                    case 0xF:\n                        s += \"\\n\";\n                        break;\n                    default:\n                        s += \" \";\n                }\n            }\n        }\n        return s;\n    };\n    Stream.prototype.isASCII = function (start, end) {\n        for (var i = start; i < end; ++i) {\n            var c = this.get(i);\n            if (c < 32 || c > 176) {\n                return false;\n            }\n        }\n        return true;\n    };\n    Stream.prototype.parseStringISO = function (start, end) {\n        var s = \"\";\n        for (var i = start; i < end; ++i) {\n            s += String.fromCharCode(this.get(i));\n        }\n        return s;\n    };\n    Stream.prototype.parseStringUTF = function (start, end) {\n        var s = \"\";\n        for (var i = start; i < end;) {\n            var c = this.get(i++);\n            if (c < 128) {\n                s += String.fromCharCode(c);\n            }\n            else if ((c > 191) && (c < 224)) {\n                s += String.fromCharCode(((c & 0x1F) << 6) | (this.get(i++) & 0x3F));\n            }\n            else {\n                s += String.fromCharCode(((c & 0x0F) << 12) | ((this.get(i++) & 0x3F) << 6) | (this.get(i++) & 0x3F));\n            }\n        }\n        return s;\n    };\n    Stream.prototype.parseStringBMP = function (start, end) {\n        var str = \"\";\n        var hi;\n        var lo;\n        for (var i = start; i < end;) {\n            hi = this.get(i++);\n            lo = this.get(i++);\n            str += String.fromCharCode((hi << 8) | lo);\n        }\n        return str;\n    };\n    Stream.prototype.parseTime = function (start, end, shortYear) {\n        var s = this.parseStringISO(start, end);\n        var m = (shortYear ? reTimeS : reTimeL).exec(s);\n        if (!m) {\n            return \"Unrecognized time: \" + s;\n        }\n        if (shortYear) {\n            // to avoid querying the timer, use the fixed range [1970, 2069]\n            // it will conform with ITU X.400 [-10, +40] sliding window until 2030\n            m[1] = +m[1];\n            m[1] += (+m[1] < 70) ? 2000 : 1900;\n        }\n        s = m[1] + \"-\" + m[2] + \"-\" + m[3] + \" \" + m[4];\n        if (m[5]) {\n            s += \":\" + m[5];\n            if (m[6]) {\n                s += \":\" + m[6];\n                if (m[7]) {\n                    s += \".\" + m[7];\n                }\n            }\n        }\n        if (m[8]) {\n            s += \" UTC\";\n            if (m[8] != \"Z\") {\n                s += m[8];\n                if (m[9]) {\n                    s += \":\" + m[9];\n                }\n            }\n        }\n        return s;\n    };\n    Stream.prototype.parseInteger = function (start, end) {\n        var v = this.get(start);\n        var neg = (v > 127);\n        var pad = neg ? 255 : 0;\n        var len;\n        var s = \"\";\n        // skip unuseful bits (not allowed in DER)\n        while (v == pad && ++start < end) {\n            v = this.get(start);\n        }\n        len = end - start;\n        if (len === 0) {\n            return neg ? -1 : 0;\n        }\n        // show bit length of huge integers\n        if (len > 4) {\n            s = v;\n            len <<= 3;\n            while (((+s ^ pad) & 0x80) == 0) {\n                s = +s << 1;\n                --len;\n            }\n            s = \"(\" + len + \" bit)\\n\";\n        }\n        // decode the integer\n        if (neg) {\n            v = v - 256;\n        }\n        var n = new Int10(v);\n        for (var i = start + 1; i < end; ++i) {\n            n.mulAdd(256, this.get(i));\n        }\n        return s + n.toString();\n    };\n    Stream.prototype.parseBitString = function (start, end, maxLength) {\n        var unusedBit = this.get(start);\n        var lenBit = ((end - start - 1) << 3) - unusedBit;\n        var intro = \"(\" + lenBit + \" bit)\\n\";\n        var s = \"\";\n        for (var i = start + 1; i < end; ++i) {\n            var b = this.get(i);\n            var skip = (i == end - 1) ? unusedBit : 0;\n            for (var j = 7; j >= skip; --j) {\n                s += (b >> j) & 1 ? \"1\" : \"0\";\n            }\n            if (s.length > maxLength) {\n                return intro + stringCut(s, maxLength);\n            }\n        }\n        return intro + s;\n    };\n    Stream.prototype.parseOctetString = function (start, end, maxLength) {\n        if (this.isASCII(start, end)) {\n            return stringCut(this.parseStringISO(start, end), maxLength);\n        }\n        var len = end - start;\n        var s = \"(\" + len + \" byte)\\n\";\n        maxLength /= 2; // we work in bytes\n        if (len > maxLength) {\n            end = start + maxLength;\n        }\n        for (var i = start; i < end; ++i) {\n            s += this.hexByte(this.get(i));\n        }\n        if (len > maxLength) {\n            s += ellipsis;\n        }\n        return s;\n    };\n    Stream.prototype.parseOID = function (start, end, maxLength) {\n        var s = \"\";\n        var n = new Int10();\n        var bits = 0;\n        for (var i = start; i < end; ++i) {\n            var v = this.get(i);\n            n.mulAdd(128, v & 0x7F);\n            bits += 7;\n            if (!(v & 0x80)) { // finished\n                if (s === \"\") {\n                    n = n.simplify();\n                    if (n instanceof Int10) {\n                        n.sub(80);\n                        s = \"2.\" + n.toString();\n                    }\n                    else {\n                        var m = n < 80 ? n < 40 ? 0 : 1 : 2;\n                        s = m + \".\" + (n - m * 40);\n                    }\n                }\n                else {\n                    s += \".\" + n.toString();\n                }\n                if (s.length > maxLength) {\n                    return stringCut(s, maxLength);\n                }\n                n = new Int10();\n                bits = 0;\n            }\n        }\n        if (bits > 0) {\n            s += \".incomplete\";\n        }\n        return s;\n    };\n    return Stream;\n}());\nvar ASN1 = /** @class */ (function () {\n    function ASN1(stream, header, length, tag, sub) {\n        if (!(tag instanceof ASN1Tag)) {\n            throw new Error(\"Invalid tag value.\");\n        }\n        this.stream = stream;\n        this.header = header;\n        this.length = length;\n        this.tag = tag;\n        this.sub = sub;\n    }\n    ASN1.prototype.typeName = function () {\n        switch (this.tag.tagClass) {\n            case 0: // universal\n                switch (this.tag.tagNumber) {\n                    case 0x00:\n                        return \"EOC\";\n                    case 0x01:\n                        return \"BOOLEAN\";\n                    case 0x02:\n                        return \"INTEGER\";\n                    case 0x03:\n                        return \"BIT_STRING\";\n                    case 0x04:\n                        return \"OCTET_STRING\";\n                    case 0x05:\n                        return \"NULL\";\n                    case 0x06:\n                        return \"OBJECT_IDENTIFIER\";\n                    case 0x07:\n                        return \"ObjectDescriptor\";\n                    case 0x08:\n                        return \"EXTERNAL\";\n                    case 0x09:\n                        return \"REAL\";\n                    case 0x0A:\n                        return \"ENUMERATED\";\n                    case 0x0B:\n                        return \"EMBEDDED_PDV\";\n                    case 0x0C:\n                        return \"UTF8String\";\n                    case 0x10:\n                        return \"SEQUENCE\";\n                    case 0x11:\n                        return \"SET\";\n                    case 0x12:\n                        return \"NumericString\";\n                    case 0x13:\n                        return \"PrintableString\"; // ASCII subset\n                    case 0x14:\n                        return \"TeletexString\"; // aka T61String\n                    case 0x15:\n                        return \"VideotexString\";\n                    case 0x16:\n                        return \"IA5String\"; // ASCII\n                    case 0x17:\n                        return \"UTCTime\";\n                    case 0x18:\n                        return \"GeneralizedTime\";\n                    case 0x19:\n                        return \"GraphicString\";\n                    case 0x1A:\n                        return \"VisibleString\"; // ASCII subset\n                    case 0x1B:\n                        return \"GeneralString\";\n                    case 0x1C:\n                        return \"UniversalString\";\n                    case 0x1E:\n                        return \"BMPString\";\n                }\n                return \"Universal_\" + this.tag.tagNumber.toString();\n            case 1:\n                return \"Application_\" + this.tag.tagNumber.toString();\n            case 2:\n                return \"[\" + this.tag.tagNumber.toString() + \"]\"; // Context\n            case 3:\n                return \"Private_\" + this.tag.tagNumber.toString();\n        }\n    };\n    ASN1.prototype.content = function (maxLength) {\n        if (this.tag === undefined) {\n            return null;\n        }\n        if (maxLength === undefined) {\n            maxLength = Infinity;\n        }\n        var content = this.posContent();\n        var len = Math.abs(this.length);\n        if (!this.tag.isUniversal()) {\n            if (this.sub !== null) {\n                return \"(\" + this.sub.length + \" elem)\";\n            }\n            return this.stream.parseOctetString(content, content + len, maxLength);\n        }\n        switch (this.tag.tagNumber) {\n            case 0x01: // BOOLEAN\n                return (this.stream.get(content) === 0) ? \"false\" : \"true\";\n            case 0x02: // INTEGER\n                return this.stream.parseInteger(content, content + len);\n            case 0x03: // BIT_STRING\n                return this.sub ? \"(\" + this.sub.length + \" elem)\" :\n                    this.stream.parseBitString(content, content + len, maxLength);\n            case 0x04: // OCTET_STRING\n                return this.sub ? \"(\" + this.sub.length + \" elem)\" :\n                    this.stream.parseOctetString(content, content + len, maxLength);\n            // case 0x05: // NULL\n            case 0x06: // OBJECT_IDENTIFIER\n                return this.stream.parseOID(content, content + len, maxLength);\n            // case 0x07: // ObjectDescriptor\n            // case 0x08: // EXTERNAL\n            // case 0x09: // REAL\n            // case 0x0A: // ENUMERATED\n            // case 0x0B: // EMBEDDED_PDV\n            case 0x10: // SEQUENCE\n            case 0x11: // SET\n                if (this.sub !== null) {\n                    return \"(\" + this.sub.length + \" elem)\";\n                }\n                else {\n                    return \"(no elem)\";\n                }\n            case 0x0C: // UTF8String\n                return stringCut(this.stream.parseStringUTF(content, content + len), maxLength);\n            case 0x12: // NumericString\n            case 0x13: // PrintableString\n            case 0x14: // TeletexString\n            case 0x15: // VideotexString\n            case 0x16: // IA5String\n            // case 0x19: // GraphicString\n            case 0x1A: // VisibleString\n                // case 0x1B: // GeneralString\n                // case 0x1C: // UniversalString\n                return stringCut(this.stream.parseStringISO(content, content + len), maxLength);\n            case 0x1E: // BMPString\n                return stringCut(this.stream.parseStringBMP(content, content + len), maxLength);\n            case 0x17: // UTCTime\n            case 0x18: // GeneralizedTime\n                return this.stream.parseTime(content, content + len, (this.tag.tagNumber == 0x17));\n        }\n        return null;\n    };\n    ASN1.prototype.toString = function () {\n        return this.typeName() + \"@\" + this.stream.pos + \"[header:\" + this.header + \",length:\" + this.length + \",sub:\" + ((this.sub === null) ? \"null\" : this.sub.length) + \"]\";\n    };\n    ASN1.prototype.toPrettyString = function (indent) {\n        if (indent === undefined) {\n            indent = \"\";\n        }\n        var s = indent + this.typeName() + \" @\" + this.stream.pos;\n        if (this.length >= 0) {\n            s += \"+\";\n        }\n        s += this.length;\n        if (this.tag.tagConstructed) {\n            s += \" (constructed)\";\n        }\n        else if ((this.tag.isUniversal() && ((this.tag.tagNumber == 0x03) || (this.tag.tagNumber == 0x04))) && (this.sub !== null)) {\n            s += \" (encapsulates)\";\n        }\n        s += \"\\n\";\n        if (this.sub !== null) {\n            indent += \"  \";\n            for (var i = 0, max = this.sub.length; i < max; ++i) {\n                s += this.sub[i].toPrettyString(indent);\n            }\n        }\n        return s;\n    };\n    ASN1.prototype.posStart = function () {\n        return this.stream.pos;\n    };\n    ASN1.prototype.posContent = function () {\n        return this.stream.pos + this.header;\n    };\n    ASN1.prototype.posEnd = function () {\n        return this.stream.pos + this.header + Math.abs(this.length);\n    };\n    ASN1.prototype.toHexString = function () {\n        return this.stream.hexDump(this.posStart(), this.posEnd(), true);\n    };\n    ASN1.decodeLength = function (stream) {\n        var buf = stream.get();\n        var len = buf & 0x7F;\n        if (len == buf) {\n            return len;\n        }\n        // no reason to use Int10, as it would be a huge buffer anyways\n        if (len > 6) {\n            throw new Error(\"Length over 48 bits not supported at position \" + (stream.pos - 1));\n        }\n        if (len === 0) {\n            return null;\n        } // undefined\n        buf = 0;\n        for (var i = 0; i < len; ++i) {\n            buf = (buf * 256) + stream.get();\n        }\n        return buf;\n    };\n    /**\n     * Retrieve the hexadecimal value (as a string) of the current ASN.1 element\n     * @returns {string}\n     * @public\n     */\n    ASN1.prototype.getHexStringValue = function () {\n        var hexString = this.toHexString();\n        var offset = this.header * 2;\n        var length = this.length * 2;\n        return hexString.substr(offset, length);\n    };\n    ASN1.decode = function (str) {\n        var stream;\n        if (!(str instanceof Stream)) {\n            stream = new Stream(str, 0);\n        }\n        else {\n            stream = str;\n        }\n        var streamStart = new Stream(stream);\n        var tag = new ASN1Tag(stream);\n        var len = ASN1.decodeLength(stream);\n        var start = stream.pos;\n        var header = start - streamStart.pos;\n        var sub = null;\n        var getSub = function () {\n            var ret = [];\n            if (len !== null) {\n                // definite length\n                var end = start + len;\n                while (stream.pos < end) {\n                    ret[ret.length] = ASN1.decode(stream);\n                }\n                if (stream.pos != end) {\n                    throw new Error(\"Content size is not correct for container starting at offset \" + start);\n                }\n            }\n            else {\n                // undefined length\n                try {\n                    for (;;) {\n                        var s = ASN1.decode(stream);\n                        if (s.tag.isEOC()) {\n                            break;\n                        }\n                        ret[ret.length] = s;\n                    }\n                    len = start - stream.pos; // undefined lengths are represented as negative values\n                }\n                catch (e) {\n                    throw new Error(\"Exception while decoding undefined length content: \" + e);\n                }\n            }\n            return ret;\n        };\n        if (tag.tagConstructed) {\n            // must have valid content\n            sub = getSub();\n        }\n        else if (tag.isUniversal() && ((tag.tagNumber == 0x03) || (tag.tagNumber == 0x04))) {\n            // sometimes BitString and OctetString are used to encapsulate ASN.1\n            try {\n                if (tag.tagNumber == 0x03) {\n                    if (stream.get() != 0) {\n                        throw new Error(\"BIT STRINGs with unused bits cannot encapsulate.\");\n                    }\n                }\n                sub = getSub();\n                for (var i = 0; i < sub.length; ++i) {\n                    if (sub[i].tag.isEOC()) {\n                        throw new Error(\"EOC is not supposed to be actual content.\");\n                    }\n                }\n            }\n            catch (e) {\n                // but silently ignore when they don't\n                sub = null;\n            }\n        }\n        if (sub === null) {\n            if (len === null) {\n                throw new Error(\"We can't skip over an invalid tag with undefined length at offset \" + start);\n            }\n            stream.pos = start + Math.abs(len);\n        }\n        return new ASN1(streamStart, header, len, tag, sub);\n    };\n    return ASN1;\n}());\nvar ASN1Tag = /** @class */ (function () {\n    function ASN1Tag(stream) {\n        var buf = stream.get();\n        this.tagClass = buf >> 6;\n        this.tagConstructed = ((buf & 0x20) !== 0);\n        this.tagNumber = buf & 0x1F;\n        if (this.tagNumber == 0x1F) { // long tag\n            var n = new Int10();\n            do {\n                buf = stream.get();\n                n.mulAdd(128, buf & 0x7F);\n            } while (buf & 0x80);\n            this.tagNumber = n.simplify();\n        }\n    }\n    ASN1Tag.prototype.isUniversal = function () {\n        return this.tagClass === 0x00;\n    };\n    ASN1Tag.prototype.isEOC = function () {\n        return this.tagClass === 0x00 && this.tagNumber === 0x00;\n    };\n    return ASN1Tag;\n}());\n\n// Copyright (c) 2005  Tom Wu\n// Bits per digit\nvar dbits;\n// JavaScript engine analysis\nvar canary = 0xdeadbeefcafe;\nvar j_lm = ((canary & 0xffffff) == 0xefcafe);\n//#region\nvar lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\nvar lplim = (1 << 26) / lowprimes[lowprimes.length - 1];\n//#endregion\n// (public) Constructor\nvar BigInteger = /** @class */ (function () {\n    function BigInteger(a, b, c) {\n        if (a != null) {\n            if (\"number\" == typeof a) {\n                this.fromNumber(a, b, c);\n            }\n            else if (b == null && \"string\" != typeof a) {\n                this.fromString(a, 256);\n            }\n            else {\n                this.fromString(a, b);\n            }\n        }\n    }\n    //#region PUBLIC\n    // BigInteger.prototype.toString = bnToString;\n    // (public) return string representation in given radix\n    BigInteger.prototype.toString = function (b) {\n        if (this.s < 0) {\n            return \"-\" + this.negate().toString(b);\n        }\n        var k;\n        if (b == 16) {\n            k = 4;\n        }\n        else if (b == 8) {\n            k = 3;\n        }\n        else if (b == 2) {\n            k = 1;\n        }\n        else if (b == 32) {\n            k = 5;\n        }\n        else if (b == 4) {\n            k = 2;\n        }\n        else {\n            return this.toRadix(b);\n        }\n        var km = (1 << k) - 1;\n        var d;\n        var m = false;\n        var r = \"\";\n        var i = this.t;\n        var p = this.DB - (i * this.DB) % k;\n        if (i-- > 0) {\n            if (p < this.DB && (d = this[i] >> p) > 0) {\n                m = true;\n                r = int2char(d);\n            }\n            while (i >= 0) {\n                if (p < k) {\n                    d = (this[i] & ((1 << p) - 1)) << (k - p);\n                    d |= this[--i] >> (p += this.DB - k);\n                }\n                else {\n                    d = (this[i] >> (p -= k)) & km;\n                    if (p <= 0) {\n                        p += this.DB;\n                        --i;\n                    }\n                }\n                if (d > 0) {\n                    m = true;\n                }\n                if (m) {\n                    r += int2char(d);\n                }\n            }\n        }\n        return m ? r : \"0\";\n    };\n    // BigInteger.prototype.negate = bnNegate;\n    // (public) -this\n    BigInteger.prototype.negate = function () {\n        var r = nbi();\n        BigInteger.ZERO.subTo(this, r);\n        return r;\n    };\n    // BigInteger.prototype.abs = bnAbs;\n    // (public) |this|\n    BigInteger.prototype.abs = function () {\n        return (this.s < 0) ? this.negate() : this;\n    };\n    // BigInteger.prototype.compareTo = bnCompareTo;\n    // (public) return + if this > a, - if this < a, 0 if equal\n    BigInteger.prototype.compareTo = function (a) {\n        var r = this.s - a.s;\n        if (r != 0) {\n            return r;\n        }\n        var i = this.t;\n        r = i - a.t;\n        if (r != 0) {\n            return (this.s < 0) ? -r : r;\n        }\n        while (--i >= 0) {\n            if ((r = this[i] - a[i]) != 0) {\n                return r;\n            }\n        }\n        return 0;\n    };\n    // BigInteger.prototype.bitLength = bnBitLength;\n    // (public) return the number of bits in \"this\"\n    BigInteger.prototype.bitLength = function () {\n        if (this.t <= 0) {\n            return 0;\n        }\n        return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ (this.s & this.DM));\n    };\n    // BigInteger.prototype.mod = bnMod;\n    // (public) this mod a\n    BigInteger.prototype.mod = function (a) {\n        var r = nbi();\n        this.abs().divRemTo(a, null, r);\n        if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) {\n            a.subTo(r, r);\n        }\n        return r;\n    };\n    // BigInteger.prototype.modPowInt = bnModPowInt;\n    // (public) this^e % m, 0 <= e < 2^32\n    BigInteger.prototype.modPowInt = function (e, m) {\n        var z;\n        if (e < 256 || m.isEven()) {\n            z = new Classic(m);\n        }\n        else {\n            z = new Montgomery(m);\n        }\n        return this.exp(e, z);\n    };\n    // BigInteger.prototype.clone = bnClone;\n    // (public)\n    BigInteger.prototype.clone = function () {\n        var r = nbi();\n        this.copyTo(r);\n        return r;\n    };\n    // BigInteger.prototype.intValue = bnIntValue;\n    // (public) return value as integer\n    BigInteger.prototype.intValue = function () {\n        if (this.s < 0) {\n            if (this.t == 1) {\n                return this[0] - this.DV;\n            }\n            else if (this.t == 0) {\n                return -1;\n            }\n        }\n        else if (this.t == 1) {\n            return this[0];\n        }\n        else if (this.t == 0) {\n            return 0;\n        }\n        // assumes 16 < DB < 32\n        return ((this[1] & ((1 << (32 - this.DB)) - 1)) << this.DB) | this[0];\n    };\n    // BigInteger.prototype.byteValue = bnByteValue;\n    // (public) return value as byte\n    BigInteger.prototype.byteValue = function () {\n        return (this.t == 0) ? this.s : (this[0] << 24) >> 24;\n    };\n    // BigInteger.prototype.shortValue = bnShortValue;\n    // (public) return value as short (assumes DB>=16)\n    BigInteger.prototype.shortValue = function () {\n        return (this.t == 0) ? this.s : (this[0] << 16) >> 16;\n    };\n    // BigInteger.prototype.signum = bnSigNum;\n    // (public) 0 if this == 0, 1 if this > 0\n    BigInteger.prototype.signum = function () {\n        if (this.s < 0) {\n            return -1;\n        }\n        else if (this.t <= 0 || (this.t == 1 && this[0] <= 0)) {\n            return 0;\n        }\n        else {\n            return 1;\n        }\n    };\n    // BigInteger.prototype.toByteArray = bnToByteArray;\n    // (public) convert to bigendian byte array\n    BigInteger.prototype.toByteArray = function () {\n        var i = this.t;\n        var r = [];\n        r[0] = this.s;\n        var p = this.DB - (i * this.DB) % 8;\n        var d;\n        var k = 0;\n        if (i-- > 0) {\n            if (p < this.DB && (d = this[i] >> p) != (this.s & this.DM) >> p) {\n                r[k++] = d | (this.s << (this.DB - p));\n            }\n            while (i >= 0) {\n                if (p < 8) {\n                    d = (this[i] & ((1 << p) - 1)) << (8 - p);\n                    d |= this[--i] >> (p += this.DB - 8);\n                }\n                else {\n                    d = (this[i] >> (p -= 8)) & 0xff;\n                    if (p <= 0) {\n                        p += this.DB;\n                        --i;\n                    }\n                }\n                if ((d & 0x80) != 0) {\n                    d |= -256;\n                }\n                if (k == 0 && (this.s & 0x80) != (d & 0x80)) {\n                    ++k;\n                }\n                if (k > 0 || d != this.s) {\n                    r[k++] = d;\n                }\n            }\n        }\n        return r;\n    };\n    // BigInteger.prototype.equals = bnEquals;\n    BigInteger.prototype.equals = function (a) {\n        return (this.compareTo(a) == 0);\n    };\n    // BigInteger.prototype.min = bnMin;\n    BigInteger.prototype.min = function (a) {\n        return (this.compareTo(a) < 0) ? this : a;\n    };\n    // BigInteger.prototype.max = bnMax;\n    BigInteger.prototype.max = function (a) {\n        return (this.compareTo(a) > 0) ? this : a;\n    };\n    // BigInteger.prototype.and = bnAnd;\n    BigInteger.prototype.and = function (a) {\n        var r = nbi();\n        this.bitwiseTo(a, op_and, r);\n        return r;\n    };\n    // BigInteger.prototype.or = bnOr;\n    BigInteger.prototype.or = function (a) {\n        var r = nbi();\n        this.bitwiseTo(a, op_or, r);\n        return r;\n    };\n    // BigInteger.prototype.xor = bnXor;\n    BigInteger.prototype.xor = function (a) {\n        var r = nbi();\n        this.bitwiseTo(a, op_xor, r);\n        return r;\n    };\n    // BigInteger.prototype.andNot = bnAndNot;\n    BigInteger.prototype.andNot = function (a) {\n        var r = nbi();\n        this.bitwiseTo(a, op_andnot, r);\n        return r;\n    };\n    // BigInteger.prototype.not = bnNot;\n    // (public) ~this\n    BigInteger.prototype.not = function () {\n        var r = nbi();\n        for (var i = 0; i < this.t; ++i) {\n            r[i] = this.DM & ~this[i];\n        }\n        r.t = this.t;\n        r.s = ~this.s;\n        return r;\n    };\n    // BigInteger.prototype.shiftLeft = bnShiftLeft;\n    // (public) this << n\n    BigInteger.prototype.shiftLeft = function (n) {\n        var r = nbi();\n        if (n < 0) {\n            this.rShiftTo(-n, r);\n        }\n        else {\n            this.lShiftTo(n, r);\n        }\n        return r;\n    };\n    // BigInteger.prototype.shiftRight = bnShiftRight;\n    // (public) this >> n\n    BigInteger.prototype.shiftRight = function (n) {\n        var r = nbi();\n        if (n < 0) {\n            this.lShiftTo(-n, r);\n        }\n        else {\n            this.rShiftTo(n, r);\n        }\n        return r;\n    };\n    // BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\n    // (public) returns index of lowest 1-bit (or -1 if none)\n    BigInteger.prototype.getLowestSetBit = function () {\n        for (var i = 0; i < this.t; ++i) {\n            if (this[i] != 0) {\n                return i * this.DB + lbit(this[i]);\n            }\n        }\n        if (this.s < 0) {\n            return this.t * this.DB;\n        }\n        return -1;\n    };\n    // BigInteger.prototype.bitCount = bnBitCount;\n    // (public) return number of set bits\n    BigInteger.prototype.bitCount = function () {\n        var r = 0;\n        var x = this.s & this.DM;\n        for (var i = 0; i < this.t; ++i) {\n            r += cbit(this[i] ^ x);\n        }\n        return r;\n    };\n    // BigInteger.prototype.testBit = bnTestBit;\n    // (public) true iff nth bit is set\n    BigInteger.prototype.testBit = function (n) {\n        var j = Math.floor(n / this.DB);\n        if (j >= this.t) {\n            return (this.s != 0);\n        }\n        return ((this[j] & (1 << (n % this.DB))) != 0);\n    };\n    // BigInteger.prototype.setBit = bnSetBit;\n    // (public) this | (1<<n)\n    BigInteger.prototype.setBit = function (n) {\n        return this.changeBit(n, op_or);\n    };\n    // BigInteger.prototype.clearBit = bnClearBit;\n    // (public) this & ~(1<<n)\n    BigInteger.prototype.clearBit = function (n) {\n        return this.changeBit(n, op_andnot);\n    };\n    // BigInteger.prototype.flipBit = bnFlipBit;\n    // (public) this ^ (1<<n)\n    BigInteger.prototype.flipBit = function (n) {\n        return this.changeBit(n, op_xor);\n    };\n    // BigInteger.prototype.add = bnAdd;\n    // (public) this + a\n    BigInteger.prototype.add = function (a) {\n        var r = nbi();\n        this.addTo(a, r);\n        return r;\n    };\n    // BigInteger.prototype.subtract = bnSubtract;\n    // (public) this - a\n    BigInteger.prototype.subtract = function (a) {\n        var r = nbi();\n        this.subTo(a, r);\n        return r;\n    };\n    // BigInteger.prototype.multiply = bnMultiply;\n    // (public) this * a\n    BigInteger.prototype.multiply = function (a) {\n        var r = nbi();\n        this.multiplyTo(a, r);\n        return r;\n    };\n    // BigInteger.prototype.divide = bnDivide;\n    // (public) this / a\n    BigInteger.prototype.divide = function (a) {\n        var r = nbi();\n        this.divRemTo(a, r, null);\n        return r;\n    };\n    // BigInteger.prototype.remainder = bnRemainder;\n    // (public) this % a\n    BigInteger.prototype.remainder = function (a) {\n        var r = nbi();\n        this.divRemTo(a, null, r);\n        return r;\n    };\n    // BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;\n    // (public) [this/a,this%a]\n    BigInteger.prototype.divideAndRemainder = function (a) {\n        var q = nbi();\n        var r = nbi();\n        this.divRemTo(a, q, r);\n        return [q, r];\n    };\n    // BigInteger.prototype.modPow = bnModPow;\n    // (public) this^e % m (HAC 14.85)\n    BigInteger.prototype.modPow = function (e, m) {\n        var i = e.bitLength();\n        var k;\n        var r = nbv(1);\n        var z;\n        if (i <= 0) {\n            return r;\n        }\n        else if (i < 18) {\n            k = 1;\n        }\n        else if (i < 48) {\n            k = 3;\n        }\n        else if (i < 144) {\n            k = 4;\n        }\n        else if (i < 768) {\n            k = 5;\n        }\n        else {\n            k = 6;\n        }\n        if (i < 8) {\n            z = new Classic(m);\n        }\n        else if (m.isEven()) {\n            z = new Barrett(m);\n        }\n        else {\n            z = new Montgomery(m);\n        }\n        // precomputation\n        var g = [];\n        var n = 3;\n        var k1 = k - 1;\n        var km = (1 << k) - 1;\n        g[1] = z.convert(this);\n        if (k > 1) {\n            var g2 = nbi();\n            z.sqrTo(g[1], g2);\n            while (n <= km) {\n                g[n] = nbi();\n                z.mulTo(g2, g[n - 2], g[n]);\n                n += 2;\n            }\n        }\n        var j = e.t - 1;\n        var w;\n        var is1 = true;\n        var r2 = nbi();\n        var t;\n        i = nbits(e[j]) - 1;\n        while (j >= 0) {\n            if (i >= k1) {\n                w = (e[j] >> (i - k1)) & km;\n            }\n            else {\n                w = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i);\n                if (j > 0) {\n                    w |= e[j - 1] >> (this.DB + i - k1);\n                }\n            }\n            n = k;\n            while ((w & 1) == 0) {\n                w >>= 1;\n                --n;\n            }\n            if ((i -= n) < 0) {\n                i += this.DB;\n                --j;\n            }\n            if (is1) { // ret == 1, don't bother squaring or multiplying it\n                g[w].copyTo(r);\n                is1 = false;\n            }\n            else {\n                while (n > 1) {\n                    z.sqrTo(r, r2);\n                    z.sqrTo(r2, r);\n                    n -= 2;\n                }\n                if (n > 0) {\n                    z.sqrTo(r, r2);\n                }\n                else {\n                    t = r;\n                    r = r2;\n                    r2 = t;\n                }\n                z.mulTo(r2, g[w], r);\n            }\n            while (j >= 0 && (e[j] & (1 << i)) == 0) {\n                z.sqrTo(r, r2);\n                t = r;\n                r = r2;\n                r2 = t;\n                if (--i < 0) {\n                    i = this.DB - 1;\n                    --j;\n                }\n            }\n        }\n        return z.revert(r);\n    };\n    // BigInteger.prototype.modInverse = bnModInverse;\n    // (public) 1/this % m (HAC 14.61)\n    BigInteger.prototype.modInverse = function (m) {\n        var ac = m.isEven();\n        if ((this.isEven() && ac) || m.signum() == 0) {\n            return BigInteger.ZERO;\n        }\n        var u = m.clone();\n        var v = this.clone();\n        var a = nbv(1);\n        var b = nbv(0);\n        var c = nbv(0);\n        var d = nbv(1);\n        while (u.signum() != 0) {\n            while (u.isEven()) {\n                u.rShiftTo(1, u);\n                if (ac) {\n                    if (!a.isEven() || !b.isEven()) {\n                        a.addTo(this, a);\n                        b.subTo(m, b);\n                    }\n                    a.rShiftTo(1, a);\n                }\n                else if (!b.isEven()) {\n                    b.subTo(m, b);\n                }\n                b.rShiftTo(1, b);\n            }\n            while (v.isEven()) {\n                v.rShiftTo(1, v);\n                if (ac) {\n                    if (!c.isEven() || !d.isEven()) {\n                        c.addTo(this, c);\n                        d.subTo(m, d);\n                    }\n                    c.rShiftTo(1, c);\n                }\n                else if (!d.isEven()) {\n                    d.subTo(m, d);\n                }\n                d.rShiftTo(1, d);\n            }\n            if (u.compareTo(v) >= 0) {\n                u.subTo(v, u);\n                if (ac) {\n                    a.subTo(c, a);\n                }\n                b.subTo(d, b);\n            }\n            else {\n                v.subTo(u, v);\n                if (ac) {\n                    c.subTo(a, c);\n                }\n                d.subTo(b, d);\n            }\n        }\n        if (v.compareTo(BigInteger.ONE) != 0) {\n            return BigInteger.ZERO;\n        }\n        if (d.compareTo(m) >= 0) {\n            return d.subtract(m);\n        }\n        if (d.signum() < 0) {\n            d.addTo(m, d);\n        }\n        else {\n            return d;\n        }\n        if (d.signum() < 0) {\n            return d.add(m);\n        }\n        else {\n            return d;\n        }\n    };\n    // BigInteger.prototype.pow = bnPow;\n    // (public) this^e\n    BigInteger.prototype.pow = function (e) {\n        return this.exp(e, new NullExp());\n    };\n    // BigInteger.prototype.gcd = bnGCD;\n    // (public) gcd(this,a) (HAC 14.54)\n    BigInteger.prototype.gcd = function (a) {\n        var x = (this.s < 0) ? this.negate() : this.clone();\n        var y = (a.s < 0) ? a.negate() : a.clone();\n        if (x.compareTo(y) < 0) {\n            var t = x;\n            x = y;\n            y = t;\n        }\n        var i = x.getLowestSetBit();\n        var g = y.getLowestSetBit();\n        if (g < 0) {\n            return x;\n        }\n        if (i < g) {\n            g = i;\n        }\n        if (g > 0) {\n            x.rShiftTo(g, x);\n            y.rShiftTo(g, y);\n        }\n        while (x.signum() > 0) {\n            if ((i = x.getLowestSetBit()) > 0) {\n                x.rShiftTo(i, x);\n            }\n            if ((i = y.getLowestSetBit()) > 0) {\n                y.rShiftTo(i, y);\n            }\n            if (x.compareTo(y) >= 0) {\n                x.subTo(y, x);\n                x.rShiftTo(1, x);\n            }\n            else {\n                y.subTo(x, y);\n                y.rShiftTo(1, y);\n            }\n        }\n        if (g > 0) {\n            y.lShiftTo(g, y);\n        }\n        return y;\n    };\n    // BigInteger.prototype.isProbablePrime = bnIsProbablePrime;\n    // (public) test primality with certainty >= 1-.5^t\n    BigInteger.prototype.isProbablePrime = function (t) {\n        var i;\n        var x = this.abs();\n        if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {\n            for (i = 0; i < lowprimes.length; ++i) {\n                if (x[0] == lowprimes[i]) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        if (x.isEven()) {\n            return false;\n        }\n        i = 1;\n        while (i < lowprimes.length) {\n            var m = lowprimes[i];\n            var j = i + 1;\n            while (j < lowprimes.length && m < lplim) {\n                m *= lowprimes[j++];\n            }\n            m = x.modInt(m);\n            while (i < j) {\n                if (m % lowprimes[i++] == 0) {\n                    return false;\n                }\n            }\n        }\n        return x.millerRabin(t);\n    };\n    //#endregion PUBLIC\n    //#region PROTECTED\n    // BigInteger.prototype.copyTo = bnpCopyTo;\n    // (protected) copy this to r\n    BigInteger.prototype.copyTo = function (r) {\n        for (var i = this.t - 1; i >= 0; --i) {\n            r[i] = this[i];\n        }\n        r.t = this.t;\n        r.s = this.s;\n    };\n    // BigInteger.prototype.fromInt = bnpFromInt;\n    // (protected) set from integer value x, -DV <= x < DV\n    BigInteger.prototype.fromInt = function (x) {\n        this.t = 1;\n        this.s = (x < 0) ? -1 : 0;\n        if (x > 0) {\n            this[0] = x;\n        }\n        else if (x < -1) {\n            this[0] = x + this.DV;\n        }\n        else {\n            this.t = 0;\n        }\n    };\n    // BigInteger.prototype.fromString = bnpFromString;\n    // (protected) set from string and radix\n    BigInteger.prototype.fromString = function (s, b) {\n        var k;\n        if (b == 16) {\n            k = 4;\n        }\n        else if (b == 8) {\n            k = 3;\n        }\n        else if (b == 256) {\n            k = 8;\n            /* byte array */\n        }\n        else if (b == 2) {\n            k = 1;\n        }\n        else if (b == 32) {\n            k = 5;\n        }\n        else if (b == 4) {\n            k = 2;\n        }\n        else {\n            this.fromRadix(s, b);\n            return;\n        }\n        this.t = 0;\n        this.s = 0;\n        var i = s.length;\n        var mi = false;\n        var sh = 0;\n        while (--i >= 0) {\n            var x = (k == 8) ? (+s[i]) & 0xff : intAt(s, i);\n            if (x < 0) {\n                if (s.charAt(i) == \"-\") {\n                    mi = true;\n                }\n                continue;\n            }\n            mi = false;\n            if (sh == 0) {\n                this[this.t++] = x;\n            }\n            else if (sh + k > this.DB) {\n                this[this.t - 1] |= (x & ((1 << (this.DB - sh)) - 1)) << sh;\n                this[this.t++] = (x >> (this.DB - sh));\n            }\n            else {\n                this[this.t - 1] |= x << sh;\n            }\n            sh += k;\n            if (sh >= this.DB) {\n                sh -= this.DB;\n            }\n        }\n        if (k == 8 && ((+s[0]) & 0x80) != 0) {\n            this.s = -1;\n            if (sh > 0) {\n                this[this.t - 1] |= ((1 << (this.DB - sh)) - 1) << sh;\n            }\n        }\n        this.clamp();\n        if (mi) {\n            BigInteger.ZERO.subTo(this, this);\n        }\n    };\n    // BigInteger.prototype.clamp = bnpClamp;\n    // (protected) clamp off excess high words\n    BigInteger.prototype.clamp = function () {\n        var c = this.s & this.DM;\n        while (this.t > 0 && this[this.t - 1] == c) {\n            --this.t;\n        }\n    };\n    // BigInteger.prototype.dlShiftTo = bnpDLShiftTo;\n    // (protected) r = this << n*DB\n    BigInteger.prototype.dlShiftTo = function (n, r) {\n        var i;\n        for (i = this.t - 1; i >= 0; --i) {\n            r[i + n] = this[i];\n        }\n        for (i = n - 1; i >= 0; --i) {\n            r[i] = 0;\n        }\n        r.t = this.t + n;\n        r.s = this.s;\n    };\n    // BigInteger.prototype.drShiftTo = bnpDRShiftTo;\n    // (protected) r = this >> n*DB\n    BigInteger.prototype.drShiftTo = function (n, r) {\n        for (var i = n; i < this.t; ++i) {\n            r[i - n] = this[i];\n        }\n        r.t = Math.max(this.t - n, 0);\n        r.s = this.s;\n    };\n    // BigInteger.prototype.lShiftTo = bnpLShiftTo;\n    // (protected) r = this << n\n    BigInteger.prototype.lShiftTo = function (n, r) {\n        var bs = n % this.DB;\n        var cbs = this.DB - bs;\n        var bm = (1 << cbs) - 1;\n        var ds = Math.floor(n / this.DB);\n        var c = (this.s << bs) & this.DM;\n        for (var i = this.t - 1; i >= 0; --i) {\n            r[i + ds + 1] = (this[i] >> cbs) | c;\n            c = (this[i] & bm) << bs;\n        }\n        for (var i = ds - 1; i >= 0; --i) {\n            r[i] = 0;\n        }\n        r[ds] = c;\n        r.t = this.t + ds + 1;\n        r.s = this.s;\n        r.clamp();\n    };\n    // BigInteger.prototype.rShiftTo = bnpRShiftTo;\n    // (protected) r = this >> n\n    BigInteger.prototype.rShiftTo = function (n, r) {\n        r.s = this.s;\n        var ds = Math.floor(n / this.DB);\n        if (ds >= this.t) {\n            r.t = 0;\n            return;\n        }\n        var bs = n % this.DB;\n        var cbs = this.DB - bs;\n        var bm = (1 << bs) - 1;\n        r[0] = this[ds] >> bs;\n        for (var i = ds + 1; i < this.t; ++i) {\n            r[i - ds - 1] |= (this[i] & bm) << cbs;\n            r[i - ds] = this[i] >> bs;\n        }\n        if (bs > 0) {\n            r[this.t - ds - 1] |= (this.s & bm) << cbs;\n        }\n        r.t = this.t - ds;\n        r.clamp();\n    };\n    // BigInteger.prototype.subTo = bnpSubTo;\n    // (protected) r = this - a\n    BigInteger.prototype.subTo = function (a, r) {\n        var i = 0;\n        var c = 0;\n        var m = Math.min(a.t, this.t);\n        while (i < m) {\n            c += this[i] - a[i];\n            r[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        if (a.t < this.t) {\n            c -= a.s;\n            while (i < this.t) {\n                c += this[i];\n                r[i++] = c & this.DM;\n                c >>= this.DB;\n            }\n            c += this.s;\n        }\n        else {\n            c += this.s;\n            while (i < a.t) {\n                c -= a[i];\n                r[i++] = c & this.DM;\n                c >>= this.DB;\n            }\n            c -= a.s;\n        }\n        r.s = (c < 0) ? -1 : 0;\n        if (c < -1) {\n            r[i++] = this.DV + c;\n        }\n        else if (c > 0) {\n            r[i++] = c;\n        }\n        r.t = i;\n        r.clamp();\n    };\n    // BigInteger.prototype.multiplyTo = bnpMultiplyTo;\n    // (protected) r = this * a, r != this,a (HAC 14.12)\n    // \"this\" should be the larger one if appropriate.\n    BigInteger.prototype.multiplyTo = function (a, r) {\n        var x = this.abs();\n        var y = a.abs();\n        var i = x.t;\n        r.t = i + y.t;\n        while (--i >= 0) {\n            r[i] = 0;\n        }\n        for (i = 0; i < y.t; ++i) {\n            r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);\n        }\n        r.s = 0;\n        r.clamp();\n        if (this.s != a.s) {\n            BigInteger.ZERO.subTo(r, r);\n        }\n    };\n    // BigInteger.prototype.squareTo = bnpSquareTo;\n    // (protected) r = this^2, r != this (HAC 14.16)\n    BigInteger.prototype.squareTo = function (r) {\n        var x = this.abs();\n        var i = r.t = 2 * x.t;\n        while (--i >= 0) {\n            r[i] = 0;\n        }\n        for (i = 0; i < x.t - 1; ++i) {\n            var c = x.am(i, x[i], r, 2 * i, 0, 1);\n            if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {\n                r[i + x.t] -= x.DV;\n                r[i + x.t + 1] = 1;\n            }\n        }\n        if (r.t > 0) {\n            r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);\n        }\n        r.s = 0;\n        r.clamp();\n    };\n    // BigInteger.prototype.divRemTo = bnpDivRemTo;\n    // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n    // r != q, this != m.  q or r may be null.\n    BigInteger.prototype.divRemTo = function (m, q, r) {\n        var pm = m.abs();\n        if (pm.t <= 0) {\n            return;\n        }\n        var pt = this.abs();\n        if (pt.t < pm.t) {\n            if (q != null) {\n                q.fromInt(0);\n            }\n            if (r != null) {\n                this.copyTo(r);\n            }\n            return;\n        }\n        if (r == null) {\n            r = nbi();\n        }\n        var y = nbi();\n        var ts = this.s;\n        var ms = m.s;\n        var nsh = this.DB - nbits(pm[pm.t - 1]); // normalize modulus\n        if (nsh > 0) {\n            pm.lShiftTo(nsh, y);\n            pt.lShiftTo(nsh, r);\n        }\n        else {\n            pm.copyTo(y);\n            pt.copyTo(r);\n        }\n        var ys = y.t;\n        var y0 = y[ys - 1];\n        if (y0 == 0) {\n            return;\n        }\n        var yt = y0 * (1 << this.F1) + ((ys > 1) ? y[ys - 2] >> this.F2 : 0);\n        var d1 = this.FV / yt;\n        var d2 = (1 << this.F1) / yt;\n        var e = 1 << this.F2;\n        var i = r.t;\n        var j = i - ys;\n        var t = (q == null) ? nbi() : q;\n        y.dlShiftTo(j, t);\n        if (r.compareTo(t) >= 0) {\n            r[r.t++] = 1;\n            r.subTo(t, r);\n        }\n        BigInteger.ONE.dlShiftTo(ys, t);\n        t.subTo(y, y); // \"negative\" y so we can replace sub with am later\n        while (y.t < ys) {\n            y[y.t++] = 0;\n        }\n        while (--j >= 0) {\n            // Estimate quotient digit\n            var qd = (r[--i] == y0) ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);\n            if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) { // Try it out\n                y.dlShiftTo(j, t);\n                r.subTo(t, r);\n                while (r[i] < --qd) {\n                    r.subTo(t, r);\n                }\n            }\n        }\n        if (q != null) {\n            r.drShiftTo(ys, q);\n            if (ts != ms) {\n                BigInteger.ZERO.subTo(q, q);\n            }\n        }\n        r.t = ys;\n        r.clamp();\n        if (nsh > 0) {\n            r.rShiftTo(nsh, r);\n        } // Denormalize remainder\n        if (ts < 0) {\n            BigInteger.ZERO.subTo(r, r);\n        }\n    };\n    // BigInteger.prototype.invDigit = bnpInvDigit;\n    // (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n    // justification:\n    //         xy == 1 (mod m)\n    //         xy =  1+km\n    //   xy(2-xy) = (1+km)(1-km)\n    // x[y(2-xy)] = 1-k^2m^2\n    // x[y(2-xy)] == 1 (mod m^2)\n    // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n    // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n    // JS multiply \"overflows\" differently from C/C++, so care is needed here.\n    BigInteger.prototype.invDigit = function () {\n        if (this.t < 1) {\n            return 0;\n        }\n        var x = this[0];\n        if ((x & 1) == 0) {\n            return 0;\n        }\n        var y = x & 3; // y == 1/x mod 2^2\n        y = (y * (2 - (x & 0xf) * y)) & 0xf; // y == 1/x mod 2^4\n        y = (y * (2 - (x & 0xff) * y)) & 0xff; // y == 1/x mod 2^8\n        y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff; // y == 1/x mod 2^16\n        // last step - calculate inverse mod DV directly;\n        // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n        y = (y * (2 - x * y % this.DV)) % this.DV; // y == 1/x mod 2^dbits\n        // we really want the negative inverse, and -DV < y < DV\n        return (y > 0) ? this.DV - y : -y;\n    };\n    // BigInteger.prototype.isEven = bnpIsEven;\n    // (protected) true iff this is even\n    BigInteger.prototype.isEven = function () {\n        return ((this.t > 0) ? (this[0] & 1) : this.s) == 0;\n    };\n    // BigInteger.prototype.exp = bnpExp;\n    // (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\n    BigInteger.prototype.exp = function (e, z) {\n        if (e > 0xffffffff || e < 1) {\n            return BigInteger.ONE;\n        }\n        var r = nbi();\n        var r2 = nbi();\n        var g = z.convert(this);\n        var i = nbits(e) - 1;\n        g.copyTo(r);\n        while (--i >= 0) {\n            z.sqrTo(r, r2);\n            if ((e & (1 << i)) > 0) {\n                z.mulTo(r2, g, r);\n            }\n            else {\n                var t = r;\n                r = r2;\n                r2 = t;\n            }\n        }\n        return z.revert(r);\n    };\n    // BigInteger.prototype.chunkSize = bnpChunkSize;\n    // (protected) return x s.t. r^x < DV\n    BigInteger.prototype.chunkSize = function (r) {\n        return Math.floor(Math.LN2 * this.DB / Math.log(r));\n    };\n    // BigInteger.prototype.toRadix = bnpToRadix;\n    // (protected) convert to radix string\n    BigInteger.prototype.toRadix = function (b) {\n        if (b == null) {\n            b = 10;\n        }\n        if (this.signum() == 0 || b < 2 || b > 36) {\n            return \"0\";\n        }\n        var cs = this.chunkSize(b);\n        var a = Math.pow(b, cs);\n        var d = nbv(a);\n        var y = nbi();\n        var z = nbi();\n        var r = \"\";\n        this.divRemTo(d, y, z);\n        while (y.signum() > 0) {\n            r = (a + z.intValue()).toString(b).substr(1) + r;\n            y.divRemTo(d, y, z);\n        }\n        return z.intValue().toString(b) + r;\n    };\n    // BigInteger.prototype.fromRadix = bnpFromRadix;\n    // (protected) convert from radix string\n    BigInteger.prototype.fromRadix = function (s, b) {\n        this.fromInt(0);\n        if (b == null) {\n            b = 10;\n        }\n        var cs = this.chunkSize(b);\n        var d = Math.pow(b, cs);\n        var mi = false;\n        var j = 0;\n        var w = 0;\n        for (var i = 0; i < s.length; ++i) {\n            var x = intAt(s, i);\n            if (x < 0) {\n                if (s.charAt(i) == \"-\" && this.signum() == 0) {\n                    mi = true;\n                }\n                continue;\n            }\n            w = b * w + x;\n            if (++j >= cs) {\n                this.dMultiply(d);\n                this.dAddOffset(w, 0);\n                j = 0;\n                w = 0;\n            }\n        }\n        if (j > 0) {\n            this.dMultiply(Math.pow(b, j));\n            this.dAddOffset(w, 0);\n        }\n        if (mi) {\n            BigInteger.ZERO.subTo(this, this);\n        }\n    };\n    // BigInteger.prototype.fromNumber = bnpFromNumber;\n    // (protected) alternate constructor\n    BigInteger.prototype.fromNumber = function (a, b, c) {\n        if (\"number\" == typeof b) {\n            // new BigInteger(int,int,RNG)\n            if (a < 2) {\n                this.fromInt(1);\n            }\n            else {\n                this.fromNumber(a, c);\n                if (!this.testBit(a - 1)) {\n                    // force MSB set\n                    this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);\n                }\n                if (this.isEven()) {\n                    this.dAddOffset(1, 0);\n                } // force odd\n                while (!this.isProbablePrime(b)) {\n                    this.dAddOffset(2, 0);\n                    if (this.bitLength() > a) {\n                        this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);\n                    }\n                }\n            }\n        }\n        else {\n            // new BigInteger(int,RNG)\n            var x = [];\n            var t = a & 7;\n            x.length = (a >> 3) + 1;\n            b.nextBytes(x);\n            if (t > 0) {\n                x[0] &= ((1 << t) - 1);\n            }\n            else {\n                x[0] = 0;\n            }\n            this.fromString(x, 256);\n        }\n    };\n    // BigInteger.prototype.bitwiseTo = bnpBitwiseTo;\n    // (protected) r = this op a (bitwise)\n    BigInteger.prototype.bitwiseTo = function (a, op, r) {\n        var i;\n        var f;\n        var m = Math.min(a.t, this.t);\n        for (i = 0; i < m; ++i) {\n            r[i] = op(this[i], a[i]);\n        }\n        if (a.t < this.t) {\n            f = a.s & this.DM;\n            for (i = m; i < this.t; ++i) {\n                r[i] = op(this[i], f);\n            }\n            r.t = this.t;\n        }\n        else {\n            f = this.s & this.DM;\n            for (i = m; i < a.t; ++i) {\n                r[i] = op(f, a[i]);\n            }\n            r.t = a.t;\n        }\n        r.s = op(this.s, a.s);\n        r.clamp();\n    };\n    // BigInteger.prototype.changeBit = bnpChangeBit;\n    // (protected) this op (1<<n)\n    BigInteger.prototype.changeBit = function (n, op) {\n        var r = BigInteger.ONE.shiftLeft(n);\n        this.bitwiseTo(r, op, r);\n        return r;\n    };\n    // BigInteger.prototype.addTo = bnpAddTo;\n    // (protected) r = this + a\n    BigInteger.prototype.addTo = function (a, r) {\n        var i = 0;\n        var c = 0;\n        var m = Math.min(a.t, this.t);\n        while (i < m) {\n            c += this[i] + a[i];\n            r[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        if (a.t < this.t) {\n            c += a.s;\n            while (i < this.t) {\n                c += this[i];\n                r[i++] = c & this.DM;\n                c >>= this.DB;\n            }\n            c += this.s;\n        }\n        else {\n            c += this.s;\n            while (i < a.t) {\n                c += a[i];\n                r[i++] = c & this.DM;\n                c >>= this.DB;\n            }\n            c += a.s;\n        }\n        r.s = (c < 0) ? -1 : 0;\n        if (c > 0) {\n            r[i++] = c;\n        }\n        else if (c < -1) {\n            r[i++] = this.DV + c;\n        }\n        r.t = i;\n        r.clamp();\n    };\n    // BigInteger.prototype.dMultiply = bnpDMultiply;\n    // (protected) this *= n, this >= 0, 1 < n < DV\n    BigInteger.prototype.dMultiply = function (n) {\n        this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);\n        ++this.t;\n        this.clamp();\n    };\n    // BigInteger.prototype.dAddOffset = bnpDAddOffset;\n    // (protected) this += n << w words, this >= 0\n    BigInteger.prototype.dAddOffset = function (n, w) {\n        if (n == 0) {\n            return;\n        }\n        while (this.t <= w) {\n            this[this.t++] = 0;\n        }\n        this[w] += n;\n        while (this[w] >= this.DV) {\n            this[w] -= this.DV;\n            if (++w >= this.t) {\n                this[this.t++] = 0;\n            }\n            ++this[w];\n        }\n    };\n    // BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;\n    // (protected) r = lower n words of \"this * a\", a.t <= n\n    // \"this\" should be the larger one if appropriate.\n    BigInteger.prototype.multiplyLowerTo = function (a, n, r) {\n        var i = Math.min(this.t + a.t, n);\n        r.s = 0; // assumes a,this >= 0\n        r.t = i;\n        while (i > 0) {\n            r[--i] = 0;\n        }\n        for (var j = r.t - this.t; i < j; ++i) {\n            r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);\n        }\n        for (var j = Math.min(a.t, n); i < j; ++i) {\n            this.am(0, a[i], r, i, 0, n - i);\n        }\n        r.clamp();\n    };\n    // BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;\n    // (protected) r = \"this * a\" without lower n words, n > 0\n    // \"this\" should be the larger one if appropriate.\n    BigInteger.prototype.multiplyUpperTo = function (a, n, r) {\n        --n;\n        var i = r.t = this.t + a.t - n;\n        r.s = 0; // assumes a,this >= 0\n        while (--i >= 0) {\n            r[i] = 0;\n        }\n        for (i = Math.max(n - this.t, 0); i < a.t; ++i) {\n            r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);\n        }\n        r.clamp();\n        r.drShiftTo(1, r);\n    };\n    // BigInteger.prototype.modInt = bnpModInt;\n    // (protected) this % n, n < 2^26\n    BigInteger.prototype.modInt = function (n) {\n        if (n <= 0) {\n            return 0;\n        }\n        var d = this.DV % n;\n        var r = (this.s < 0) ? n - 1 : 0;\n        if (this.t > 0) {\n            if (d == 0) {\n                r = this[0] % n;\n            }\n            else {\n                for (var i = this.t - 1; i >= 0; --i) {\n                    r = (d * r + this[i]) % n;\n                }\n            }\n        }\n        return r;\n    };\n    // BigInteger.prototype.millerRabin = bnpMillerRabin;\n    // (protected) true if probably prime (HAC 4.24, Miller-Rabin)\n    BigInteger.prototype.millerRabin = function (t) {\n        var n1 = this.subtract(BigInteger.ONE);\n        var k = n1.getLowestSetBit();\n        if (k <= 0) {\n            return false;\n        }\n        var r = n1.shiftRight(k);\n        t = (t + 1) >> 1;\n        if (t > lowprimes.length) {\n            t = lowprimes.length;\n        }\n        var a = nbi();\n        for (var i = 0; i < t; ++i) {\n            // Pick bases at random, instead of starting at 2\n            a.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);\n            var y = a.modPow(r, this);\n            if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {\n                var j = 1;\n                while (j++ < k && y.compareTo(n1) != 0) {\n                    y = y.modPowInt(2, this);\n                    if (y.compareTo(BigInteger.ONE) == 0) {\n                        return false;\n                    }\n                }\n                if (y.compareTo(n1) != 0) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    };\n    // BigInteger.prototype.square = bnSquare;\n    // (public) this^2\n    BigInteger.prototype.square = function () {\n        var r = nbi();\n        this.squareTo(r);\n        return r;\n    };\n    //#region ASYNC\n    // Public API method\n    BigInteger.prototype.gcda = function (a, callback) {\n        var x = (this.s < 0) ? this.negate() : this.clone();\n        var y = (a.s < 0) ? a.negate() : a.clone();\n        if (x.compareTo(y) < 0) {\n            var t = x;\n            x = y;\n            y = t;\n        }\n        var i = x.getLowestSetBit();\n        var g = y.getLowestSetBit();\n        if (g < 0) {\n            callback(x);\n            return;\n        }\n        if (i < g) {\n            g = i;\n        }\n        if (g > 0) {\n            x.rShiftTo(g, x);\n            y.rShiftTo(g, y);\n        }\n        // Workhorse of the algorithm, gets called 200 - 800 times per 512 bit keygen.\n        var gcda1 = function () {\n            if ((i = x.getLowestSetBit()) > 0) {\n                x.rShiftTo(i, x);\n            }\n            if ((i = y.getLowestSetBit()) > 0) {\n                y.rShiftTo(i, y);\n            }\n            if (x.compareTo(y) >= 0) {\n                x.subTo(y, x);\n                x.rShiftTo(1, x);\n            }\n            else {\n                y.subTo(x, y);\n                y.rShiftTo(1, y);\n            }\n            if (!(x.signum() > 0)) {\n                if (g > 0) {\n                    y.lShiftTo(g, y);\n                }\n                setTimeout(function () { callback(y); }, 0); // escape\n            }\n            else {\n                setTimeout(gcda1, 0);\n            }\n        };\n        setTimeout(gcda1, 10);\n    };\n    // (protected) alternate constructor\n    BigInteger.prototype.fromNumberAsync = function (a, b, c, callback) {\n        if (\"number\" == typeof b) {\n            if (a < 2) {\n                this.fromInt(1);\n            }\n            else {\n                this.fromNumber(a, c);\n                if (!this.testBit(a - 1)) {\n                    this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);\n                }\n                if (this.isEven()) {\n                    this.dAddOffset(1, 0);\n                }\n                var bnp_1 = this;\n                var bnpfn1_1 = function () {\n                    bnp_1.dAddOffset(2, 0);\n                    if (bnp_1.bitLength() > a) {\n                        bnp_1.subTo(BigInteger.ONE.shiftLeft(a - 1), bnp_1);\n                    }\n                    if (bnp_1.isProbablePrime(b)) {\n                        setTimeout(function () { callback(); }, 0); // escape\n                    }\n                    else {\n                        setTimeout(bnpfn1_1, 0);\n                    }\n                };\n                setTimeout(bnpfn1_1, 0);\n            }\n        }\n        else {\n            var x = [];\n            var t = a & 7;\n            x.length = (a >> 3) + 1;\n            b.nextBytes(x);\n            if (t > 0) {\n                x[0] &= ((1 << t) - 1);\n            }\n            else {\n                x[0] = 0;\n            }\n            this.fromString(x, 256);\n        }\n    };\n    return BigInteger;\n}());\n//#region REDUCERS\n//#region NullExp\nvar NullExp = /** @class */ (function () {\n    function NullExp() {\n    }\n    // NullExp.prototype.convert = nNop;\n    NullExp.prototype.convert = function (x) {\n        return x;\n    };\n    // NullExp.prototype.revert = nNop;\n    NullExp.prototype.revert = function (x) {\n        return x;\n    };\n    // NullExp.prototype.mulTo = nMulTo;\n    NullExp.prototype.mulTo = function (x, y, r) {\n        x.multiplyTo(y, r);\n    };\n    // NullExp.prototype.sqrTo = nSqrTo;\n    NullExp.prototype.sqrTo = function (x, r) {\n        x.squareTo(r);\n    };\n    return NullExp;\n}());\n// Modular reduction using \"classic\" algorithm\nvar Classic = /** @class */ (function () {\n    function Classic(m) {\n        this.m = m;\n    }\n    // Classic.prototype.convert = cConvert;\n    Classic.prototype.convert = function (x) {\n        if (x.s < 0 || x.compareTo(this.m) >= 0) {\n            return x.mod(this.m);\n        }\n        else {\n            return x;\n        }\n    };\n    // Classic.prototype.revert = cRevert;\n    Classic.prototype.revert = function (x) {\n        return x;\n    };\n    // Classic.prototype.reduce = cReduce;\n    Classic.prototype.reduce = function (x) {\n        x.divRemTo(this.m, null, x);\n    };\n    // Classic.prototype.mulTo = cMulTo;\n    Classic.prototype.mulTo = function (x, y, r) {\n        x.multiplyTo(y, r);\n        this.reduce(r);\n    };\n    // Classic.prototype.sqrTo = cSqrTo;\n    Classic.prototype.sqrTo = function (x, r) {\n        x.squareTo(r);\n        this.reduce(r);\n    };\n    return Classic;\n}());\n//#endregion\n//#region Montgomery\n// Montgomery reduction\nvar Montgomery = /** @class */ (function () {\n    function Montgomery(m) {\n        this.m = m;\n        this.mp = m.invDigit();\n        this.mpl = this.mp & 0x7fff;\n        this.mph = this.mp >> 15;\n        this.um = (1 << (m.DB - 15)) - 1;\n        this.mt2 = 2 * m.t;\n    }\n    // Montgomery.prototype.convert = montConvert;\n    // xR mod m\n    Montgomery.prototype.convert = function (x) {\n        var r = nbi();\n        x.abs().dlShiftTo(this.m.t, r);\n        r.divRemTo(this.m, null, r);\n        if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) {\n            this.m.subTo(r, r);\n        }\n        return r;\n    };\n    // Montgomery.prototype.revert = montRevert;\n    // x/R mod m\n    Montgomery.prototype.revert = function (x) {\n        var r = nbi();\n        x.copyTo(r);\n        this.reduce(r);\n        return r;\n    };\n    // Montgomery.prototype.reduce = montReduce;\n    // x = x/R mod m (HAC 14.32)\n    Montgomery.prototype.reduce = function (x) {\n        while (x.t <= this.mt2) {\n            // pad x so am has enough room later\n            x[x.t++] = 0;\n        }\n        for (var i = 0; i < this.m.t; ++i) {\n            // faster way of calculating u0 = x[i]*mp mod DV\n            var j = x[i] & 0x7fff;\n            var u0 = (j * this.mpl + (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) & x.DM;\n            // use am to combine the multiply-shift-add into one call\n            j = i + this.m.t;\n            x[j] += this.m.am(0, u0, x, i, 0, this.m.t);\n            // propagate carry\n            while (x[j] >= x.DV) {\n                x[j] -= x.DV;\n                x[++j]++;\n            }\n        }\n        x.clamp();\n        x.drShiftTo(this.m.t, x);\n        if (x.compareTo(this.m) >= 0) {\n            x.subTo(this.m, x);\n        }\n    };\n    // Montgomery.prototype.mulTo = montMulTo;\n    // r = \"xy/R mod m\"; x,y != r\n    Montgomery.prototype.mulTo = function (x, y, r) {\n        x.multiplyTo(y, r);\n        this.reduce(r);\n    };\n    // Montgomery.prototype.sqrTo = montSqrTo;\n    // r = \"x^2/R mod m\"; x != r\n    Montgomery.prototype.sqrTo = function (x, r) {\n        x.squareTo(r);\n        this.reduce(r);\n    };\n    return Montgomery;\n}());\n//#endregion Montgomery\n//#region Barrett\n// Barrett modular reduction\nvar Barrett = /** @class */ (function () {\n    function Barrett(m) {\n        this.m = m;\n        // setup Barrett\n        this.r2 = nbi();\n        this.q3 = nbi();\n        BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);\n        this.mu = this.r2.divide(m);\n    }\n    // Barrett.prototype.convert = barrettConvert;\n    Barrett.prototype.convert = function (x) {\n        if (x.s < 0 || x.t > 2 * this.m.t) {\n            return x.mod(this.m);\n        }\n        else if (x.compareTo(this.m) < 0) {\n            return x;\n        }\n        else {\n            var r = nbi();\n            x.copyTo(r);\n            this.reduce(r);\n            return r;\n        }\n    };\n    // Barrett.prototype.revert = barrettRevert;\n    Barrett.prototype.revert = function (x) {\n        return x;\n    };\n    // Barrett.prototype.reduce = barrettReduce;\n    // x = x mod m (HAC 14.42)\n    Barrett.prototype.reduce = function (x) {\n        x.drShiftTo(this.m.t - 1, this.r2);\n        if (x.t > this.m.t + 1) {\n            x.t = this.m.t + 1;\n            x.clamp();\n        }\n        this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);\n        this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);\n        while (x.compareTo(this.r2) < 0) {\n            x.dAddOffset(1, this.m.t + 1);\n        }\n        x.subTo(this.r2, x);\n        while (x.compareTo(this.m) >= 0) {\n            x.subTo(this.m, x);\n        }\n    };\n    // Barrett.prototype.mulTo = barrettMulTo;\n    // r = x*y mod m; x,y != r\n    Barrett.prototype.mulTo = function (x, y, r) {\n        x.multiplyTo(y, r);\n        this.reduce(r);\n    };\n    // Barrett.prototype.sqrTo = barrettSqrTo;\n    // r = x^2 mod m; x != r\n    Barrett.prototype.sqrTo = function (x, r) {\n        x.squareTo(r);\n        this.reduce(r);\n    };\n    return Barrett;\n}());\n//#endregion\n//#endregion REDUCERS\n// return new, unset BigInteger\nfunction nbi() { return new BigInteger(null); }\nfunction parseBigInt(str, r) {\n    return new BigInteger(str, r);\n}\n// am: Compute w_j += (x*this_i), propagate carries,\n// c is initial carry, returns final carry.\n// c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n// We need to select the fastest one that works in this environment.\n// am1: use a single mult and divide to get the high bits,\n// max digit bits should be 26 because\n// max internal value = 2*dvalue^2-2*dvalue (< 2^53)\nfunction am1(i, x, w, j, c, n) {\n    while (--n >= 0) {\n        var v = x * this[i++] + w[j] + c;\n        c = Math.floor(v / 0x4000000);\n        w[j++] = v & 0x3ffffff;\n    }\n    return c;\n}\n// am2 avoids a big mult-and-extract completely.\n// Max digit bits should be <= 30 because we do bitwise ops\n// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\nfunction am2(i, x, w, j, c, n) {\n    var xl = x & 0x7fff;\n    var xh = x >> 15;\n    while (--n >= 0) {\n        var l = this[i] & 0x7fff;\n        var h = this[i++] >> 15;\n        var m = xh * l + h * xl;\n        l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);\n        c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);\n        w[j++] = l & 0x3fffffff;\n    }\n    return c;\n}\n// Alternately, set max digit bits to 28 since some\n// browsers slow down when dealing with 32-bit numbers.\nfunction am3(i, x, w, j, c, n) {\n    var xl = x & 0x3fff;\n    var xh = x >> 14;\n    while (--n >= 0) {\n        var l = this[i] & 0x3fff;\n        var h = this[i++] >> 14;\n        var m = xh * l + h * xl;\n        l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;\n        c = (l >> 28) + (m >> 14) + xh * h;\n        w[j++] = l & 0xfffffff;\n    }\n    return c;\n}\nif (j_lm && (navigator.appName == \"Microsoft Internet Explorer\")) {\n    BigInteger.prototype.am = am2;\n    dbits = 30;\n}\nelse if (j_lm && (navigator.appName != \"Netscape\")) {\n    BigInteger.prototype.am = am1;\n    dbits = 26;\n}\nelse { // Mozilla/Netscape seems to prefer am3\n    BigInteger.prototype.am = am3;\n    dbits = 28;\n}\nBigInteger.prototype.DB = dbits;\nBigInteger.prototype.DM = ((1 << dbits) - 1);\nBigInteger.prototype.DV = (1 << dbits);\nvar BI_FP = 52;\nBigInteger.prototype.FV = Math.pow(2, BI_FP);\nBigInteger.prototype.F1 = BI_FP - dbits;\nBigInteger.prototype.F2 = 2 * dbits - BI_FP;\n// Digit conversions\nvar BI_RC = [];\nvar rr;\nvar vv;\nrr = \"0\".charCodeAt(0);\nfor (vv = 0; vv <= 9; ++vv) {\n    BI_RC[rr++] = vv;\n}\nrr = \"a\".charCodeAt(0);\nfor (vv = 10; vv < 36; ++vv) {\n    BI_RC[rr++] = vv;\n}\nrr = \"A\".charCodeAt(0);\nfor (vv = 10; vv < 36; ++vv) {\n    BI_RC[rr++] = vv;\n}\nfunction intAt(s, i) {\n    var c = BI_RC[s.charCodeAt(i)];\n    return (c == null) ? -1 : c;\n}\n// return bigint initialized to value\nfunction nbv(i) {\n    var r = nbi();\n    r.fromInt(i);\n    return r;\n}\n// returns bit length of the integer x\nfunction nbits(x) {\n    var r = 1;\n    var t;\n    if ((t = x >>> 16) != 0) {\n        x = t;\n        r += 16;\n    }\n    if ((t = x >> 8) != 0) {\n        x = t;\n        r += 8;\n    }\n    if ((t = x >> 4) != 0) {\n        x = t;\n        r += 4;\n    }\n    if ((t = x >> 2) != 0) {\n        x = t;\n        r += 2;\n    }\n    if ((t = x >> 1) != 0) {\n        x = t;\n        r += 1;\n    }\n    return r;\n}\n// \"constants\"\nBigInteger.ZERO = nbv(0);\nBigInteger.ONE = nbv(1);\n\n// prng4.js - uses Arcfour as a PRNG\nvar Arcfour = /** @class */ (function () {\n    function Arcfour() {\n        this.i = 0;\n        this.j = 0;\n        this.S = [];\n    }\n    // Arcfour.prototype.init = ARC4init;\n    // Initialize arcfour context from key, an array of ints, each from [0..255]\n    Arcfour.prototype.init = function (key) {\n        var i;\n        var j;\n        var t;\n        for (i = 0; i < 256; ++i) {\n            this.S[i] = i;\n        }\n        j = 0;\n        for (i = 0; i < 256; ++i) {\n            j = (j + this.S[i] + key[i % key.length]) & 255;\n            t = this.S[i];\n            this.S[i] = this.S[j];\n            this.S[j] = t;\n        }\n        this.i = 0;\n        this.j = 0;\n    };\n    // Arcfour.prototype.next = ARC4next;\n    Arcfour.prototype.next = function () {\n        var t;\n        this.i = (this.i + 1) & 255;\n        this.j = (this.j + this.S[this.i]) & 255;\n        t = this.S[this.i];\n        this.S[this.i] = this.S[this.j];\n        this.S[this.j] = t;\n        return this.S[(t + this.S[this.i]) & 255];\n    };\n    return Arcfour;\n}());\n// Plug in your RNG constructor here\nfunction prng_newstate() {\n    return new Arcfour();\n}\n// Pool size must be a multiple of 4 and greater than 32.\n// An array of bytes the size of the pool will be passed to init()\nvar rng_psize = 256;\n\n// Random number generator - requires a PRNG backend, e.g. prng4.js\nvar rng_state;\nvar rng_pool = null;\nvar rng_pptr;\n// Initialize the pool with junk if needed.\nif (rng_pool == null) {\n    rng_pool = [];\n    rng_pptr = 0;\n    var t = void 0;\n    if (window.crypto && window.crypto.getRandomValues) {\n        // Extract entropy (2048 bits) from RNG if available\n        var z = new Uint32Array(256);\n        window.crypto.getRandomValues(z);\n        for (t = 0; t < z.length; ++t) {\n            rng_pool[rng_pptr++] = z[t] & 255;\n        }\n    }\n    // Use mouse events for entropy, if we do not have enough entropy by the time\n    // we need it, entropy will be generated by Math.random.\n    var onMouseMoveListener_1 = function (ev) {\n        this.count = this.count || 0;\n        if (this.count >= 256 || rng_pptr >= rng_psize) {\n            if (window.removeEventListener) {\n                window.removeEventListener(\"mousemove\", onMouseMoveListener_1, false);\n            }\n            else if (window.detachEvent) {\n                window.detachEvent(\"onmousemove\", onMouseMoveListener_1);\n            }\n            return;\n        }\n        try {\n            var mouseCoordinates = ev.x + ev.y;\n            rng_pool[rng_pptr++] = mouseCoordinates & 255;\n            this.count += 1;\n        }\n        catch (e) {\n            // Sometimes Firefox will deny permission to access event properties for some reason. Ignore.\n        }\n    };\n    if (window.addEventListener) {\n        window.addEventListener(\"mousemove\", onMouseMoveListener_1, false);\n    }\n    else if (window.attachEvent) {\n        window.attachEvent(\"onmousemove\", onMouseMoveListener_1);\n    }\n}\nfunction rng_get_byte() {\n    if (rng_state == null) {\n        rng_state = prng_newstate();\n        // At this point, we may not have collected enough entropy.  If not, fall back to Math.random\n        while (rng_pptr < rng_psize) {\n            var random = Math.floor(65536 * Math.random());\n            rng_pool[rng_pptr++] = random & 255;\n        }\n        rng_state.init(rng_pool);\n        for (rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr) {\n            rng_pool[rng_pptr] = 0;\n        }\n        rng_pptr = 0;\n    }\n    // TODO: allow reseeding after first request\n    return rng_state.next();\n}\nvar SecureRandom = /** @class */ (function () {\n    function SecureRandom() {\n    }\n    SecureRandom.prototype.nextBytes = function (ba) {\n        for (var i = 0; i < ba.length; ++i) {\n            ba[i] = rng_get_byte();\n        }\n    };\n    return SecureRandom;\n}());\n\n// Depends on jsbn.js and rng.js\n// function linebrk(s,n) {\n//   var ret = \"\";\n//   var i = 0;\n//   while(i + n < s.length) {\n//     ret += s.substring(i,i+n) + \"\\n\";\n//     i += n;\n//   }\n//   return ret + s.substring(i,s.length);\n// }\n// function byte2Hex(b) {\n//   if(b < 0x10)\n//     return \"0\" + b.toString(16);\n//   else\n//     return b.toString(16);\n// }\nfunction pkcs1pad1(s, n) {\n    if (n < s.length + 22) {\n        console.error(\"Message too long for RSA\");\n        return null;\n    }\n    var len = n - s.length - 6;\n    var filler = \"\";\n    for (var f = 0; f < len; f += 2) {\n        filler += \"ff\";\n    }\n    var m = \"0001\" + filler + \"00\" + s;\n    return parseBigInt(m, 16);\n}\n// PKCS#1 (type 2, random) pad input string s to n bytes, and return a bigint\nfunction pkcs1pad2(s, n) {\n    if (n < s.length + 11) { // TODO: fix for utf-8\n        console.error(\"Message too long for RSA\");\n        return null;\n    }\n    var ba = [];\n    var i = s.length - 1;\n    while (i >= 0 && n > 0) {\n        var c = s.charCodeAt(i--);\n        if (c < 128) { // encode using utf-8\n            ba[--n] = c;\n        }\n        else if ((c > 127) && (c < 2048)) {\n            ba[--n] = (c & 63) | 128;\n            ba[--n] = (c >> 6) | 192;\n        }\n        else {\n            ba[--n] = (c & 63) | 128;\n            ba[--n] = ((c >> 6) & 63) | 128;\n            ba[--n] = (c >> 12) | 224;\n        }\n    }\n    ba[--n] = 0;\n    var rng = new SecureRandom();\n    var x = [];\n    while (n > 2) { // random non-zero pad\n        x[0] = 0;\n        while (x[0] == 0) {\n            rng.nextBytes(x);\n        }\n        ba[--n] = x[0];\n    }\n    ba[--n] = 2;\n    ba[--n] = 0;\n    return new BigInteger(ba);\n}\n// \"empty\" RSA key constructor\nvar RSAKey = /** @class */ (function () {\n    function RSAKey() {\n        this.n = null;\n        this.e = 0;\n        this.d = null;\n        this.p = null;\n        this.q = null;\n        this.dmp1 = null;\n        this.dmq1 = null;\n        this.coeff = null;\n    }\n    //#region PROTECTED\n    // protected\n    // RSAKey.prototype.doPublic = RSADoPublic;\n    // Perform raw public operation on \"x\": return x^e (mod n)\n    RSAKey.prototype.doPublic = function (x) {\n        return x.modPowInt(this.e, this.n);\n    };\n    // RSAKey.prototype.doPrivate = RSADoPrivate;\n    // Perform raw private operation on \"x\": return x^d (mod n)\n    RSAKey.prototype.doPrivate = function (x) {\n        if (this.p == null || this.q == null) {\n            return x.modPow(this.d, this.n);\n        }\n        // TODO: re-calculate any missing CRT params\n        var xp = x.mod(this.p).modPow(this.dmp1, this.p);\n        var xq = x.mod(this.q).modPow(this.dmq1, this.q);\n        while (xp.compareTo(xq) < 0) {\n            xp = xp.add(this.p);\n        }\n        return xp.subtract(xq).multiply(this.coeff).mod(this.p).multiply(this.q).add(xq);\n    };\n    //#endregion PROTECTED\n    //#region PUBLIC\n    // RSAKey.prototype.setPublic = RSASetPublic;\n    // Set the public key fields N and e from hex strings\n    RSAKey.prototype.setPublic = function (N, E) {\n        if (N != null && E != null && N.length > 0 && E.length > 0) {\n            this.n = parseBigInt(N, 16);\n            this.e = parseInt(E, 16);\n        }\n        else {\n            console.error(\"Invalid RSA public key\");\n        }\n    };\n    // RSAKey.prototype.encrypt = RSAEncrypt;\n    // Return the PKCS#1 RSA encryption of \"text\" as an even-length hex string\n    RSAKey.prototype.encrypt = function (text) {\n        var m = pkcs1pad2(text, (this.n.bitLength() + 7) >> 3);\n        if (m == null) {\n            return null;\n        }\n        var c = this.doPublic(m);\n        if (c == null) {\n            return null;\n        }\n        var h = c.toString(16);\n        if ((h.length & 1) == 0) {\n            return h;\n        }\n        else {\n            return \"0\" + h;\n        }\n    };\n    // RSAKey.prototype.setPrivate = RSASetPrivate;\n    // Set the private key fields N, e, and d from hex strings\n    RSAKey.prototype.setPrivate = function (N, E, D) {\n        if (N != null && E != null && N.length > 0 && E.length > 0) {\n            this.n = parseBigInt(N, 16);\n            this.e = parseInt(E, 16);\n            this.d = parseBigInt(D, 16);\n        }\n        else {\n            console.error(\"Invalid RSA private key\");\n        }\n    };\n    // RSAKey.prototype.setPrivateEx = RSASetPrivateEx;\n    // Set the private key fields N, e, d and CRT params from hex strings\n    RSAKey.prototype.setPrivateEx = function (N, E, D, P, Q, DP, DQ, C) {\n        if (N != null && E != null && N.length > 0 && E.length > 0) {\n            this.n = parseBigInt(N, 16);\n            this.e = parseInt(E, 16);\n            this.d = parseBigInt(D, 16);\n            this.p = parseBigInt(P, 16);\n            this.q = parseBigInt(Q, 16);\n            this.dmp1 = parseBigInt(DP, 16);\n            this.dmq1 = parseBigInt(DQ, 16);\n            this.coeff = parseBigInt(C, 16);\n        }\n        else {\n            console.error(\"Invalid RSA private key\");\n        }\n    };\n    // RSAKey.prototype.generate = RSAGenerate;\n    // Generate a new random private key B bits long, using public expt E\n    RSAKey.prototype.generate = function (B, E) {\n        var rng = new SecureRandom();\n        var qs = B >> 1;\n        this.e = parseInt(E, 16);\n        var ee = new BigInteger(E, 16);\n        for (;;) {\n            for (;;) {\n                this.p = new BigInteger(B - qs, 1, rng);\n                if (this.p.subtract(BigInteger.ONE).gcd(ee).compareTo(BigInteger.ONE) == 0 && this.p.isProbablePrime(10)) {\n                    break;\n                }\n            }\n            for (;;) {\n                this.q = new BigInteger(qs, 1, rng);\n                if (this.q.subtract(BigInteger.ONE).gcd(ee).compareTo(BigInteger.ONE) == 0 && this.q.isProbablePrime(10)) {\n                    break;\n                }\n            }\n            if (this.p.compareTo(this.q) <= 0) {\n                var t = this.p;\n                this.p = this.q;\n                this.q = t;\n            }\n            var p1 = this.p.subtract(BigInteger.ONE);\n            var q1 = this.q.subtract(BigInteger.ONE);\n            var phi = p1.multiply(q1);\n            if (phi.gcd(ee).compareTo(BigInteger.ONE) == 0) {\n                this.n = this.p.multiply(this.q);\n                this.d = ee.modInverse(phi);\n                this.dmp1 = this.d.mod(p1);\n                this.dmq1 = this.d.mod(q1);\n                this.coeff = this.q.modInverse(this.p);\n                break;\n            }\n        }\n    };\n    // RSAKey.prototype.decrypt = RSADecrypt;\n    // Return the PKCS#1 RSA decryption of \"ctext\".\n    // \"ctext\" is an even-length hex string and the output is a plain string.\n    RSAKey.prototype.decrypt = function (ctext) {\n        var c = parseBigInt(ctext, 16);\n        var m = this.doPrivate(c);\n        if (m == null) {\n            return null;\n        }\n        return pkcs1unpad2(m, (this.n.bitLength() + 7) >> 3);\n    };\n    // Generate a new random private key B bits long, using public expt E\n    RSAKey.prototype.generateAsync = function (B, E, callback) {\n        var rng = new SecureRandom();\n        var qs = B >> 1;\n        this.e = parseInt(E, 16);\n        var ee = new BigInteger(E, 16);\n        var rsa = this;\n        // These functions have non-descript names because they were originally for(;;) loops.\n        // I don't know about cryptography to give them better names than loop1-4.\n        var loop1 = function () {\n            var loop4 = function () {\n                if (rsa.p.compareTo(rsa.q) <= 0) {\n                    var t = rsa.p;\n                    rsa.p = rsa.q;\n                    rsa.q = t;\n                }\n                var p1 = rsa.p.subtract(BigInteger.ONE);\n                var q1 = rsa.q.subtract(BigInteger.ONE);\n                var phi = p1.multiply(q1);\n                if (phi.gcd(ee).compareTo(BigInteger.ONE) == 0) {\n                    rsa.n = rsa.p.multiply(rsa.q);\n                    rsa.d = ee.modInverse(phi);\n                    rsa.dmp1 = rsa.d.mod(p1);\n                    rsa.dmq1 = rsa.d.mod(q1);\n                    rsa.coeff = rsa.q.modInverse(rsa.p);\n                    setTimeout(function () { callback(); }, 0); // escape\n                }\n                else {\n                    setTimeout(loop1, 0);\n                }\n            };\n            var loop3 = function () {\n                rsa.q = nbi();\n                rsa.q.fromNumberAsync(qs, 1, rng, function () {\n                    rsa.q.subtract(BigInteger.ONE).gcda(ee, function (r) {\n                        if (r.compareTo(BigInteger.ONE) == 0 && rsa.q.isProbablePrime(10)) {\n                            setTimeout(loop4, 0);\n                        }\n                        else {\n                            setTimeout(loop3, 0);\n                        }\n                    });\n                });\n            };\n            var loop2 = function () {\n                rsa.p = nbi();\n                rsa.p.fromNumberAsync(B - qs, 1, rng, function () {\n                    rsa.p.subtract(BigInteger.ONE).gcda(ee, function (r) {\n                        if (r.compareTo(BigInteger.ONE) == 0 && rsa.p.isProbablePrime(10)) {\n                            setTimeout(loop3, 0);\n                        }\n                        else {\n                            setTimeout(loop2, 0);\n                        }\n                    });\n                });\n            };\n            setTimeout(loop2, 0);\n        };\n        setTimeout(loop1, 0);\n    };\n    RSAKey.prototype.sign = function (text, digestMethod, digestName) {\n        var header = getDigestHeader(digestName);\n        var digest = header + digestMethod(text).toString();\n        var m = pkcs1pad1(digest, this.n.bitLength() / 4);\n        if (m == null) {\n            return null;\n        }\n        var c = this.doPrivate(m);\n        if (c == null) {\n            return null;\n        }\n        var h = c.toString(16);\n        if ((h.length & 1) == 0) {\n            return h;\n        }\n        else {\n            return \"0\" + h;\n        }\n    };\n    RSAKey.prototype.verify = function (text, signature, digestMethod) {\n        var c = parseBigInt(signature, 16);\n        var m = this.doPublic(c);\n        if (m == null) {\n            return null;\n        }\n        var unpadded = m.toString(16).replace(/^1f+00/, \"\");\n        var digest = removeDigestHeader(unpadded);\n        return digest == digestMethod(text).toString();\n    };\n    return RSAKey;\n}());\n// Undo PKCS#1 (type 2, random) padding and, if valid, return the plaintext\nfunction pkcs1unpad2(d, n) {\n    var b = d.toByteArray();\n    var i = 0;\n    while (i < b.length && b[i] == 0) {\n        ++i;\n    }\n    if (b.length - i != n - 1 || b[i] != 2) {\n        return null;\n    }\n    ++i;\n    while (b[i] != 0) {\n        if (++i >= b.length) {\n            return null;\n        }\n    }\n    var ret = \"\";\n    while (++i < b.length) {\n        var c = b[i] & 255;\n        if (c < 128) { // utf-8 decode\n            ret += String.fromCharCode(c);\n        }\n        else if ((c > 191) && (c < 224)) {\n            ret += String.fromCharCode(((c & 31) << 6) | (b[i + 1] & 63));\n            ++i;\n        }\n        else {\n            ret += String.fromCharCode(((c & 15) << 12) | ((b[i + 1] & 63) << 6) | (b[i + 2] & 63));\n            i += 2;\n        }\n    }\n    return ret;\n}\n// https://tools.ietf.org/html/rfc3447#page-43\nvar DIGEST_HEADERS = {\n    md2: \"3020300c06082a864886f70d020205000410\",\n    md5: \"3020300c06082a864886f70d020505000410\",\n    sha1: \"3021300906052b0e03021a05000414\",\n    sha224: \"302d300d06096086480165030402040500041c\",\n    sha256: \"3031300d060960864801650304020105000420\",\n    sha384: \"3041300d060960864801650304020205000430\",\n    sha512: \"3051300d060960864801650304020305000440\",\n    ripemd160: \"3021300906052b2403020105000414\",\n};\nfunction getDigestHeader(name) {\n    return DIGEST_HEADERS[name] || \"\";\n}\nfunction removeDigestHeader(str) {\n    for (var name_1 in DIGEST_HEADERS) {\n        if (DIGEST_HEADERS.hasOwnProperty(name_1)) {\n            var header = DIGEST_HEADERS[name_1];\n            var len = header.length;\n            if (str.substr(0, len) == header) {\n                return str.substr(len);\n            }\n        }\n    }\n    return str;\n}\n// Return the PKCS#1 RSA encryption of \"text\" as a Base64-encoded string\n// function RSAEncryptB64(text) {\n//  var h = this.encrypt(text);\n//  if(h) return hex2b64(h); else return null;\n// }\n// public\n// RSAKey.prototype.encrypt_b64 = RSAEncryptB64;\n\n/*!\nCopyright (c) 2011, Yahoo! Inc. All rights reserved.\nCode licensed under the BSD License:\nhttp://developer.yahoo.com/yui/license.html\nversion: 2.9.0\n*/\nvar YAHOO = {};\nYAHOO.lang = {\n    /**\n     * Utility to set up the prototype, constructor and superclass properties to\n     * support an inheritance strategy that can chain constructors and methods.\n     * Static members will not be inherited.\n     *\n     * @method extend\n     * @static\n     * @param {Function} subc   the object to modify\n     * @param {Function} superc the object to inherit\n     * @param {Object} overrides  additional properties/methods to add to the\n     *                              subclass prototype.  These will override the\n     *                              matching items obtained from the superclass\n     *                              if present.\n     */\n    extend: function(subc, superc, overrides) {\n        if (! superc || ! subc) {\n            throw new Error(\"YAHOO.lang.extend failed, please check that \" +\n                \"all dependencies are included.\");\n        }\n\n        var F = function() {};\n        F.prototype = superc.prototype;\n        subc.prototype = new F();\n        subc.prototype.constructor = subc;\n        subc.superclass = superc.prototype;\n\n        if (superc.prototype.constructor == Object.prototype.constructor) {\n            superc.prototype.constructor = superc;\n        }\n\n        if (overrides) {\n            var i;\n            for (i in overrides) {\n                subc.prototype[i] = overrides[i];\n            }\n\n            /*\n             * IE will not enumerate native functions in a derived object even if the\n             * function was overridden.  This is a workaround for specific functions\n             * we care about on the Object prototype.\n             * @property _IEEnumFix\n             * @param {Function} r  the object to receive the augmentation\n             * @param {Function} s  the object that supplies the properties to augment\n             * @static\n             * @private\n             */\n            var _IEEnumFix = function() {},\n                ADD = [\"toString\", \"valueOf\"];\n            try {\n                if (/MSIE/.test(navigator.userAgent)) {\n                    _IEEnumFix = function(r, s) {\n                        for (i = 0; i < ADD.length; i = i + 1) {\n                            var fname = ADD[i], f = s[fname];\n                            if (typeof f === 'function' && f != Object.prototype[fname]) {\n                                r[fname] = f;\n                            }\n                        }\n                    };\n                }\n            } catch (ex) {}            _IEEnumFix(subc.prototype, overrides);\n        }\n    }\n};\n\n/* asn1-1.0.13.js (c) 2013-2017 Kenji Urushima | kjur.github.com/jsrsasign/license\n */\n\n/**\n * @fileOverview\n * @name asn1-1.0.js\n * @author Kenji Urushima kenji.urushima@gmail.com\n * @version asn1 1.0.13 (2017-Jun-02)\n * @since jsrsasign 2.1\n * @license <a href=\"https://kjur.github.io/jsrsasign/license/\">MIT License</a>\n */\n\n/**\n * kjur's class library name space\n * <p>\n * This name space provides following name spaces:\n * <ul>\n * <li>{@link KJUR.asn1} - ASN.1 primitive hexadecimal encoder</li>\n * <li>{@link KJUR.asn1.x509} - ASN.1 structure for X.509 certificate and CRL</li>\n * <li>{@link KJUR.crypto} - Java Cryptographic Extension(JCE) style MessageDigest/Signature\n * class and utilities</li>\n * </ul>\n * </p>\n * NOTE: Please ignore method summary and document of this namespace. This caused by a bug of jsdoc2.\n * @name KJUR\n * @namespace kjur's class library name space\n */\nvar KJUR = {};\n\n/**\n * kjur's ASN.1 class library name space\n * <p>\n * This is ITU-T X.690 ASN.1 DER encoder class library and\n * class structure and methods is very similar to\n * org.bouncycastle.asn1 package of\n * well known BouncyCaslte Cryptography Library.\n * <h4>PROVIDING ASN.1 PRIMITIVES</h4>\n * Here are ASN.1 DER primitive classes.\n * <ul>\n * <li>0x01 {@link KJUR.asn1.DERBoolean}</li>\n * <li>0x02 {@link KJUR.asn1.DERInteger}</li>\n * <li>0x03 {@link KJUR.asn1.DERBitString}</li>\n * <li>0x04 {@link KJUR.asn1.DEROctetString}</li>\n * <li>0x05 {@link KJUR.asn1.DERNull}</li>\n * <li>0x06 {@link KJUR.asn1.DERObjectIdentifier}</li>\n * <li>0x0a {@link KJUR.asn1.DEREnumerated}</li>\n * <li>0x0c {@link KJUR.asn1.DERUTF8String}</li>\n * <li>0x12 {@link KJUR.asn1.DERNumericString}</li>\n * <li>0x13 {@link KJUR.asn1.DERPrintableString}</li>\n * <li>0x14 {@link KJUR.asn1.DERTeletexString}</li>\n * <li>0x16 {@link KJUR.asn1.DERIA5String}</li>\n * <li>0x17 {@link KJUR.asn1.DERUTCTime}</li>\n * <li>0x18 {@link KJUR.asn1.DERGeneralizedTime}</li>\n * <li>0x30 {@link KJUR.asn1.DERSequence}</li>\n * <li>0x31 {@link KJUR.asn1.DERSet}</li>\n * </ul>\n * <h4>OTHER ASN.1 CLASSES</h4>\n * <ul>\n * <li>{@link KJUR.asn1.ASN1Object}</li>\n * <li>{@link KJUR.asn1.DERAbstractString}</li>\n * <li>{@link KJUR.asn1.DERAbstractTime}</li>\n * <li>{@link KJUR.asn1.DERAbstractStructured}</li>\n * <li>{@link KJUR.asn1.DERTaggedObject}</li>\n * </ul>\n * <h4>SUB NAME SPACES</h4>\n * <ul>\n * <li>{@link KJUR.asn1.cades} - CAdES long term signature format</li>\n * <li>{@link KJUR.asn1.cms} - Cryptographic Message Syntax</li>\n * <li>{@link KJUR.asn1.csr} - Certificate Signing Request (CSR/PKCS#10)</li>\n * <li>{@link KJUR.asn1.tsp} - RFC 3161 Timestamping Protocol Format</li>\n * <li>{@link KJUR.asn1.x509} - RFC 5280 X.509 certificate and CRL</li>\n * </ul>\n * </p>\n * NOTE: Please ignore method summary and document of this namespace.\n * This caused by a bug of jsdoc2.\n * @name KJUR.asn1\n * @namespace\n */\nif (typeof KJUR.asn1 == \"undefined\" || !KJUR.asn1) KJUR.asn1 = {};\n\n/**\n * ASN1 utilities class\n * @name KJUR.asn1.ASN1Util\n * @class ASN1 utilities class\n * @since asn1 1.0.2\n */\nKJUR.asn1.ASN1Util = new function() {\n    this.integerToByteHex = function(i) {\n        var h = i.toString(16);\n        if ((h.length % 2) == 1) h = '0' + h;\n        return h;\n    };\n    this.bigIntToMinTwosComplementsHex = function(bigIntegerValue) {\n        var h = bigIntegerValue.toString(16);\n        if (h.substr(0, 1) != '-') {\n            if (h.length % 2 == 1) {\n                h = '0' + h;\n            } else {\n                if (! h.match(/^[0-7]/)) {\n                    h = '00' + h;\n                }\n            }\n        } else {\n            var hPos = h.substr(1);\n            var xorLen = hPos.length;\n            if (xorLen % 2 == 1) {\n                xorLen += 1;\n            } else {\n                if (! h.match(/^[0-7]/)) {\n                    xorLen += 2;\n                }\n            }\n            var hMask = '';\n            for (var i = 0; i < xorLen; i++) {\n                hMask += 'f';\n            }\n            var biMask = new BigInteger(hMask, 16);\n            var biNeg = biMask.xor(bigIntegerValue).add(BigInteger.ONE);\n            h = biNeg.toString(16).replace(/^-/, '');\n        }\n        return h;\n    };\n    /**\n     * get PEM string from hexadecimal data and header string\n     * @name getPEMStringFromHex\n     * @memberOf KJUR.asn1.ASN1Util\n     * @function\n     * @param {String} dataHex hexadecimal string of PEM body\n     * @param {String} pemHeader PEM header string (ex. 'RSA PRIVATE KEY')\n     * @return {String} PEM formatted string of input data\n     * @description\n     * This method converts a hexadecimal string to a PEM string with\n     * a specified header. Its line break will be CRLF(\"\\r\\n\").\n     * @example\n     * var pem  = KJUR.asn1.ASN1Util.getPEMStringFromHex('616161', 'RSA PRIVATE KEY');\n     * // value of pem will be:\n     * -----BEGIN PRIVATE KEY-----\n     * YWFh\n     * -----END PRIVATE KEY-----\n     */\n    this.getPEMStringFromHex = function(dataHex, pemHeader) {\n        return hextopem(dataHex, pemHeader);\n    };\n\n    /**\n     * generate ASN1Object specifed by JSON parameters\n     * @name newObject\n     * @memberOf KJUR.asn1.ASN1Util\n     * @function\n     * @param {Array} param JSON parameter to generate ASN1Object\n     * @return {KJUR.asn1.ASN1Object} generated object\n     * @since asn1 1.0.3\n     * @description\n     * generate any ASN1Object specified by JSON param\n     * including ASN.1 primitive or structured.\n     * Generally 'param' can be described as follows:\n     * <blockquote>\n     * {TYPE-OF-ASNOBJ: ASN1OBJ-PARAMETER}\n     * </blockquote>\n     * 'TYPE-OF-ASN1OBJ' can be one of following symbols:\n     * <ul>\n     * <li>'bool' - DERBoolean</li>\n     * <li>'int' - DERInteger</li>\n     * <li>'bitstr' - DERBitString</li>\n     * <li>'octstr' - DEROctetString</li>\n     * <li>'null' - DERNull</li>\n     * <li>'oid' - DERObjectIdentifier</li>\n     * <li>'enum' - DEREnumerated</li>\n     * <li>'utf8str' - DERUTF8String</li>\n     * <li>'numstr' - DERNumericString</li>\n     * <li>'prnstr' - DERPrintableString</li>\n     * <li>'telstr' - DERTeletexString</li>\n     * <li>'ia5str' - DERIA5String</li>\n     * <li>'utctime' - DERUTCTime</li>\n     * <li>'gentime' - DERGeneralizedTime</li>\n     * <li>'seq' - DERSequence</li>\n     * <li>'set' - DERSet</li>\n     * <li>'tag' - DERTaggedObject</li>\n     * </ul>\n     * @example\n     * newObject({'prnstr': 'aaa'});\n     * newObject({'seq': [{'int': 3}, {'prnstr': 'aaa'}]})\n     * // ASN.1 Tagged Object\n     * newObject({'tag': {'tag': 'a1',\n     *                    'explicit': true,\n     *                    'obj': {'seq': [{'int': 3}, {'prnstr': 'aaa'}]}}});\n     * // more simple representation of ASN.1 Tagged Object\n     * newObject({'tag': ['a1',\n     *                    true,\n     *                    {'seq': [\n     *                      {'int': 3},\n     *                      {'prnstr': 'aaa'}]}\n     *                   ]});\n     */\n    this.newObject = function(param) {\n        var _KJUR = KJUR,\n            _KJUR_asn1 = _KJUR.asn1,\n            _DERBoolean = _KJUR_asn1.DERBoolean,\n            _DERInteger = _KJUR_asn1.DERInteger,\n            _DERBitString = _KJUR_asn1.DERBitString,\n            _DEROctetString = _KJUR_asn1.DEROctetString,\n            _DERNull = _KJUR_asn1.DERNull,\n            _DERObjectIdentifier = _KJUR_asn1.DERObjectIdentifier,\n            _DEREnumerated = _KJUR_asn1.DEREnumerated,\n            _DERUTF8String = _KJUR_asn1.DERUTF8String,\n            _DERNumericString = _KJUR_asn1.DERNumericString,\n            _DERPrintableString = _KJUR_asn1.DERPrintableString,\n            _DERTeletexString = _KJUR_asn1.DERTeletexString,\n            _DERIA5String = _KJUR_asn1.DERIA5String,\n            _DERUTCTime = _KJUR_asn1.DERUTCTime,\n            _DERGeneralizedTime = _KJUR_asn1.DERGeneralizedTime,\n            _DERSequence = _KJUR_asn1.DERSequence,\n            _DERSet = _KJUR_asn1.DERSet,\n            _DERTaggedObject = _KJUR_asn1.DERTaggedObject,\n            _newObject = _KJUR_asn1.ASN1Util.newObject;\n\n        var keys = Object.keys(param);\n        if (keys.length != 1)\n            throw \"key of param shall be only one.\";\n        var key = keys[0];\n\n        if (\":bool:int:bitstr:octstr:null:oid:enum:utf8str:numstr:prnstr:telstr:ia5str:utctime:gentime:seq:set:tag:\".indexOf(\":\" + key + \":\") == -1)\n            throw \"undefined key: \" + key;\n\n        if (key == \"bool\")    return new _DERBoolean(param[key]);\n        if (key == \"int\")     return new _DERInteger(param[key]);\n        if (key == \"bitstr\")  return new _DERBitString(param[key]);\n        if (key == \"octstr\")  return new _DEROctetString(param[key]);\n        if (key == \"null\")    return new _DERNull(param[key]);\n        if (key == \"oid\")     return new _DERObjectIdentifier(param[key]);\n        if (key == \"enum\")    return new _DEREnumerated(param[key]);\n        if (key == \"utf8str\") return new _DERUTF8String(param[key]);\n        if (key == \"numstr\")  return new _DERNumericString(param[key]);\n        if (key == \"prnstr\")  return new _DERPrintableString(param[key]);\n        if (key == \"telstr\")  return new _DERTeletexString(param[key]);\n        if (key == \"ia5str\")  return new _DERIA5String(param[key]);\n        if (key == \"utctime\") return new _DERUTCTime(param[key]);\n        if (key == \"gentime\") return new _DERGeneralizedTime(param[key]);\n\n        if (key == \"seq\") {\n            var paramList = param[key];\n            var a = [];\n            for (var i = 0; i < paramList.length; i++) {\n                var asn1Obj = _newObject(paramList[i]);\n                a.push(asn1Obj);\n            }\n            return new _DERSequence({'array': a});\n        }\n\n        if (key == \"set\") {\n            var paramList = param[key];\n            var a = [];\n            for (var i = 0; i < paramList.length; i++) {\n                var asn1Obj = _newObject(paramList[i]);\n                a.push(asn1Obj);\n            }\n            return new _DERSet({'array': a});\n        }\n\n        if (key == \"tag\") {\n            var tagParam = param[key];\n            if (Object.prototype.toString.call(tagParam) === '[object Array]' &&\n                tagParam.length == 3) {\n                var obj = _newObject(tagParam[2]);\n                return new _DERTaggedObject({tag: tagParam[0],\n                    explicit: tagParam[1],\n                    obj: obj});\n            } else {\n                var newParam = {};\n                if (tagParam.explicit !== undefined)\n                    newParam.explicit = tagParam.explicit;\n                if (tagParam.tag !== undefined)\n                    newParam.tag = tagParam.tag;\n                if (tagParam.obj === undefined)\n                    throw \"obj shall be specified for 'tag'.\";\n                newParam.obj = _newObject(tagParam.obj);\n                return new _DERTaggedObject(newParam);\n            }\n        }\n    };\n\n    /**\n     * get encoded hexadecimal string of ASN1Object specifed by JSON parameters\n     * @name jsonToASN1HEX\n     * @memberOf KJUR.asn1.ASN1Util\n     * @function\n     * @param {Array} param JSON parameter to generate ASN1Object\n     * @return hexadecimal string of ASN1Object\n     * @since asn1 1.0.4\n     * @description\n     * As for ASN.1 object representation of JSON object,\n     * please see {@link newObject}.\n     * @example\n     * jsonToASN1HEX({'prnstr': 'aaa'});\n     */\n    this.jsonToASN1HEX = function(param) {\n        var asn1Obj = this.newObject(param);\n        return asn1Obj.getEncodedHex();\n    };\n};\n\n/**\n * get dot noted oid number string from hexadecimal value of OID\n * @name oidHexToInt\n * @memberOf KJUR.asn1.ASN1Util\n * @function\n * @param {String} hex hexadecimal value of object identifier\n * @return {String} dot noted string of object identifier\n * @since jsrsasign 4.8.3 asn1 1.0.7\n * @description\n * This static method converts from hexadecimal string representation of\n * ASN.1 value of object identifier to oid number string.\n * @example\n * KJUR.asn1.ASN1Util.oidHexToInt('550406') &rarr; \"2.5.4.6\"\n */\nKJUR.asn1.ASN1Util.oidHexToInt = function(hex) {\n    var s = \"\";\n    var i01 = parseInt(hex.substr(0, 2), 16);\n    var i0 = Math.floor(i01 / 40);\n    var i1 = i01 % 40;\n    var s = i0 + \".\" + i1;\n\n    var binbuf = \"\";\n    for (var i = 2; i < hex.length; i += 2) {\n        var value = parseInt(hex.substr(i, 2), 16);\n        var bin = (\"00000000\" + value.toString(2)).slice(- 8);\n        binbuf = binbuf + bin.substr(1, 7);\n        if (bin.substr(0, 1) == \"0\") {\n            var bi = new BigInteger(binbuf, 2);\n            s = s + \".\" + bi.toString(10);\n            binbuf = \"\";\n        }\n    }\n    return s;\n};\n\n/**\n * get hexadecimal value of object identifier from dot noted oid value\n * @name oidIntToHex\n * @memberOf KJUR.asn1.ASN1Util\n * @function\n * @param {String} oidString dot noted string of object identifier\n * @return {String} hexadecimal value of object identifier\n * @since jsrsasign 4.8.3 asn1 1.0.7\n * @description\n * This static method converts from object identifier value string.\n * to hexadecimal string representation of it.\n * @example\n * KJUR.asn1.ASN1Util.oidIntToHex(\"2.5.4.6\") &rarr; \"550406\"\n */\nKJUR.asn1.ASN1Util.oidIntToHex = function(oidString) {\n    var itox = function(i) {\n        var h = i.toString(16);\n        if (h.length == 1) h = '0' + h;\n        return h;\n    };\n\n    var roidtox = function(roid) {\n        var h = '';\n        var bi = new BigInteger(roid, 10);\n        var b = bi.toString(2);\n        var padLen = 7 - b.length % 7;\n        if (padLen == 7) padLen = 0;\n        var bPad = '';\n        for (var i = 0; i < padLen; i++) bPad += '0';\n        b = bPad + b;\n        for (var i = 0; i < b.length - 1; i += 7) {\n            var b8 = b.substr(i, 7);\n            if (i != b.length - 7) b8 = '1' + b8;\n            h += itox(parseInt(b8, 2));\n        }\n        return h;\n    };\n\n    if (! oidString.match(/^[0-9.]+$/)) {\n        throw \"malformed oid string: \" + oidString;\n    }\n    var h = '';\n    var a = oidString.split('.');\n    var i0 = parseInt(a[0]) * 40 + parseInt(a[1]);\n    h += itox(i0);\n    a.splice(0, 2);\n    for (var i = 0; i < a.length; i++) {\n        h += roidtox(a[i]);\n    }\n    return h;\n};\n\n\n// ********************************************************************\n//  Abstract ASN.1 Classes\n// ********************************************************************\n\n// ********************************************************************\n\n/**\n * base class for ASN.1 DER encoder object\n * @name KJUR.asn1.ASN1Object\n * @class base class for ASN.1 DER encoder object\n * @property {Boolean} isModified flag whether internal data was changed\n * @property {String} hTLV hexadecimal string of ASN.1 TLV\n * @property {String} hT hexadecimal string of ASN.1 TLV tag(T)\n * @property {String} hL hexadecimal string of ASN.1 TLV length(L)\n * @property {String} hV hexadecimal string of ASN.1 TLV value(V)\n * @description\n */\nKJUR.asn1.ASN1Object = function() {\n    var hV = '';\n\n    /**\n     * get hexadecimal ASN.1 TLV length(L) bytes from TLV value(V)\n     * @name getLengthHexFromValue\n     * @memberOf KJUR.asn1.ASN1Object#\n     * @function\n     * @return {String} hexadecimal string of ASN.1 TLV length(L)\n     */\n    this.getLengthHexFromValue = function() {\n        if (typeof this.hV == \"undefined\" || this.hV == null) {\n            throw \"this.hV is null or undefined.\";\n        }\n        if (this.hV.length % 2 == 1) {\n            throw \"value hex must be even length: n=\" + hV.length + \",v=\" + this.hV;\n        }\n        var n = this.hV.length / 2;\n        var hN = n.toString(16);\n        if (hN.length % 2 == 1) {\n            hN = \"0\" + hN;\n        }\n        if (n < 128) {\n            return hN;\n        } else {\n            var hNlen = hN.length / 2;\n            if (hNlen > 15) {\n                throw \"ASN.1 length too long to represent by 8x: n = \" + n.toString(16);\n            }\n            var head = 128 + hNlen;\n            return head.toString(16) + hN;\n        }\n    };\n\n    /**\n     * get hexadecimal string of ASN.1 TLV bytes\n     * @name getEncodedHex\n     * @memberOf KJUR.asn1.ASN1Object#\n     * @function\n     * @return {String} hexadecimal string of ASN.1 TLV\n     */\n    this.getEncodedHex = function() {\n        if (this.hTLV == null || this.isModified) {\n            this.hV = this.getFreshValueHex();\n            this.hL = this.getLengthHexFromValue();\n            this.hTLV = this.hT + this.hL + this.hV;\n            this.isModified = false;\n            //alert(\"first time: \" + this.hTLV);\n        }\n        return this.hTLV;\n    };\n\n    /**\n     * get hexadecimal string of ASN.1 TLV value(V) bytes\n     * @name getValueHex\n     * @memberOf KJUR.asn1.ASN1Object#\n     * @function\n     * @return {String} hexadecimal string of ASN.1 TLV value(V) bytes\n     */\n    this.getValueHex = function() {\n        this.getEncodedHex();\n        return this.hV;\n    };\n\n    this.getFreshValueHex = function() {\n        return '';\n    };\n};\n\n// == BEGIN DERAbstractString ================================================\n/**\n * base class for ASN.1 DER string classes\n * @name KJUR.asn1.DERAbstractString\n * @class base class for ASN.1 DER string classes\n * @param {Array} params associative array of parameters (ex. {'str': 'aaa'})\n * @property {String} s internal string of value\n * @extends KJUR.asn1.ASN1Object\n * @description\n * <br/>\n * As for argument 'params' for constructor, you can specify one of\n * following properties:\n * <ul>\n * <li>str - specify initial ASN.1 value(V) by a string</li>\n * <li>hex - specify initial ASN.1 value(V) by a hexadecimal string</li>\n * </ul>\n * NOTE: 'params' can be omitted.\n */\nKJUR.asn1.DERAbstractString = function(params) {\n    KJUR.asn1.DERAbstractString.superclass.constructor.call(this);\n\n    /**\n     * get string value of this string object\n     * @name getString\n     * @memberOf KJUR.asn1.DERAbstractString#\n     * @function\n     * @return {String} string value of this string object\n     */\n    this.getString = function() {\n        return this.s;\n    };\n\n    /**\n     * set value by a string\n     * @name setString\n     * @memberOf KJUR.asn1.DERAbstractString#\n     * @function\n     * @param {String} newS value by a string to set\n     */\n    this.setString = function(newS) {\n        this.hTLV = null;\n        this.isModified = true;\n        this.s = newS;\n        this.hV = stohex(this.s);\n    };\n\n    /**\n     * set value by a hexadecimal string\n     * @name setStringHex\n     * @memberOf KJUR.asn1.DERAbstractString#\n     * @function\n     * @param {String} newHexString value by a hexadecimal string to set\n     */\n    this.setStringHex = function(newHexString) {\n        this.hTLV = null;\n        this.isModified = true;\n        this.s = null;\n        this.hV = newHexString;\n    };\n\n    this.getFreshValueHex = function() {\n        return this.hV;\n    };\n\n    if (typeof params != \"undefined\") {\n        if (typeof params == \"string\") {\n            this.setString(params);\n        } else if (typeof params['str'] != \"undefined\") {\n            this.setString(params['str']);\n        } else if (typeof params['hex'] != \"undefined\") {\n            this.setStringHex(params['hex']);\n        }\n    }\n};\nYAHOO.lang.extend(KJUR.asn1.DERAbstractString, KJUR.asn1.ASN1Object);\n// == END   DERAbstractString ================================================\n\n// == BEGIN DERAbstractTime ==================================================\n/**\n * base class for ASN.1 DER Generalized/UTCTime class\n * @name KJUR.asn1.DERAbstractTime\n * @class base class for ASN.1 DER Generalized/UTCTime class\n * @param {Array} params associative array of parameters (ex. {'str': '130430235959Z'})\n * @extends KJUR.asn1.ASN1Object\n * @description\n * @see KJUR.asn1.ASN1Object - superclass\n */\nKJUR.asn1.DERAbstractTime = function(params) {\n    KJUR.asn1.DERAbstractTime.superclass.constructor.call(this);\n\n    // --- PRIVATE METHODS --------------------\n    this.localDateToUTC = function(d) {\n        utc = d.getTime() + (d.getTimezoneOffset() * 60000);\n        var utcDate = new Date(utc);\n        return utcDate;\n    };\n\n    /*\n     * format date string by Data object\n     * @name formatDate\n     * @memberOf KJUR.asn1.AbstractTime;\n     * @param {Date} dateObject\n     * @param {string} type 'utc' or 'gen'\n     * @param {boolean} withMillis flag for with millisections or not\n     * @description\n     * 'withMillis' flag is supported from asn1 1.0.6.\n     */\n    this.formatDate = function(dateObject, type, withMillis) {\n        var pad = this.zeroPadding;\n        var d = this.localDateToUTC(dateObject);\n        var year = String(d.getFullYear());\n        if (type == 'utc') year = year.substr(2, 2);\n        var month = pad(String(d.getMonth() + 1), 2);\n        var day = pad(String(d.getDate()), 2);\n        var hour = pad(String(d.getHours()), 2);\n        var min = pad(String(d.getMinutes()), 2);\n        var sec = pad(String(d.getSeconds()), 2);\n        var s = year + month + day + hour + min + sec;\n        if (withMillis === true) {\n            var millis = d.getMilliseconds();\n            if (millis != 0) {\n                var sMillis = pad(String(millis), 3);\n                sMillis = sMillis.replace(/[0]+$/, \"\");\n                s = s + \".\" + sMillis;\n            }\n        }\n        return s + \"Z\";\n    };\n\n    this.zeroPadding = function(s, len) {\n        if (s.length >= len) return s;\n        return new Array(len - s.length + 1).join('0') + s;\n    };\n\n    // --- PUBLIC METHODS --------------------\n    /**\n     * get string value of this string object\n     * @name getString\n     * @memberOf KJUR.asn1.DERAbstractTime#\n     * @function\n     * @return {String} string value of this time object\n     */\n    this.getString = function() {\n        return this.s;\n    };\n\n    /**\n     * set value by a string\n     * @name setString\n     * @memberOf KJUR.asn1.DERAbstractTime#\n     * @function\n     * @param {String} newS value by a string to set such like \"130430235959Z\"\n     */\n    this.setString = function(newS) {\n        this.hTLV = null;\n        this.isModified = true;\n        this.s = newS;\n        this.hV = stohex(newS);\n    };\n\n    /**\n     * set value by a Date object\n     * @name setByDateValue\n     * @memberOf KJUR.asn1.DERAbstractTime#\n     * @function\n     * @param {Integer} year year of date (ex. 2013)\n     * @param {Integer} month month of date between 1 and 12 (ex. 12)\n     * @param {Integer} day day of month\n     * @param {Integer} hour hours of date\n     * @param {Integer} min minutes of date\n     * @param {Integer} sec seconds of date\n     */\n    this.setByDateValue = function(year, month, day, hour, min, sec) {\n        var dateObject = new Date(Date.UTC(year, month - 1, day, hour, min, sec, 0));\n        this.setByDate(dateObject);\n    };\n\n    this.getFreshValueHex = function() {\n        return this.hV;\n    };\n};\nYAHOO.lang.extend(KJUR.asn1.DERAbstractTime, KJUR.asn1.ASN1Object);\n// == END   DERAbstractTime ==================================================\n\n// == BEGIN DERAbstractStructured ============================================\n/**\n * base class for ASN.1 DER structured class\n * @name KJUR.asn1.DERAbstractStructured\n * @class base class for ASN.1 DER structured class\n * @property {Array} asn1Array internal array of ASN1Object\n * @extends KJUR.asn1.ASN1Object\n * @description\n * @see KJUR.asn1.ASN1Object - superclass\n */\nKJUR.asn1.DERAbstractStructured = function(params) {\n    KJUR.asn1.DERAbstractString.superclass.constructor.call(this);\n\n    /**\n     * set value by array of ASN1Object\n     * @name setByASN1ObjectArray\n     * @memberOf KJUR.asn1.DERAbstractStructured#\n     * @function\n     * @param {array} asn1ObjectArray array of ASN1Object to set\n     */\n    this.setByASN1ObjectArray = function(asn1ObjectArray) {\n        this.hTLV = null;\n        this.isModified = true;\n        this.asn1Array = asn1ObjectArray;\n    };\n\n    /**\n     * append an ASN1Object to internal array\n     * @name appendASN1Object\n     * @memberOf KJUR.asn1.DERAbstractStructured#\n     * @function\n     * @param {ASN1Object} asn1Object to add\n     */\n    this.appendASN1Object = function(asn1Object) {\n        this.hTLV = null;\n        this.isModified = true;\n        this.asn1Array.push(asn1Object);\n    };\n\n    this.asn1Array = new Array();\n    if (typeof params != \"undefined\") {\n        if (typeof params['array'] != \"undefined\") {\n            this.asn1Array = params['array'];\n        }\n    }\n};\nYAHOO.lang.extend(KJUR.asn1.DERAbstractStructured, KJUR.asn1.ASN1Object);\n\n\n// ********************************************************************\n//  ASN.1 Object Classes\n// ********************************************************************\n\n// ********************************************************************\n/**\n * class for ASN.1 DER Boolean\n * @name KJUR.asn1.DERBoolean\n * @class class for ASN.1 DER Boolean\n * @extends KJUR.asn1.ASN1Object\n * @description\n * @see KJUR.asn1.ASN1Object - superclass\n */\nKJUR.asn1.DERBoolean = function() {\n    KJUR.asn1.DERBoolean.superclass.constructor.call(this);\n    this.hT = \"01\";\n    this.hTLV = \"0101ff\";\n};\nYAHOO.lang.extend(KJUR.asn1.DERBoolean, KJUR.asn1.ASN1Object);\n\n// ********************************************************************\n/**\n * class for ASN.1 DER Integer\n * @name KJUR.asn1.DERInteger\n * @class class for ASN.1 DER Integer\n * @extends KJUR.asn1.ASN1Object\n * @description\n * <br/>\n * As for argument 'params' for constructor, you can specify one of\n * following properties:\n * <ul>\n * <li>int - specify initial ASN.1 value(V) by integer value</li>\n * <li>bigint - specify initial ASN.1 value(V) by BigInteger object</li>\n * <li>hex - specify initial ASN.1 value(V) by a hexadecimal string</li>\n * </ul>\n * NOTE: 'params' can be omitted.\n */\nKJUR.asn1.DERInteger = function(params) {\n    KJUR.asn1.DERInteger.superclass.constructor.call(this);\n    this.hT = \"02\";\n\n    /**\n     * set value by Tom Wu's BigInteger object\n     * @name setByBigInteger\n     * @memberOf KJUR.asn1.DERInteger#\n     * @function\n     * @param {BigInteger} bigIntegerValue to set\n     */\n    this.setByBigInteger = function(bigIntegerValue) {\n        this.hTLV = null;\n        this.isModified = true;\n        this.hV = KJUR.asn1.ASN1Util.bigIntToMinTwosComplementsHex(bigIntegerValue);\n    };\n\n    /**\n     * set value by integer value\n     * @name setByInteger\n     * @memberOf KJUR.asn1.DERInteger\n     * @function\n     * @param {Integer} integer value to set\n     */\n    this.setByInteger = function(intValue) {\n        var bi = new BigInteger(String(intValue), 10);\n        this.setByBigInteger(bi);\n    };\n\n    /**\n     * set value by integer value\n     * @name setValueHex\n     * @memberOf KJUR.asn1.DERInteger#\n     * @function\n     * @param {String} hexadecimal string of integer value\n     * @description\n     * <br/>\n     * NOTE: Value shall be represented by minimum octet length of\n     * two's complement representation.\n     * @example\n     * new KJUR.asn1.DERInteger(123);\n     * new KJUR.asn1.DERInteger({'int': 123});\n     * new KJUR.asn1.DERInteger({'hex': '1fad'});\n     */\n    this.setValueHex = function(newHexString) {\n        this.hV = newHexString;\n    };\n\n    this.getFreshValueHex = function() {\n        return this.hV;\n    };\n\n    if (typeof params != \"undefined\") {\n        if (typeof params['bigint'] != \"undefined\") {\n            this.setByBigInteger(params['bigint']);\n        } else if (typeof params['int'] != \"undefined\") {\n            this.setByInteger(params['int']);\n        } else if (typeof params == \"number\") {\n            this.setByInteger(params);\n        } else if (typeof params['hex'] != \"undefined\") {\n            this.setValueHex(params['hex']);\n        }\n    }\n};\nYAHOO.lang.extend(KJUR.asn1.DERInteger, KJUR.asn1.ASN1Object);\n\n// ********************************************************************\n/**\n * class for ASN.1 DER encoded BitString primitive\n * @name KJUR.asn1.DERBitString\n * @class class for ASN.1 DER encoded BitString primitive\n * @extends KJUR.asn1.ASN1Object\n * @description\n * <br/>\n * As for argument 'params' for constructor, you can specify one of\n * following properties:\n * <ul>\n * <li>bin - specify binary string (ex. '10111')</li>\n * <li>array - specify array of boolean (ex. [true,false,true,true])</li>\n * <li>hex - specify hexadecimal string of ASN.1 value(V) including unused bits</li>\n * <li>obj - specify {@link KJUR.asn1.ASN1Util.newObject}\n * argument for \"BitString encapsulates\" structure.</li>\n * </ul>\n * NOTE1: 'params' can be omitted.<br/>\n * NOTE2: 'obj' parameter have been supported since\n * asn1 1.0.11, jsrsasign 6.1.1 (2016-Sep-25).<br/>\n * @example\n * // default constructor\n * o = new KJUR.asn1.DERBitString();\n * // initialize with binary string\n * o = new KJUR.asn1.DERBitString({bin: \"1011\"});\n * // initialize with boolean array\n * o = new KJUR.asn1.DERBitString({array: [true,false,true,true]});\n * // initialize with hexadecimal string (04 is unused bits)\n * o = new KJUR.asn1.DEROctetString({hex: \"04bac0\"});\n * // initialize with ASN1Util.newObject argument for encapsulated\n * o = new KJUR.asn1.DERBitString({obj: {seq: [{int: 3}, {prnstr: 'aaa'}]}});\n * // above generates a ASN.1 data like this:\n * // BIT STRING, encapsulates {\n * //   SEQUENCE {\n * //     INTEGER 3\n * //     PrintableString 'aaa'\n * //     }\n * //   }\n */\nKJUR.asn1.DERBitString = function(params) {\n    if (params !== undefined && typeof params.obj !== \"undefined\") {\n        var o = KJUR.asn1.ASN1Util.newObject(params.obj);\n        params.hex = \"00\" + o.getEncodedHex();\n    }\n    KJUR.asn1.DERBitString.superclass.constructor.call(this);\n    this.hT = \"03\";\n\n    /**\n     * set ASN.1 value(V) by a hexadecimal string including unused bits\n     * @name setHexValueIncludingUnusedBits\n     * @memberOf KJUR.asn1.DERBitString#\n     * @function\n     * @param {String} newHexStringIncludingUnusedBits\n     */\n    this.setHexValueIncludingUnusedBits = function(newHexStringIncludingUnusedBits) {\n        this.hTLV = null;\n        this.isModified = true;\n        this.hV = newHexStringIncludingUnusedBits;\n    };\n\n    /**\n     * set ASN.1 value(V) by unused bit and hexadecimal string of value\n     * @name setUnusedBitsAndHexValue\n     * @memberOf KJUR.asn1.DERBitString#\n     * @function\n     * @param {Integer} unusedBits\n     * @param {String} hValue\n     */\n    this.setUnusedBitsAndHexValue = function(unusedBits, hValue) {\n        if (unusedBits < 0 || 7 < unusedBits) {\n            throw \"unused bits shall be from 0 to 7: u = \" + unusedBits;\n        }\n        var hUnusedBits = \"0\" + unusedBits;\n        this.hTLV = null;\n        this.isModified = true;\n        this.hV = hUnusedBits + hValue;\n    };\n\n    /**\n     * set ASN.1 DER BitString by binary string<br/>\n     * @name setByBinaryString\n     * @memberOf KJUR.asn1.DERBitString#\n     * @function\n     * @param {String} binaryString binary value string (i.e. '10111')\n     * @description\n     * Its unused bits will be calculated automatically by length of\n     * 'binaryValue'. <br/>\n     * NOTE: Trailing zeros '0' will be ignored.\n     * @example\n     * o = new KJUR.asn1.DERBitString();\n     * o.setByBooleanArray(\"01011\");\n     */\n    this.setByBinaryString = function(binaryString) {\n        binaryString = binaryString.replace(/0+$/, '');\n        var unusedBits = 8 - binaryString.length % 8;\n        if (unusedBits == 8) unusedBits = 0;\n        for (var i = 0; i <= unusedBits; i++) {\n            binaryString += '0';\n        }\n        var h = '';\n        for (var i = 0; i < binaryString.length - 1; i += 8) {\n            var b = binaryString.substr(i, 8);\n            var x = parseInt(b, 2).toString(16);\n            if (x.length == 1) x = '0' + x;\n            h += x;\n        }\n        this.hTLV = null;\n        this.isModified = true;\n        this.hV = '0' + unusedBits + h;\n    };\n\n    /**\n     * set ASN.1 TLV value(V) by an array of boolean<br/>\n     * @name setByBooleanArray\n     * @memberOf KJUR.asn1.DERBitString#\n     * @function\n     * @param {array} booleanArray array of boolean (ex. [true, false, true])\n     * @description\n     * NOTE: Trailing falses will be ignored in the ASN.1 DER Object.\n     * @example\n     * o = new KJUR.asn1.DERBitString();\n     * o.setByBooleanArray([false, true, false, true, true]);\n     */\n    this.setByBooleanArray = function(booleanArray) {\n        var s = '';\n        for (var i = 0; i < booleanArray.length; i++) {\n            if (booleanArray[i] == true) {\n                s += '1';\n            } else {\n                s += '0';\n            }\n        }\n        this.setByBinaryString(s);\n    };\n\n    /**\n     * generate an array of falses with specified length<br/>\n     * @name newFalseArray\n     * @memberOf KJUR.asn1.DERBitString\n     * @function\n     * @param {Integer} nLength length of array to generate\n     * @return {array} array of boolean falses\n     * @description\n     * This static method may be useful to initialize boolean array.\n     * @example\n     * o = new KJUR.asn1.DERBitString();\n     * o.newFalseArray(3) &rarr; [false, false, false]\n     */\n    this.newFalseArray = function(nLength) {\n        var a = new Array(nLength);\n        for (var i = 0; i < nLength; i++) {\n            a[i] = false;\n        }\n        return a;\n    };\n\n    this.getFreshValueHex = function() {\n        return this.hV;\n    };\n\n    if (typeof params != \"undefined\") {\n        if (typeof params == \"string\" && params.toLowerCase().match(/^[0-9a-f]+$/)) {\n            this.setHexValueIncludingUnusedBits(params);\n        } else if (typeof params['hex'] != \"undefined\") {\n            this.setHexValueIncludingUnusedBits(params['hex']);\n        } else if (typeof params['bin'] != \"undefined\") {\n            this.setByBinaryString(params['bin']);\n        } else if (typeof params['array'] != \"undefined\") {\n            this.setByBooleanArray(params['array']);\n        }\n    }\n};\nYAHOO.lang.extend(KJUR.asn1.DERBitString, KJUR.asn1.ASN1Object);\n\n// ********************************************************************\n/**\n * class for ASN.1 DER OctetString<br/>\n * @name KJUR.asn1.DEROctetString\n * @class class for ASN.1 DER OctetString\n * @param {Array} params associative array of parameters (ex. {'str': 'aaa'})\n * @extends KJUR.asn1.DERAbstractString\n * @description\n * This class provides ASN.1 OctetString simple type.<br/>\n * Supported \"params\" attributes are:\n * <ul>\n * <li>str - to set a string as a value</li>\n * <li>hex - to set a hexadecimal string as a value</li>\n * <li>obj - to set a encapsulated ASN.1 value by JSON object\n * which is defined in {@link KJUR.asn1.ASN1Util.newObject}</li>\n * </ul>\n * NOTE: A parameter 'obj' have been supported\n * for \"OCTET STRING, encapsulates\" structure.\n * since asn1 1.0.11, jsrsasign 6.1.1 (2016-Sep-25).\n * @see KJUR.asn1.DERAbstractString - superclass\n * @example\n * // default constructor\n * o = new KJUR.asn1.DEROctetString();\n * // initialize with string\n * o = new KJUR.asn1.DEROctetString({str: \"aaa\"});\n * // initialize with hexadecimal string\n * o = new KJUR.asn1.DEROctetString({hex: \"616161\"});\n * // initialize with ASN1Util.newObject argument\n * o = new KJUR.asn1.DEROctetString({obj: {seq: [{int: 3}, {prnstr: 'aaa'}]}});\n * // above generates a ASN.1 data like this:\n * // OCTET STRING, encapsulates {\n * //   SEQUENCE {\n * //     INTEGER 3\n * //     PrintableString 'aaa'\n * //     }\n * //   }\n */\nKJUR.asn1.DEROctetString = function(params) {\n    if (params !== undefined && typeof params.obj !== \"undefined\") {\n        var o = KJUR.asn1.ASN1Util.newObject(params.obj);\n        params.hex = o.getEncodedHex();\n    }\n    KJUR.asn1.DEROctetString.superclass.constructor.call(this, params);\n    this.hT = \"04\";\n};\nYAHOO.lang.extend(KJUR.asn1.DEROctetString, KJUR.asn1.DERAbstractString);\n\n// ********************************************************************\n/**\n * class for ASN.1 DER Null\n * @name KJUR.asn1.DERNull\n * @class class for ASN.1 DER Null\n * @extends KJUR.asn1.ASN1Object\n * @description\n * @see KJUR.asn1.ASN1Object - superclass\n */\nKJUR.asn1.DERNull = function() {\n    KJUR.asn1.DERNull.superclass.constructor.call(this);\n    this.hT = \"05\";\n    this.hTLV = \"0500\";\n};\nYAHOO.lang.extend(KJUR.asn1.DERNull, KJUR.asn1.ASN1Object);\n\n// ********************************************************************\n/**\n * class for ASN.1 DER ObjectIdentifier\n * @name KJUR.asn1.DERObjectIdentifier\n * @class class for ASN.1 DER ObjectIdentifier\n * @param {Array} params associative array of parameters (ex. {'oid': '2.5.4.5'})\n * @extends KJUR.asn1.ASN1Object\n * @description\n * <br/>\n * As for argument 'params' for constructor, you can specify one of\n * following properties:\n * <ul>\n * <li>oid - specify initial ASN.1 value(V) by a oid string (ex. 2.5.4.13)</li>\n * <li>hex - specify initial ASN.1 value(V) by a hexadecimal string</li>\n * </ul>\n * NOTE: 'params' can be omitted.\n */\nKJUR.asn1.DERObjectIdentifier = function(params) {\n    var itox = function(i) {\n        var h = i.toString(16);\n        if (h.length == 1) h = '0' + h;\n        return h;\n    };\n    var roidtox = function(roid) {\n        var h = '';\n        var bi = new BigInteger(roid, 10);\n        var b = bi.toString(2);\n        var padLen = 7 - b.length % 7;\n        if (padLen == 7) padLen = 0;\n        var bPad = '';\n        for (var i = 0; i < padLen; i++) bPad += '0';\n        b = bPad + b;\n        for (var i = 0; i < b.length - 1; i += 7) {\n            var b8 = b.substr(i, 7);\n            if (i != b.length - 7) b8 = '1' + b8;\n            h += itox(parseInt(b8, 2));\n        }\n        return h;\n    };\n\n    KJUR.asn1.DERObjectIdentifier.superclass.constructor.call(this);\n    this.hT = \"06\";\n\n    /**\n     * set value by a hexadecimal string\n     * @name setValueHex\n     * @memberOf KJUR.asn1.DERObjectIdentifier#\n     * @function\n     * @param {String} newHexString hexadecimal value of OID bytes\n     */\n    this.setValueHex = function(newHexString) {\n        this.hTLV = null;\n        this.isModified = true;\n        this.s = null;\n        this.hV = newHexString;\n    };\n\n    /**\n     * set value by a OID string<br/>\n     * @name setValueOidString\n     * @memberOf KJUR.asn1.DERObjectIdentifier#\n     * @function\n     * @param {String} oidString OID string (ex. 2.5.4.13)\n     * @example\n     * o = new KJUR.asn1.DERObjectIdentifier();\n     * o.setValueOidString(\"2.5.4.13\");\n     */\n    this.setValueOidString = function(oidString) {\n        if (! oidString.match(/^[0-9.]+$/)) {\n            throw \"malformed oid string: \" + oidString;\n        }\n        var h = '';\n        var a = oidString.split('.');\n        var i0 = parseInt(a[0]) * 40 + parseInt(a[1]);\n        h += itox(i0);\n        a.splice(0, 2);\n        for (var i = 0; i < a.length; i++) {\n            h += roidtox(a[i]);\n        }\n        this.hTLV = null;\n        this.isModified = true;\n        this.s = null;\n        this.hV = h;\n    };\n\n    /**\n     * set value by a OID name\n     * @name setValueName\n     * @memberOf KJUR.asn1.DERObjectIdentifier#\n     * @function\n     * @param {String} oidName OID name (ex. 'serverAuth')\n     * @since 1.0.1\n     * @description\n     * OID name shall be defined in 'KJUR.asn1.x509.OID.name2oidList'.\n     * Otherwise raise error.\n     * @example\n     * o = new KJUR.asn1.DERObjectIdentifier();\n     * o.setValueName(\"serverAuth\");\n     */\n    this.setValueName = function(oidName) {\n        var oid = KJUR.asn1.x509.OID.name2oid(oidName);\n        if (oid !== '') {\n            this.setValueOidString(oid);\n        } else {\n            throw \"DERObjectIdentifier oidName undefined: \" + oidName;\n        }\n    };\n\n    this.getFreshValueHex = function() {\n        return this.hV;\n    };\n\n    if (params !== undefined) {\n        if (typeof params === \"string\") {\n            if (params.match(/^[0-2].[0-9.]+$/)) {\n                this.setValueOidString(params);\n            } else {\n                this.setValueName(params);\n            }\n        } else if (params.oid !== undefined) {\n            this.setValueOidString(params.oid);\n        } else if (params.hex !== undefined) {\n            this.setValueHex(params.hex);\n        } else if (params.name !== undefined) {\n            this.setValueName(params.name);\n        }\n    }\n};\nYAHOO.lang.extend(KJUR.asn1.DERObjectIdentifier, KJUR.asn1.ASN1Object);\n\n// ********************************************************************\n/**\n * class for ASN.1 DER Enumerated\n * @name KJUR.asn1.DEREnumerated\n * @class class for ASN.1 DER Enumerated\n * @extends KJUR.asn1.ASN1Object\n * @description\n * <br/>\n * As for argument 'params' for constructor, you can specify one of\n * following properties:\n * <ul>\n * <li>int - specify initial ASN.1 value(V) by integer value</li>\n * <li>hex - specify initial ASN.1 value(V) by a hexadecimal string</li>\n * </ul>\n * NOTE: 'params' can be omitted.\n * @example\n * new KJUR.asn1.DEREnumerated(123);\n * new KJUR.asn1.DEREnumerated({int: 123});\n * new KJUR.asn1.DEREnumerated({hex: '1fad'});\n */\nKJUR.asn1.DEREnumerated = function(params) {\n    KJUR.asn1.DEREnumerated.superclass.constructor.call(this);\n    this.hT = \"0a\";\n\n    /**\n     * set value by Tom Wu's BigInteger object\n     * @name setByBigInteger\n     * @memberOf KJUR.asn1.DEREnumerated#\n     * @function\n     * @param {BigInteger} bigIntegerValue to set\n     */\n    this.setByBigInteger = function(bigIntegerValue) {\n        this.hTLV = null;\n        this.isModified = true;\n        this.hV = KJUR.asn1.ASN1Util.bigIntToMinTwosComplementsHex(bigIntegerValue);\n    };\n\n    /**\n     * set value by integer value\n     * @name setByInteger\n     * @memberOf KJUR.asn1.DEREnumerated#\n     * @function\n     * @param {Integer} integer value to set\n     */\n    this.setByInteger = function(intValue) {\n        var bi = new BigInteger(String(intValue), 10);\n        this.setByBigInteger(bi);\n    };\n\n    /**\n     * set value by integer value\n     * @name setValueHex\n     * @memberOf KJUR.asn1.DEREnumerated#\n     * @function\n     * @param {String} hexadecimal string of integer value\n     * @description\n     * <br/>\n     * NOTE: Value shall be represented by minimum octet length of\n     * two's complement representation.\n     */\n    this.setValueHex = function(newHexString) {\n        this.hV = newHexString;\n    };\n\n    this.getFreshValueHex = function() {\n        return this.hV;\n    };\n\n    if (typeof params != \"undefined\") {\n        if (typeof params['int'] != \"undefined\") {\n            this.setByInteger(params['int']);\n        } else if (typeof params == \"number\") {\n            this.setByInteger(params);\n        } else if (typeof params['hex'] != \"undefined\") {\n            this.setValueHex(params['hex']);\n        }\n    }\n};\nYAHOO.lang.extend(KJUR.asn1.DEREnumerated, KJUR.asn1.ASN1Object);\n\n// ********************************************************************\n/**\n * class for ASN.1 DER UTF8String\n * @name KJUR.asn1.DERUTF8String\n * @class class for ASN.1 DER UTF8String\n * @param {Array} params associative array of parameters (ex. {'str': 'aaa'})\n * @extends KJUR.asn1.DERAbstractString\n * @description\n * @see KJUR.asn1.DERAbstractString - superclass\n */\nKJUR.asn1.DERUTF8String = function(params) {\n    KJUR.asn1.DERUTF8String.superclass.constructor.call(this, params);\n    this.hT = \"0c\";\n};\nYAHOO.lang.extend(KJUR.asn1.DERUTF8String, KJUR.asn1.DERAbstractString);\n\n// ********************************************************************\n/**\n * class for ASN.1 DER NumericString\n * @name KJUR.asn1.DERNumericString\n * @class class for ASN.1 DER NumericString\n * @param {Array} params associative array of parameters (ex. {'str': 'aaa'})\n * @extends KJUR.asn1.DERAbstractString\n * @description\n * @see KJUR.asn1.DERAbstractString - superclass\n */\nKJUR.asn1.DERNumericString = function(params) {\n    KJUR.asn1.DERNumericString.superclass.constructor.call(this, params);\n    this.hT = \"12\";\n};\nYAHOO.lang.extend(KJUR.asn1.DERNumericString, KJUR.asn1.DERAbstractString);\n\n// ********************************************************************\n/**\n * class for ASN.1 DER PrintableString\n * @name KJUR.asn1.DERPrintableString\n * @class class for ASN.1 DER PrintableString\n * @param {Array} params associative array of parameters (ex. {'str': 'aaa'})\n * @extends KJUR.asn1.DERAbstractString\n * @description\n * @see KJUR.asn1.DERAbstractString - superclass\n */\nKJUR.asn1.DERPrintableString = function(params) {\n    KJUR.asn1.DERPrintableString.superclass.constructor.call(this, params);\n    this.hT = \"13\";\n};\nYAHOO.lang.extend(KJUR.asn1.DERPrintableString, KJUR.asn1.DERAbstractString);\n\n// ********************************************************************\n/**\n * class for ASN.1 DER TeletexString\n * @name KJUR.asn1.DERTeletexString\n * @class class for ASN.1 DER TeletexString\n * @param {Array} params associative array of parameters (ex. {'str': 'aaa'})\n * @extends KJUR.asn1.DERAbstractString\n * @description\n * @see KJUR.asn1.DERAbstractString - superclass\n */\nKJUR.asn1.DERTeletexString = function(params) {\n    KJUR.asn1.DERTeletexString.superclass.constructor.call(this, params);\n    this.hT = \"14\";\n};\nYAHOO.lang.extend(KJUR.asn1.DERTeletexString, KJUR.asn1.DERAbstractString);\n\n// ********************************************************************\n/**\n * class for ASN.1 DER IA5String\n * @name KJUR.asn1.DERIA5String\n * @class class for ASN.1 DER IA5String\n * @param {Array} params associative array of parameters (ex. {'str': 'aaa'})\n * @extends KJUR.asn1.DERAbstractString\n * @description\n * @see KJUR.asn1.DERAbstractString - superclass\n */\nKJUR.asn1.DERIA5String = function(params) {\n    KJUR.asn1.DERIA5String.superclass.constructor.call(this, params);\n    this.hT = \"16\";\n};\nYAHOO.lang.extend(KJUR.asn1.DERIA5String, KJUR.asn1.DERAbstractString);\n\n// ********************************************************************\n/**\n * class for ASN.1 DER UTCTime\n * @name KJUR.asn1.DERUTCTime\n * @class class for ASN.1 DER UTCTime\n * @param {Array} params associative array of parameters (ex. {'str': '130430235959Z'})\n * @extends KJUR.asn1.DERAbstractTime\n * @description\n * <br/>\n * As for argument 'params' for constructor, you can specify one of\n * following properties:\n * <ul>\n * <li>str - specify initial ASN.1 value(V) by a string (ex.'130430235959Z')</li>\n * <li>hex - specify initial ASN.1 value(V) by a hexadecimal string</li>\n * <li>date - specify Date object.</li>\n * </ul>\n * NOTE: 'params' can be omitted.\n * <h4>EXAMPLES</h4>\n * @example\n * d1 = new KJUR.asn1.DERUTCTime();\n * d1.setString('130430125959Z');\n *\n * d2 = new KJUR.asn1.DERUTCTime({'str': '130430125959Z'});\n * d3 = new KJUR.asn1.DERUTCTime({'date': new Date(Date.UTC(2015, 0, 31, 0, 0, 0, 0))});\n * d4 = new KJUR.asn1.DERUTCTime('130430125959Z');\n */\nKJUR.asn1.DERUTCTime = function(params) {\n    KJUR.asn1.DERUTCTime.superclass.constructor.call(this, params);\n    this.hT = \"17\";\n\n    /**\n     * set value by a Date object<br/>\n     * @name setByDate\n     * @memberOf KJUR.asn1.DERUTCTime#\n     * @function\n     * @param {Date} dateObject Date object to set ASN.1 value(V)\n     * @example\n     * o = new KJUR.asn1.DERUTCTime();\n     * o.setByDate(new Date(\"2016/12/31\"));\n     */\n    this.setByDate = function(dateObject) {\n        this.hTLV = null;\n        this.isModified = true;\n        this.date = dateObject;\n        this.s = this.formatDate(this.date, 'utc');\n        this.hV = stohex(this.s);\n    };\n\n    this.getFreshValueHex = function() {\n        if (typeof this.date == \"undefined\" && typeof this.s == \"undefined\") {\n            this.date = new Date();\n            this.s = this.formatDate(this.date, 'utc');\n            this.hV = stohex(this.s);\n        }\n        return this.hV;\n    };\n\n    if (params !== undefined) {\n        if (params.str !== undefined) {\n            this.setString(params.str);\n        } else if (typeof params == \"string\" && params.match(/^[0-9]{12}Z$/)) {\n            this.setString(params);\n        } else if (params.hex !== undefined) {\n            this.setStringHex(params.hex);\n        } else if (params.date !== undefined) {\n            this.setByDate(params.date);\n        }\n    }\n};\nYAHOO.lang.extend(KJUR.asn1.DERUTCTime, KJUR.asn1.DERAbstractTime);\n\n// ********************************************************************\n/**\n * class for ASN.1 DER GeneralizedTime\n * @name KJUR.asn1.DERGeneralizedTime\n * @class class for ASN.1 DER GeneralizedTime\n * @param {Array} params associative array of parameters (ex. {'str': '20130430235959Z'})\n * @property {Boolean} withMillis flag to show milliseconds or not\n * @extends KJUR.asn1.DERAbstractTime\n * @description\n * <br/>\n * As for argument 'params' for constructor, you can specify one of\n * following properties:\n * <ul>\n * <li>str - specify initial ASN.1 value(V) by a string (ex.'20130430235959Z')</li>\n * <li>hex - specify initial ASN.1 value(V) by a hexadecimal string</li>\n * <li>date - specify Date object.</li>\n * <li>millis - specify flag to show milliseconds (from 1.0.6)</li>\n * </ul>\n * NOTE1: 'params' can be omitted.\n * NOTE2: 'withMillis' property is supported from asn1 1.0.6.\n */\nKJUR.asn1.DERGeneralizedTime = function(params) {\n    KJUR.asn1.DERGeneralizedTime.superclass.constructor.call(this, params);\n    this.hT = \"18\";\n    this.withMillis = false;\n\n    /**\n     * set value by a Date object\n     * @name setByDate\n     * @memberOf KJUR.asn1.DERGeneralizedTime#\n     * @function\n     * @param {Date} dateObject Date object to set ASN.1 value(V)\n     * @example\n     * When you specify UTC time, use 'Date.UTC' method like this:<br/>\n     * o1 = new DERUTCTime();\n     * o1.setByDate(date);\n     *\n     * date = new Date(Date.UTC(2015, 0, 31, 23, 59, 59, 0)); #2015JAN31 23:59:59\n     */\n    this.setByDate = function(dateObject) {\n        this.hTLV = null;\n        this.isModified = true;\n        this.date = dateObject;\n        this.s = this.formatDate(this.date, 'gen', this.withMillis);\n        this.hV = stohex(this.s);\n    };\n\n    this.getFreshValueHex = function() {\n        if (this.date === undefined && this.s === undefined) {\n            this.date = new Date();\n            this.s = this.formatDate(this.date, 'gen', this.withMillis);\n            this.hV = stohex(this.s);\n        }\n        return this.hV;\n    };\n\n    if (params !== undefined) {\n        if (params.str !== undefined) {\n            this.setString(params.str);\n        } else if (typeof params == \"string\" && params.match(/^[0-9]{14}Z$/)) {\n            this.setString(params);\n        } else if (params.hex !== undefined) {\n            this.setStringHex(params.hex);\n        } else if (params.date !== undefined) {\n            this.setByDate(params.date);\n        }\n        if (params.millis === true) {\n            this.withMillis = true;\n        }\n    }\n};\nYAHOO.lang.extend(KJUR.asn1.DERGeneralizedTime, KJUR.asn1.DERAbstractTime);\n\n// ********************************************************************\n/**\n * class for ASN.1 DER Sequence\n * @name KJUR.asn1.DERSequence\n * @class class for ASN.1 DER Sequence\n * @extends KJUR.asn1.DERAbstractStructured\n * @description\n * <br/>\n * As for argument 'params' for constructor, you can specify one of\n * following properties:\n * <ul>\n * <li>array - specify array of ASN1Object to set elements of content</li>\n * </ul>\n * NOTE: 'params' can be omitted.\n */\nKJUR.asn1.DERSequence = function(params) {\n    KJUR.asn1.DERSequence.superclass.constructor.call(this, params);\n    this.hT = \"30\";\n    this.getFreshValueHex = function() {\n        var h = '';\n        for (var i = 0; i < this.asn1Array.length; i++) {\n            var asn1Obj = this.asn1Array[i];\n            h += asn1Obj.getEncodedHex();\n        }\n        this.hV = h;\n        return this.hV;\n    };\n};\nYAHOO.lang.extend(KJUR.asn1.DERSequence, KJUR.asn1.DERAbstractStructured);\n\n// ********************************************************************\n/**\n * class for ASN.1 DER Set\n * @name KJUR.asn1.DERSet\n * @class class for ASN.1 DER Set\n * @extends KJUR.asn1.DERAbstractStructured\n * @description\n * <br/>\n * As for argument 'params' for constructor, you can specify one of\n * following properties:\n * <ul>\n * <li>array - specify array of ASN1Object to set elements of content</li>\n * <li>sortflag - flag for sort (default: true). ASN.1 BER is not sorted in 'SET OF'.</li>\n * </ul>\n * NOTE1: 'params' can be omitted.<br/>\n * NOTE2: sortflag is supported since 1.0.5.\n */\nKJUR.asn1.DERSet = function(params) {\n    KJUR.asn1.DERSet.superclass.constructor.call(this, params);\n    this.hT = \"31\";\n    this.sortFlag = true; // item shall be sorted only in ASN.1 DER\n    this.getFreshValueHex = function() {\n        var a = new Array();\n        for (var i = 0; i < this.asn1Array.length; i++) {\n            var asn1Obj = this.asn1Array[i];\n            a.push(asn1Obj.getEncodedHex());\n        }\n        if (this.sortFlag == true) a.sort();\n        this.hV = a.join('');\n        return this.hV;\n    };\n\n    if (typeof params != \"undefined\") {\n        if (typeof params.sortflag != \"undefined\" &&\n            params.sortflag == false)\n            this.sortFlag = false;\n    }\n};\nYAHOO.lang.extend(KJUR.asn1.DERSet, KJUR.asn1.DERAbstractStructured);\n\n// ********************************************************************\n/**\n * class for ASN.1 DER TaggedObject\n * @name KJUR.asn1.DERTaggedObject\n * @class class for ASN.1 DER TaggedObject\n * @extends KJUR.asn1.ASN1Object\n * @description\n * <br/>\n * Parameter 'tagNoNex' is ASN.1 tag(T) value for this object.\n * For example, if you find '[1]' tag in a ASN.1 dump,\n * 'tagNoHex' will be 'a1'.\n * <br/>\n * As for optional argument 'params' for constructor, you can specify *ANY* of\n * following properties:\n * <ul>\n * <li>explicit - specify true if this is explicit tag otherwise false\n *     (default is 'true').</li>\n * <li>tag - specify tag (default is 'a0' which means [0])</li>\n * <li>obj - specify ASN1Object which is tagged</li>\n * </ul>\n * @example\n * d1 = new KJUR.asn1.DERUTF8String({'str':'a'});\n * d2 = new KJUR.asn1.DERTaggedObject({'obj': d1});\n * hex = d2.getEncodedHex();\n */\nKJUR.asn1.DERTaggedObject = function(params) {\n    KJUR.asn1.DERTaggedObject.superclass.constructor.call(this);\n    this.hT = \"a0\";\n    this.hV = '';\n    this.isExplicit = true;\n    this.asn1Object = null;\n\n    /**\n     * set value by an ASN1Object\n     * @name setString\n     * @memberOf KJUR.asn1.DERTaggedObject#\n     * @function\n     * @param {Boolean} isExplicitFlag flag for explicit/implicit tag\n     * @param {Integer} tagNoHex hexadecimal string of ASN.1 tag\n     * @param {ASN1Object} asn1Object ASN.1 to encapsulate\n     */\n    this.setASN1Object = function(isExplicitFlag, tagNoHex, asn1Object) {\n        this.hT = tagNoHex;\n        this.isExplicit = isExplicitFlag;\n        this.asn1Object = asn1Object;\n        if (this.isExplicit) {\n            this.hV = this.asn1Object.getEncodedHex();\n            this.hTLV = null;\n            this.isModified = true;\n        } else {\n            this.hV = null;\n            this.hTLV = asn1Object.getEncodedHex();\n            this.hTLV = this.hTLV.replace(/^../, tagNoHex);\n            this.isModified = false;\n        }\n    };\n\n    this.getFreshValueHex = function() {\n        return this.hV;\n    };\n\n    if (typeof params != \"undefined\") {\n        if (typeof params['tag'] != \"undefined\") {\n            this.hT = params['tag'];\n        }\n        if (typeof params['explicit'] != \"undefined\") {\n            this.isExplicit = params['explicit'];\n        }\n        if (typeof params['obj'] != \"undefined\") {\n            this.asn1Object = params['obj'];\n            this.setASN1Object(this.isExplicit, this.hT, this.asn1Object);\n        }\n    }\n};\nYAHOO.lang.extend(KJUR.asn1.DERTaggedObject, KJUR.asn1.ASN1Object);\n\n/**\n * Create a new JSEncryptRSAKey that extends Tom Wu's RSA key object.\n * This object is just a decorator for parsing the key parameter\n * @param {string|Object} key - The key in string format, or an object containing\n * the parameters needed to build a RSAKey object.\n * @constructor\n */\nvar JSEncryptRSAKey = /** @class */ (function (_super) {\n    __extends(JSEncryptRSAKey, _super);\n    function JSEncryptRSAKey(key) {\n        var _this = _super.call(this) || this;\n        // Call the super constructor.\n        //  RSAKey.call(this);\n        // If a key key was provided.\n        if (key) {\n            // If this is a string...\n            if (typeof key === \"string\") {\n                _this.parseKey(key);\n            }\n            else if (JSEncryptRSAKey.hasPrivateKeyProperty(key) ||\n                JSEncryptRSAKey.hasPublicKeyProperty(key)) {\n                // Set the values for the key.\n                _this.parsePropertiesFrom(key);\n            }\n        }\n        return _this;\n    }\n    /**\n     * Method to parse a pem encoded string containing both a public or private key.\n     * The method will translate the pem encoded string in a der encoded string and\n     * will parse private key and public key parameters. This method accepts public key\n     * in the rsaencryption pkcs #1 format (oid: 1.2.840.113549.1.1.1).\n     *\n     * @todo Check how many rsa formats use the same format of pkcs #1.\n     *\n     * The format is defined as:\n     * PublicKeyInfo ::= SEQUENCE {\n     *   algorithm       AlgorithmIdentifier,\n     *   PublicKey       BIT STRING\n     * }\n     * Where AlgorithmIdentifier is:\n     * AlgorithmIdentifier ::= SEQUENCE {\n     *   algorithm       OBJECT IDENTIFIER,     the OID of the enc algorithm\n     *   parameters      ANY DEFINED BY algorithm OPTIONAL (NULL for PKCS #1)\n     * }\n     * and PublicKey is a SEQUENCE encapsulated in a BIT STRING\n     * RSAPublicKey ::= SEQUENCE {\n     *   modulus           INTEGER,  -- n\n     *   publicExponent    INTEGER   -- e\n     * }\n     * it's possible to examine the structure of the keys obtained from openssl using\n     * an asn.1 dumper as the one used here to parse the components: http://lapo.it/asn1js/\n     * @argument {string} pem the pem encoded string, can include the BEGIN/END header/footer\n     * @private\n     */\n    JSEncryptRSAKey.prototype.parseKey = function (pem) {\n        try {\n            var modulus = 0;\n            var public_exponent = 0;\n            var reHex = /^\\s*(?:[0-9A-Fa-f][0-9A-Fa-f]\\s*)+$/;\n            var der = reHex.test(pem) ? Hex.decode(pem) : Base64.unarmor(pem);\n            var asn1 = ASN1.decode(der);\n            // Fixes a bug with OpenSSL 1.0+ private keys\n            if (asn1.sub.length === 3) {\n                asn1 = asn1.sub[2].sub[0];\n            }\n            if (asn1.sub.length === 9) {\n                // Parse the private key.\n                modulus = asn1.sub[1].getHexStringValue(); // bigint\n                this.n = parseBigInt(modulus, 16);\n                public_exponent = asn1.sub[2].getHexStringValue(); // int\n                this.e = parseInt(public_exponent, 16);\n                var private_exponent = asn1.sub[3].getHexStringValue(); // bigint\n                this.d = parseBigInt(private_exponent, 16);\n                var prime1 = asn1.sub[4].getHexStringValue(); // bigint\n                this.p = parseBigInt(prime1, 16);\n                var prime2 = asn1.sub[5].getHexStringValue(); // bigint\n                this.q = parseBigInt(prime2, 16);\n                var exponent1 = asn1.sub[6].getHexStringValue(); // bigint\n                this.dmp1 = parseBigInt(exponent1, 16);\n                var exponent2 = asn1.sub[7].getHexStringValue(); // bigint\n                this.dmq1 = parseBigInt(exponent2, 16);\n                var coefficient = asn1.sub[8].getHexStringValue(); // bigint\n                this.coeff = parseBigInt(coefficient, 16);\n            }\n            else if (asn1.sub.length === 2) {\n                // Parse the public key.\n                var bit_string = asn1.sub[1];\n                var sequence = bit_string.sub[0];\n                modulus = sequence.sub[0].getHexStringValue();\n                this.n = parseBigInt(modulus, 16);\n                public_exponent = sequence.sub[1].getHexStringValue();\n                this.e = parseInt(public_exponent, 16);\n            }\n            else {\n                return false;\n            }\n            return true;\n        }\n        catch (ex) {\n            return false;\n        }\n    };\n    /**\n     * Translate rsa parameters in a hex encoded string representing the rsa key.\n     *\n     * The translation follow the ASN.1 notation :\n     * RSAPrivateKey ::= SEQUENCE {\n     *   version           Version,\n     *   modulus           INTEGER,  -- n\n     *   publicExponent    INTEGER,  -- e\n     *   privateExponent   INTEGER,  -- d\n     *   prime1            INTEGER,  -- p\n     *   prime2            INTEGER,  -- q\n     *   exponent1         INTEGER,  -- d mod (p1)\n     *   exponent2         INTEGER,  -- d mod (q-1)\n     *   coefficient       INTEGER,  -- (inverse of q) mod p\n     * }\n     * @returns {string}  DER Encoded String representing the rsa private key\n     * @private\n     */\n    JSEncryptRSAKey.prototype.getPrivateBaseKey = function () {\n        var options = {\n            array: [\n                new KJUR.asn1.DERInteger({ int: 0 }),\n                new KJUR.asn1.DERInteger({ bigint: this.n }),\n                new KJUR.asn1.DERInteger({ int: this.e }),\n                new KJUR.asn1.DERInteger({ bigint: this.d }),\n                new KJUR.asn1.DERInteger({ bigint: this.p }),\n                new KJUR.asn1.DERInteger({ bigint: this.q }),\n                new KJUR.asn1.DERInteger({ bigint: this.dmp1 }),\n                new KJUR.asn1.DERInteger({ bigint: this.dmq1 }),\n                new KJUR.asn1.DERInteger({ bigint: this.coeff })\n            ]\n        };\n        var seq = new KJUR.asn1.DERSequence(options);\n        return seq.getEncodedHex();\n    };\n    /**\n     * base64 (pem) encoded version of the DER encoded representation\n     * @returns {string} pem encoded representation without header and footer\n     * @public\n     */\n    JSEncryptRSAKey.prototype.getPrivateBaseKeyB64 = function () {\n        return hex2b64(this.getPrivateBaseKey());\n    };\n    /**\n     * Translate rsa parameters in a hex encoded string representing the rsa public key.\n     * The representation follow the ASN.1 notation :\n     * PublicKeyInfo ::= SEQUENCE {\n     *   algorithm       AlgorithmIdentifier,\n     *   PublicKey       BIT STRING\n     * }\n     * Where AlgorithmIdentifier is:\n     * AlgorithmIdentifier ::= SEQUENCE {\n     *   algorithm       OBJECT IDENTIFIER,     the OID of the enc algorithm\n     *   parameters      ANY DEFINED BY algorithm OPTIONAL (NULL for PKCS #1)\n     * }\n     * and PublicKey is a SEQUENCE encapsulated in a BIT STRING\n     * RSAPublicKey ::= SEQUENCE {\n     *   modulus           INTEGER,  -- n\n     *   publicExponent    INTEGER   -- e\n     * }\n     * @returns {string} DER Encoded String representing the rsa public key\n     * @private\n     */\n    JSEncryptRSAKey.prototype.getPublicBaseKey = function () {\n        var first_sequence = new KJUR.asn1.DERSequence({\n            array: [\n                new KJUR.asn1.DERObjectIdentifier({ oid: \"1.2.840.113549.1.1.1\" }),\n                new KJUR.asn1.DERNull()\n            ]\n        });\n        var second_sequence = new KJUR.asn1.DERSequence({\n            array: [\n                new KJUR.asn1.DERInteger({ bigint: this.n }),\n                new KJUR.asn1.DERInteger({ int: this.e })\n            ]\n        });\n        var bit_string = new KJUR.asn1.DERBitString({\n            hex: \"00\" + second_sequence.getEncodedHex()\n        });\n        var seq = new KJUR.asn1.DERSequence({\n            array: [\n                first_sequence,\n                bit_string\n            ]\n        });\n        return seq.getEncodedHex();\n    };\n    /**\n     * base64 (pem) encoded version of the DER encoded representation\n     * @returns {string} pem encoded representation without header and footer\n     * @public\n     */\n    JSEncryptRSAKey.prototype.getPublicBaseKeyB64 = function () {\n        return hex2b64(this.getPublicBaseKey());\n    };\n    /**\n     * wrap the string in block of width chars. The default value for rsa keys is 64\n     * characters.\n     * @param {string} str the pem encoded string without header and footer\n     * @param {Number} [width=64] - the length the string has to be wrapped at\n     * @returns {string}\n     * @private\n     */\n    JSEncryptRSAKey.wordwrap = function (str, width) {\n        width = width || 64;\n        if (!str) {\n            return str;\n        }\n        var regex = \"(.{1,\" + width + \"})( +|$\\n?)|(.{1,\" + width + \"})\";\n        return str.match(RegExp(regex, \"g\")).join(\"\\n\");\n    };\n    /**\n     * Retrieve the pem encoded private key\n     * @returns {string} the pem encoded private key with header/footer\n     * @public\n     */\n    JSEncryptRSAKey.prototype.getPrivateKey = function () {\n        var key = \"-----BEGIN RSA PRIVATE KEY-----\\n\";\n        key += JSEncryptRSAKey.wordwrap(this.getPrivateBaseKeyB64()) + \"\\n\";\n        key += \"-----END RSA PRIVATE KEY-----\";\n        return key;\n    };\n    /**\n     * Retrieve the pem encoded public key\n     * @returns {string} the pem encoded public key with header/footer\n     * @public\n     */\n    JSEncryptRSAKey.prototype.getPublicKey = function () {\n        var key = \"-----BEGIN PUBLIC KEY-----\\n\";\n        key += JSEncryptRSAKey.wordwrap(this.getPublicBaseKeyB64()) + \"\\n\";\n        key += \"-----END PUBLIC KEY-----\";\n        return key;\n    };\n    /**\n     * Check if the object contains the necessary parameters to populate the rsa modulus\n     * and public exponent parameters.\n     * @param {Object} [obj={}] - An object that may contain the two public key\n     * parameters\n     * @returns {boolean} true if the object contains both the modulus and the public exponent\n     * properties (n and e)\n     * @todo check for types of n and e. N should be a parseable bigInt object, E should\n     * be a parseable integer number\n     * @private\n     */\n    JSEncryptRSAKey.hasPublicKeyProperty = function (obj) {\n        obj = obj || {};\n        return (obj.hasOwnProperty(\"n\") &&\n            obj.hasOwnProperty(\"e\"));\n    };\n    /**\n     * Check if the object contains ALL the parameters of an RSA key.\n     * @param {Object} [obj={}] - An object that may contain nine rsa key\n     * parameters\n     * @returns {boolean} true if the object contains all the parameters needed\n     * @todo check for types of the parameters all the parameters but the public exponent\n     * should be parseable bigint objects, the public exponent should be a parseable integer number\n     * @private\n     */\n    JSEncryptRSAKey.hasPrivateKeyProperty = function (obj) {\n        obj = obj || {};\n        return (obj.hasOwnProperty(\"n\") &&\n            obj.hasOwnProperty(\"e\") &&\n            obj.hasOwnProperty(\"d\") &&\n            obj.hasOwnProperty(\"p\") &&\n            obj.hasOwnProperty(\"q\") &&\n            obj.hasOwnProperty(\"dmp1\") &&\n            obj.hasOwnProperty(\"dmq1\") &&\n            obj.hasOwnProperty(\"coeff\"));\n    };\n    /**\n     * Parse the properties of obj in the current rsa object. Obj should AT LEAST\n     * include the modulus and public exponent (n, e) parameters.\n     * @param {Object} obj - the object containing rsa parameters\n     * @private\n     */\n    JSEncryptRSAKey.prototype.parsePropertiesFrom = function (obj) {\n        this.n = obj.n;\n        this.e = obj.e;\n        if (obj.hasOwnProperty(\"d\")) {\n            this.d = obj.d;\n            this.p = obj.p;\n            this.q = obj.q;\n            this.dmp1 = obj.dmp1;\n            this.dmq1 = obj.dmq1;\n            this.coeff = obj.coeff;\n        }\n    };\n    return JSEncryptRSAKey;\n}(RSAKey));\n\n/**\n *\n * @param {Object} [options = {}] - An object to customize JSEncrypt behaviour\n * possible parameters are:\n * - default_key_size        {number}  default: 1024 the key size in bit\n * - default_public_exponent {string}  default: '010001' the hexadecimal representation of the public exponent\n * - log                     {boolean} default: false whether log warn/error or not\n * @constructor\n */\nvar JSEncrypt = /** @class */ (function () {\n    function JSEncrypt(options) {\n        options = options || {};\n        this.default_key_size = parseInt(options.default_key_size, 10) || 1024;\n        this.default_public_exponent = options.default_public_exponent || \"010001\"; // 65537 default openssl public exponent for rsa key type\n        this.log = options.log || false;\n        // The private and public key.\n        this.key = null;\n    }\n    /**\n     * Method to set the rsa key parameter (one method is enough to set both the public\n     * and the private key, since the private key contains the public key paramenters)\n     * Log a warning if logs are enabled\n     * @param {Object|string} key the pem encoded string or an object (with or without header/footer)\n     * @public\n     */\n    JSEncrypt.prototype.setKey = function (key) {\n        if (this.log && this.key) {\n            console.warn(\"A key was already set, overriding existing.\");\n        }\n        this.key = new JSEncryptRSAKey(key);\n    };\n    /**\n     * Proxy method for setKey, for api compatibility\n     * @see setKey\n     * @public\n     */\n    JSEncrypt.prototype.setPrivateKey = function (privkey) {\n        // Create the key.\n        this.setKey(privkey);\n    };\n    /**\n     * Proxy method for setKey, for api compatibility\n     * @see setKey\n     * @public\n     */\n    JSEncrypt.prototype.setPublicKey = function (pubkey) {\n        // Sets the public key.\n        this.setKey(pubkey);\n    };\n    /**\n     * Proxy method for RSAKey object's decrypt, decrypt the string using the private\n     * components of the rsa key object. Note that if the object was not set will be created\n     * on the fly (by the getKey method) using the parameters passed in the JSEncrypt constructor\n     * @param {string} str base64 encoded crypted string to decrypt\n     * @return {string} the decrypted string\n     * @public\n     */\n    JSEncrypt.prototype.decrypt = function (str) {\n        // Return the decrypted string.\n        try {\n            return this.getKey().decrypt(b64tohex(str));\n        }\n        catch (ex) {\n            return false;\n        }\n    };\n    /**\n     * Proxy method for RSAKey object's encrypt, encrypt the string using the public\n     * components of the rsa key object. Note that if the object was not set will be created\n     * on the fly (by the getKey method) using the parameters passed in the JSEncrypt constructor\n     * @param {string} str the string to encrypt\n     * @return {string} the encrypted string encoded in base64\n     * @public\n     */\n    JSEncrypt.prototype.encrypt = function (str) {\n        // Return the encrypted string.\n        try {\n            return hex2b64(this.getKey().encrypt(str));\n        }\n        catch (ex) {\n            return false;\n        }\n    };\n    /**\n     * Proxy method for RSAKey object's sign.\n     * @param {string} str the string to sign\n     * @param {function} digestMethod hash method\n     * @param {string} digestName the name of the hash algorithm\n     * @return {string} the signature encoded in base64\n     * @public\n     */\n    JSEncrypt.prototype.sign = function (str, digestMethod, digestName) {\n        // return the RSA signature of 'str' in 'hex' format.\n        try {\n            return hex2b64(this.getKey().sign(str, digestMethod, digestName));\n        }\n        catch (ex) {\n            return false;\n        }\n    };\n    /**\n     * Proxy method for RSAKey object's verify.\n     * @param {string} str the string to verify\n     * @param {string} signature the signature encoded in base64 to compare the string to\n     * @param {function} digestMethod hash method\n     * @return {boolean} whether the data and signature match\n     * @public\n     */\n    JSEncrypt.prototype.verify = function (str, signature, digestMethod) {\n        // Return the decrypted 'digest' of the signature.\n        try {\n            return this.getKey().verify(str, b64tohex(signature), digestMethod);\n        }\n        catch (ex) {\n            return false;\n        }\n    };\n    /**\n     * Getter for the current JSEncryptRSAKey object. If it doesn't exists a new object\n     * will be created and returned\n     * @param {callback} [cb] the callback to be called if we want the key to be generated\n     * in an async fashion\n     * @returns {JSEncryptRSAKey} the JSEncryptRSAKey object\n     * @public\n     */\n    JSEncrypt.prototype.getKey = function (cb) {\n        // Only create new if it does not exist.\n        if (!this.key) {\n            // Get a new private key.\n            this.key = new JSEncryptRSAKey();\n            if (cb && {}.toString.call(cb) === \"[object Function]\") {\n                this.key.generateAsync(this.default_key_size, this.default_public_exponent, cb);\n                return;\n            }\n            // Generate the key.\n            this.key.generate(this.default_key_size, this.default_public_exponent);\n        }\n        return this.key;\n    };\n    /**\n     * Returns the pem encoded representation of the private key\n     * If the key doesn't exists a new key will be created\n     * @returns {string} pem encoded representation of the private key WITH header and footer\n     * @public\n     */\n    JSEncrypt.prototype.getPrivateKey = function () {\n        // Return the private representation of this key.\n        return this.getKey().getPrivateKey();\n    };\n    /**\n     * Returns the pem encoded representation of the private key\n     * If the key doesn't exists a new key will be created\n     * @returns {string} pem encoded representation of the private key WITHOUT header and footer\n     * @public\n     */\n    JSEncrypt.prototype.getPrivateKeyB64 = function () {\n        // Return the private representation of this key.\n        return this.getKey().getPrivateBaseKeyB64();\n    };\n    /**\n     * Returns the pem encoded representation of the public key\n     * If the key doesn't exists a new key will be created\n     * @returns {string} pem encoded representation of the public key WITH header and footer\n     * @public\n     */\n    JSEncrypt.prototype.getPublicKey = function () {\n        // Return the private representation of this key.\n        return this.getKey().getPublicKey();\n    };\n    /**\n     * Returns the pem encoded representation of the public key\n     * If the key doesn't exists a new key will be created\n     * @returns {string} pem encoded representation of the public key WITHOUT header and footer\n     * @public\n     */\n    JSEncrypt.prototype.getPublicKeyB64 = function () {\n        // Return the private representation of this key.\n        return this.getKey().getPublicBaseKeyB64();\n    };\n    JSEncrypt.version = \"3.0.0-rc.1\";\n    return JSEncrypt;\n}());\n\nwindow.JSEncrypt = JSEncrypt;\n\nexports.JSEncrypt = JSEncrypt;\nexports.default = JSEncrypt;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/jsencrypt/bin/jsencrypt.js\n// module id = 36\n// module chunks = 2 3 6"],"sourceRoot":""}